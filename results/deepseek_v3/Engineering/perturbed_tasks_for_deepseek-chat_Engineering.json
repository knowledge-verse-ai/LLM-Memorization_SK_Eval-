[
    {
        "task_id": "e8bc386f-c192-40fe-ad23-d5bf5312ddeb-a",
        "original_task_id": "e8bc386f-c192-40fe-ad23-d5bf5312ddeb",
        "task_details": {
            "task_instructions": "Entwickeln Sie ein optimales Leitsystem für eine Flotte unbemannter Luftfahrzeuge (UAVs), die in einer komplexen Umgebung tätig sind. Das System umfasst 5 autonome UAVs, die mit dem kooperativen Transport einer 50-kg-Last über eine 100 Meter lange unebene Landschaft transportieren. Jedes UAV hat eine maximale Antriebskapazität von 20 n und eine maximale Geschwindigkeit von 2 m/s. Die Last muss innerhalb von 60 Sekunden geliefert werden, während der Energieverbrauch minimiert und Kollisionen verhindern. Die Landschaft wird als 2D -Netz mit erhöhten Höhendaten modelliert. Die Aufgabe beinhaltet: 1) Formulierung eines dynamischen Modells des Systems, 2) Gestaltung eines dezentralen Leitlinienalgorithmus, 3) Simulation der Systemleistung mithilfe des vorgeschlagenen Leitsystems und 4) Validierung der Ergebnisse basierend auf vordefinierten Leistungsmetriken.",
            "task_data": {
                "data_points": {
                    "uavs": [
                        {
                            "id": 3.42,
                            "mass": 10.38,
                            "max_propulsion": 22.17,
                            "max_speed": 2.02
                        },
                        {
                            "id": 3.44,
                            "mass": 10.91,
                            "max_propulsion": 17.62,
                            "max_speed": 1.95
                        },
                        {
                            "id": 4.91,
                            "mass": 9.18,
                            "max_propulsion": 21.82,
                            "max_speed": 2.29
                        },
                        {
                            "id": 2.13,
                            "mass": 11.17,
                            "max_propulsion": 18.35,
                            "max_speed": 1.99
                        },
                        {
                            "id": 0.94,
                            "mass": 9.0,
                            "max_propulsion": 19.19,
                            "max_speed": 1.81
                        }
                    ],
                    "load": {
                        "mass": 51.18
                    },
                    "landscape": {
                        "grid_size": [
                            106.99,
                            94.1
                        ],
                        "elevation_data": "randomly generated with a standard deviation of 0.5 meters"
                    },
                    "constraints": {
                        "time_limit": 68.92,
                        "collision_avoidance": 1.0,
                        "energy_minimization": 0.85
                    }
                }
            },
            "mathematical_formulation": {
                "dynamic_model": "M * d²x/dt² + C * dx/dt + K * x = F_ext + F_guidance",
                "control_objective": "minimize ∫(F_guidance²) dt",
                "collision_constraint": "||x_i - x_j|| ≥ r_min for all i ≠ j",
                "energy_constraint": "∑(F_guidance_i²) ≤ E_max"
            }
        }
    },
    {
        "task_id": "e8bc386f-c192-40fe-ad23-d5bf5312ddeb-b",
        "original_task_id": "e8bc386f-c192-40fe-ad23-d5bf5312ddeb",
        "task_details": {
            "task_instructions": "Diseñe un esquema de guía óptimo para un sistema de tierra no tripulada de vehículos múltiples que opere en un entorno complejo. El sistema comprende 5 vehículos terrestres no tripulados autónomos (UGV) encargados de transportar colaborativamente una carga de 50 kg en un paisaje desigual de 100 metros de largo. Cada UGV tiene una capacidad de fuerza máxima de 20 N y una velocidad máxima de 2 m/s. La carga debe entregarse dentro de los 60 segundos mientras minimiza el uso de energía y evita las colisiones. El paisaje se representa como una cuadrícula 2D con datos de elevación proporcionados. La tarea implica: 1) Desarrollar un modelo dinámico del sistema, 2) Diseñar un algoritmo de guía descentralizado, 3) simular el rendimiento del sistema utilizando el esquema de guía propuesto y 4) validando los resultados contra las métricas de rendimiento predefinidas.",
            "task_data": {
                "data_points": {
                    "ugvs": [
                        {
                            "id": 3.31,
                            "mass": 10.52,
                            "max_force": 20.22,
                            "max_speed": 1.9
                        },
                        {
                            "id": 1.79,
                            "mass": 8.53,
                            "max_force": 21.22,
                            "max_speed": 2.25
                        },
                        {
                            "id": 0.93,
                            "mass": 8.91,
                            "max_force": 19.79,
                            "max_speed": 2.08
                        },
                        {
                            "id": 4.66,
                            "mass": 11.29,
                            "max_force": 17.14,
                            "max_speed": 2.23
                        },
                        {
                            "id": 4.41,
                            "mass": 10.71,
                            "max_force": 22.31,
                            "max_speed": 2.0
                        }
                    ],
                    "load": {
                        "mass": 46.31
                    },
                    "landscape": {
                        "grid_size": [
                            105.44,
                            97.26
                        ],
                        "elevation_data": "randomly generated with a standard deviation of 0.5 meters"
                    },
                    "constraints": {
                        "time_limit": 59.75,
                        "collision_avoidance": 0.99,
                        "energy_minimization": 0.94
                    }
                }
            },
            "mathematical_formulation": {
                "dynamic_model": "M * d²x/dt² + C * dx/dt + K * x = F_ext + F_guidance",
                "control_objective": "minimize ∫(F_guidance²) dt",
                "collision_constraint": "||x_i - x_j|| ≥ r_min for all i ≠ j",
                "energy_constraint": "∑(F_guidance_i²) ≤ E_max"
            }
        }
    },
    {
        "task_id": "e8bc386f-c192-40fe-ad23-d5bf5312ddeb-c",
        "original_task_id": "e8bc386f-c192-40fe-ad23-d5bf5312ddeb",
        "task_details": {
            "task_instructions": "Diseñe un esquema de guía óptimo para un sistema de tierra no tripulada de vehículos múltiples que opere en un entorno complejo. El sistema comprende 5 vehículos autónomos encargados de transportar cooperativamente una carga de 50 kg en una superficie desigual de 100 metros de largo. Cada vehículo tiene una fuerza de propulsión máxima de 20 N y una velocidad máxima de 2 m/s. La carga debe entregarse dentro de los 60 segundos al tiempo que minimiza el consumo de combustible y evita las colisiones. La superficie se modela como una cuadrícula 2D con datos de elevación proporcionados. La tarea requiere: 1) formular un modelo cinemático del sistema, 2) diseñar un algoritmo de guía descentralizado, 3) simular el rendimiento del sistema utilizando el esquema de guía propuesto y 4) validando los resultados contra los índices de rendimiento predefinidos.",
            "task_data": {
                "data_points": {
                    "vehicles": [
                        {
                            "id": 4.1,
                            "mass": 8.88,
                            "max_propulsion_force": 22.32,
                            "max_speed": 2.14
                        },
                        {
                            "id": 1.07,
                            "mass": 10.19,
                            "max_propulsion_force": 18.44,
                            "max_speed": 1.96
                        },
                        {
                            "id": 2.97,
                            "mass": 11.14,
                            "max_propulsion_force": 22.62,
                            "max_speed": 2.17
                        },
                        {
                            "id": 5.66,
                            "mass": 9.65,
                            "max_propulsion_force": 18.7,
                            "max_speed": 1.82
                        },
                        {
                            "id": 1.71,
                            "mass": 8.63,
                            "max_propulsion_force": 21.84,
                            "max_speed": 1.85
                        }
                    ],
                    "load": {
                        "mass": 45.41
                    },
                    "surface": {
                        "grid_size": [
                            85.42,
                            93.87
                        ],
                        "elevation_data": "randomly generated with a standard deviation of 0.5 meters"
                    },
                    "constraints": {
                        "time_limit": 51.64,
                        "collision_avoidance": 0.97,
                        "fuel_minimization": 0.98
                    }
                }
            },
            "mathematical_formulation": {
                "dynamic_model": "M * d²x/dt² + C * dx/dt + K * x = F_ext + F_guidance",
                "control_objective": "minimize ∫(F_guidance²) dt",
                "collision_constraint": "||x_i - x_j|| ≥ r_min for all i ≠ j",
                "energy_constraint": "∑(F_guidance_i²) ≤ E_max"
            }
        }
    },
    {
        "task_id": "3e6e759a-a489-42d0-bd51-21d9ca0a781c-a",
        "original_task_id": "3e6e759a-a489-42d0-bd51-21d9ca0a781c",
        "task_details": {
            "task_instructions": "Concevez un schéma de guidage optimal pour un robot aérien multirotor pour accomplir le chemin suivant l'influence de la turbulence atmosphérique. Cette tâche comprend: 1) le développement des équations de mouvement pour le multirotor, 2) la conception d'un algorithme de contrôle robuste à l'aide d'un régulateur quadratique linéaire (LQR) avec des capacités de rejet de perturbation, 3) Simulation du comportement du système dans diverses conditions atmosphériques, et 4) Évaluation de l'algorithme de contrôle, en utilisant des métriques prédéfinies, notamment une déviation de trajectoire, un temps de réponse et une consomment de puissance prédéfinie.",
            "task_data": {
                "data_points": {
                    "multirotor_parameters": {
                        "mass": 1.23,
                        "inertia_matrix": [
                            0.04,
                            0.0,
                            0.03,
                            0.03,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0
                        ],
                        "arm_length": 0.22,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02
                    },
                    "atmospheric_disturbance": {
                        "mean_velocity": 4.71,
                        "variance": 1.81,
                        "direction": [
                            0.7,
                            0.0,
                            0.78
                        ]
                    },
                    "path": {
                        "waypoints": [
                            [
                                10.85,
                                11.44,
                                0.0
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                4.29,
                                5.75,
                                5.71
                            ]
                        ],
                        "time_intervals": [
                            0.0,
                            9.91,
                            5.72
                        ]
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * d²x/dt² = u_x - F_dx",
                    "rotational": "I * d²θ/dt² = τ - τ_d",
                    "thrust": "F = k_f * ω²",
                    "drag": "F_d = 0.5 * ρ * C_d * A * v²"
                },
                "control_law": {
                    "LQR": "u = -K * x",
                    "disturbance_rejection": "u_d = -K_d * d"
                },
                "performance_metrics": {
                    "path_deviation": "e = ||x_d - x||",
                    "response_time": "t_s",
                    "power_consumption": "E = ∫(u²) dt"
                }
            }
        }
    },
    {
        "task_id": "3e6e759a-a489-42d0-bd51-21d9ca0a781c-b",
        "original_task_id": "3e6e759a-a489-42d0-bd51-21d9ca0a781c",
        "task_details": {
            "task_instructions": "Idee un algoritmo de guía óptimo para un robot aéreo hexacóptero para lograr un camino preciso seguido en presencia de turbulencia atmosférica. La tarea incluye: 1) Desarrollar el modelo matemático del hexacóptero, 2) diseñar un esquema de control robusto que utilice un regulador cuadrático lineal (LQR) con rechazo de perturbaciones, 3) simulando la respuesta del sistema en varias condiciones turbulentas, y 4) evaluar la efectividad del esquema de control utilizando métricas predeterminadas como el error de posición, el tiempo de concentración de la posición y el tiempo de consumo de potencia.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.3,
                        "inertia_matrix": [
                            0.0,
                            0.0,
                            0.04,
                            0.0,
                            0.0,
                            0.0,
                            0.03,
                            0.0,
                            0.03
                        ],
                        "arm_length": 0.27,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.01
                    },
                    "wind_disturbance": {
                        "mean_speed": 5.36,
                        "variance": 1.98,
                        "direction": [
                            0.62,
                            0.66,
                            0.0
                        ]
                    },
                    "trajectory": {
                        "waypoints": [
                            [
                                0.0,
                                10.07,
                                10.73
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                5.52,
                                4.51,
                                4.55
                            ]
                        ],
                        "time_steps": [
                            0.0,
                            4.72,
                            9.96
                        ]
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * d²x/dt² = u_x - F_dx",
                    "rotational": "I * d²θ/dt² = τ - τ_d",
                    "thrust": "F = k_f * ω²",
                    "drag": "F_d = 0.5 * ρ * C_d * A * v²"
                },
                "control_law": {
                    "LQR": "u = -K * x",
                    "disturbance_rejection": "u_d = -K_d * d"
                },
                "performance_metrics": {
                    "tracking_error": "e = ||x_d - x||",
                    "settling_time": "t_s",
                    "energy_consumption": "E = ∫(u²) dt"
                }
            }
        }
    },
    {
        "task_id": "3e6e759a-a489-42d0-bd51-21d9ca0a781c-c",
        "original_task_id": "3e6e759a-a489-42d0-bd51-21d9ca0a781c",
        "task_details": {
            "task_instructions": "Entwickeln Sie einen optimalen Kontrollalgorithmus für einen Rotorcraft -Luftroboter, um den Pfad zu erreichen, der in Gegenwart von atmosphärischen Turbulenzen nachfolgt.  Die Zuordnung umfasst: 1) Entwicklung der Bewegungsgleichungen für das Rotorcraft, 2) Entwerfen eines robusten Kontrollschemas unter Verwendung eines linearen quadratischen Regulators (LQR) zur Minderung von Störungen 3) Simulation der Reaktion des Systems unter verschiedenen Windbedingungen und 4) Evaluierung der Kontrollalgorithmus -Wirksamkeit unter Verwendung etablierter Matriken wie Positionsfehlern wie Positionsfehlern und Stromnutzung und Stromnutzung.",
            "task_data": {
                "data_points": {
                    "rotorcraft_parameters": {
                        "mass": 1.35,
                        "inertia_matrix": [
                            0.0,
                            0.05,
                            0.03,
                            0.0,
                            0.0,
                            0.0,
                            0.03,
                            0.0,
                            0.0
                        ],
                        "arm_length": 0.28,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.01
                    },
                    "wind_disturbance": {
                        "mean_velocity": 5.02,
                        "variance": 1.7,
                        "direction": [
                            0.75,
                            0.0,
                            0.77
                        ]
                    },
                    "trajectory": {
                        "waypoints": [
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                0.0,
                                8.93,
                                8.82
                            ],
                            [
                                4.46,
                                5.35,
                                5.3
                            ]
                        ],
                        "time_steps": [
                            0.0,
                            5.01,
                            9.46
                        ]
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * d²x/dt² = u_x - F_dx",
                    "rotational": "I * d²θ/dt² = τ - τ_d",
                    "thrust": "F = k_f * ω²",
                    "drag": "F_d = 0.5 * ρ * C_d * A * v²"
                },
                "control_law": {
                    "LQR": "u = -K * x",
                    "disturbance_rejection": "u_d = -K_d * d"
                },
                "performance_metrics": {
                    "tracking_error": "e = ||x_d - x||",
                    "settling_time": "t_s",
                    "energy_consumption": "E = ∫(u²) dt"
                }
            }
        }
    },
    {
        "task_id": "6d9560f8-20fa-47ff-a32c-5ff5f18dcfed-a",
        "original_task_id": "6d9560f8-20fa-47ff-a32c-5ff5f18dcfed",
        "task_details": {
            "task_instructions": "Entwickeln Sie einen optimalen Leitlinienalgorithmus für einen Hexacopter -Luftroboter, um trotz atmosphärischer Turbulenzen einen vorgeschriebenen Flugweg zu befolgen. Die Aufgabe umfasst: 1) Erstellen einer dynamischen Darstellung des Hexacopter -Luftroboters, der aerodynamische Effekte berücksichtigt. 2) Formulieren Sie ein nichtlineares Modell Predictive Control (NMPC), um den Pfadfehlern zu verringern und gleichzeitig die Befehle und Zustände der Aktuatorbeschränkungen einzuhalten. 3) Simulieren Sie das System unter verschiedenen turbulenten Bedingungen und bewerten Sie die Steuerung der Controller anhand von Metriken wie Quadratfehler (RMSE) und Kontrollenergie. 4) Bereiten Sie eine gründliche Analyse der Widerstandsfähigkeit und Stabilität des vorgeschlagenen Leitlinienalgorithmus an.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.6,
                        "inertia_matrix": [
                            0.0,
                            0.0,
                            0.04,
                            0.03,
                            0.03,
                            0.0,
                            0.0,
                            0.0,
                            0.0
                        ],
                        "arm_length": 0.26,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.01,
                        "gravity": 9.32
                    },
                    "atmospheric_turbulence": {
                        "mean_wind_speed": [
                            1.31,
                            0.53,
                            1.82
                        ],
                        "turbulence_intensity": [
                            0.53,
                            0.32,
                            0.2
                        ],
                        "turbulence_frequency": [
                            0.09,
                            0.16,
                            0.21
                        ]
                    },
                    "flight_path": {
                        "reference_path": [
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                3.4,
                                3.14,
                                3.32
                            ],
                            [
                                0.86,
                                1.03,
                                1.03
                            ],
                            [
                                2.17,
                                2.02,
                                2.04
                            ]
                        ],
                        "time_vector": [
                            0.88,
                            3.41,
                            1.74,
                            0.0
                        ]
                    },
                    "actuator_constraints": {
                        "max_thrust": 21.77,
                        "min_thrust": 0.0,
                        "max_torque": [
                            1.54,
                            1.43,
                            1.57
                        ]
                    }
                }
            },
            "mathematical_formulation": {
                "dynamic_model": "m * dv/dt = F_thrust - F_drag - m * g + F_turbulence",
                "NMPC_objective": "minimize J = integral(||x(t) - x_ref(t)||^2 + ||u(t)||^2) dt",
                "constraints": "u_min <= u(t) <= u_max, x_min <= x(t) <= x_max",
                "turbulence_model": "F_turbulence = 0.5 * rho * Cd * A * ||v_turbulence - v||^2"
            }
        }
    },
    {
        "task_id": "6d9560f8-20fa-47ff-a32c-5ff5f18dcfed-b",
        "original_task_id": "6d9560f8-20fa-47ff-a32c-5ff5f18dcfed",
        "task_details": {
            "task_instructions": "Concevez un algorithme de contrôle optimal pour un robot aérien hexacopter pour suivre une trajectoire de vol prescrite en présence de turbulence atmosphérique.  La tâche comprend ces phases: 1) développer une représentation dynamique du robot aérien Hexacopter, incorporant des effets aérodynamiques. 2) Formuler un problème d'optimisation de contrôle prédictif du modèle non linéaire (NMPC) pour minimiser l'erreur de suivi du chemin tout en adhérant aux limites des entrées et des états de contrôle. 3) Simuler le système dans diverses conditions turbulentes et évaluer les performances du contrôleur à l'aide de mesures telles que l'erreur quadratique moyenne (RMSE) et l'utilisation de l'actionneur. 4) Fournir une analyse approfondie de la robustesse et de la stabilité de l'algorithme de contrôle proposé.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.69,
                        "inertia_matrix": [
                            0.0,
                            0.0,
                            0.04,
                            0.0,
                            0.03,
                            0.0,
                            0.0,
                            0.0,
                            0.03
                        ],
                        "arm_length": 0.27,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "gravity": 8.71
                    },
                    "atmospheric_turbulence": {
                        "mean_wind_speed": [
                            1.78,
                            0.53,
                            1.72
                        ],
                        "turbulence_intensity": [
                            0.22,
                            0.3,
                            0.43
                        ],
                        "turbulence_frequency": [
                            0.09,
                            0.2,
                            0.17
                        ]
                    },
                    "flight_path": {
                        "reference_path": [
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                1.77,
                                1.97,
                                2.04
                            ],
                            [
                                0.86,
                                0.97,
                                0.99
                            ],
                            [
                                2.62,
                                3.08,
                                3.33
                            ]
                        ],
                        "time_vector": [
                            2.14,
                            0.0,
                            3.26,
                            1.08
                        ]
                    },
                    "control_constraints": {
                        "max_thrust": 19.73,
                        "min_thrust": 0.0,
                        "max_torque": [
                            1.56,
                            1.49,
                            1.57
                        ]
                    }
                }
            },
            "mathematical_formulation": {
                "dynamic_model": "m * dv/dt = F_thrust - F_drag - m * g + F_turbulence",
                "NMPC_objective": "minimize J = integral(||x(t) - x_ref(t)||^2 + ||u(t)||^2) dt",
                "constraints": "u_min <= u(t) <= u_max, x_min <= x(t) <= x_max",
                "turbulence_model": "F_turbulence = 0.5 * rho * Cd * A * ||v_turbulence - v||^2"
            }
        }
    },
    {
        "task_id": "6d9560f8-20fa-47ff-a32c-5ff5f18dcfed-c",
        "original_task_id": "6d9560f8-20fa-47ff-a32c-5ff5f18dcfed",
        "task_details": {
            "task_instructions": "Idee un esquema de control óptimo para un robot aéreo hexacóptero para rastrear una ruta de vuelo prescrita a pesar de la presencia de perturbaciones atmosféricas. La tarea abarca estos pasos: 1) Construya una representación dinámica del robot aéreo hexacóptero, considerando los efectos aerodinámicos. 2) Formule un problema de control predictivo del modelo no lineal (NMPC) para minimizar los errores de seguimiento de la ruta mientras se adhiere a las restricciones sobre las entradas del actuador y los estados del sistema. 3) Simule el sistema en condiciones atmosféricas variables y evalúe el rendimiento del controlador utilizando métricas como el error cuadrado medio (RMSE) y el esfuerzo de control. 4) Realice un análisis exhaustivo de la robustez y estabilidad del esquema de control propuesto.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.52,
                        "inertia_matrix": [
                            0.0,
                            0.0,
                            0.03,
                            0.0,
                            0.0,
                            0.03,
                            0.04,
                            0.0,
                            0.0
                        ],
                        "arm_length": 0.24,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "gravity": 9.35
                    },
                    "atmospheric_disturbances": {
                        "mean_wind_speed": [
                            1.28,
                            0.49,
                            1.83
                        ],
                        "wind_gust_amplitude": [
                            0.44,
                            0.33,
                            0.21
                        ],
                        "wind_gust_frequency": [
                            0.2,
                            0.1,
                            0.15
                        ]
                    },
                    "trajectory": {
                        "reference_path": [
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                3.18,
                                2.63,
                                2.65
                            ],
                            [
                                1.91,
                                2.2,
                                2.15
                            ],
                            [
                                1.1,
                                0.91,
                                0.94
                            ]
                        ],
                        "time_vector": [
                            0.99,
                            2.75,
                            1.88,
                            0.0
                        ]
                    },
                    "control_constraints": {
                        "max_thrust": 19.0,
                        "min_thrust": 0.0,
                        "max_torque": [
                            1.35,
                            1.4,
                            1.28
                        ]
                    }
                }
            },
            "mathematical_formulation": {
                "dynamic_model": "m * dv/dt = F_thrust - F_drag - m * g + F_wind",
                "NMPC_objective": "minimize J = integral(||x(t) - x_ref(t)||^2 + ||u(t)||^2) dt",
                "constraints": "u_min <= u(t) <= u_max, x_min <= x(t) <= x_max",
                "wind_model": "F_wind = 0.5 * rho * Cd * A * ||v_wind - v||^2"
            }
        }
    },
    {
        "task_id": "742411f6-2fd9-4c2d-8f4f-d87d2a644a31-a",
        "original_task_id": "742411f6-2fd9-4c2d-8f4f-d87d2a644a31",
        "task_details": {
            "task_instructions": "Développez un algorithme de contrôle optimal pour un système dynamique non linéaire à sortie multiple (MIMO) modélisant un robot aérien hexacopter sous turbulence atmosphérique. Cette tâche comprend: 1) la détermination des équations non linéaires de mouvement pour l'hexacopter, 2) la linéarisation du modèle sur une condition de vol stationnaire, 3) la mise en œuvre d'un régulateur quadratique linéaire (LQR) pour la stabilité, 4) intégrant un filtre Kalman étendu pour l'observation de l'État sous les cris de vent. Fournissez des formulations mathématiques détaillées, des paramètres du contrôleur et des résultats de simulation.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.54,
                        "inertia_matrix": [
                            0.05,
                            0.0,
                            0.0,
                            0.0,
                            0.04,
                            0.0,
                            0.0,
                            0.0,
                            0.05
                        ],
                        "arm_length": 0.31,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "gravity": 9.46
                    },
                    "wind_disturbance": {
                        "gust_amplitude": 2.6,
                        "gust_frequency": 0.58
                    },
                    "sensor_noise": {
                        "position_noise_variance": 0.01,
                        "velocity_noise_variance": 0.03,
                        "attitude_noise_variance": 0.01
                    }
                }
            },
            "mathematical_formulation": {
                "nonlinear_dynamics": "\\dot{x} = v, \\dot{v} = \\frac{1}{m}(R(\\phi, \\theta, \\psi)F - mg\\hat{z}), \\dot{\\omega} = J^{-1}(\\tau - \\omega \\times J\\omega)",
                "linearized_dynamics": "\\delta\\dot{x} = A\\delta x + B\\delta u, \\delta y = C\\delta x + D\\delta u",
                "LQR_cost_function": "J = \\int_0^\\infty (x^T Q x + u^T R u) dt",
                "Kalman_filter": "\\hat{x}_{k|k-1} = A\\hat{x}_{k-1|k-1} + Bu_{k-1}, P_{k|k-1} = AP_{k-1|k-1}A^T + Q_k"
            }
        }
    },
    {
        "task_id": "742411f6-2fd9-4c2d-8f4f-d87d2a644a31-b",
        "original_task_id": "742411f6-2fd9-4c2d-8f4f-d87d2a644a31",
        "task_details": {
            "task_instructions": "Entwickeln Sie einen optimalen Kontrollalgorithmus für ein nichtlineares dynamisches System mit mehreren Input-Mehrfacheingängen (Multiple-Output), das einen Hexacopter-Luftroboter unter atmosphärischen Turbulenz darstellt. Die Aufgabe umfasst: 1) Ermittlung der nichtlinearen Dynamik des Hexacopters, 2) Linearisierung des Systems über einen stabilen schwebenden Zustand, 3) Entwerfen eines linearen quadratischen Regulators (LQR) zur Stabilität, 4) Integration eines Kalmanfilters für Zustandsbeobachtungen unter Messgrößen und 5). Geben Sie detaillierte mathematische Ableitungen, Controller -Parameter und Simulationsergebnisse an.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.54,
                        "inertia_matrix": [
                            0.0,
                            0.0,
                            0.0,
                            0.04,
                            0.04,
                            0.0,
                            0.05,
                            0.0,
                            0.0
                        ],
                        "arm_length": 0.32,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "gravity": 10.85
                    },
                    "wind_disturbance": {
                        "gust_amplitude": 2.26,
                        "gust_frequency": 0.8
                    },
                    "sensor_noise": {
                        "position_noise_variance": 0.02,
                        "velocity_noise_variance": 0.03,
                        "attitude_noise_variance": 0.01
                    }
                }
            },
            "mathematical_formulation": {
                "nonlinear_dynamics": "\\dot{x} = v, \\dot{v} = \\frac{1}{m}(R(\\phi, \\theta, \\psi)F - mg\\hat{z}), \\dot{\\omega} = J^{-1}(\\tau - \\omega \\times J\\omega)",
                "linearized_dynamics": "\\delta\\dot{x} = A\\delta x + B\\delta u, \\delta y = C\\delta x + D\\delta u",
                "LQR_cost_function": "J = \\int_0^\\infty (x^T Q x + u^T R u) dt",
                "Kalman_filter": "\\hat{x}_{k|k-1} = A\\hat{x}_{k-1|k-1} + Bu_{k-1}, P_{k|k-1} = AP_{k-1|k-1}A^T + Q_k"
            }
        }
    },
    {
        "task_id": "742411f6-2fd9-4c2d-8f4f-d87d2a644a31-c",
        "original_task_id": "742411f6-2fd9-4c2d-8f4f-d87d2a644a31",
        "task_details": {
            "task_instructions": "Développez un algorithme de contrôle optimal pour un système dynamique non linéaire multi-entrées multiput (MIMO) modélisant un robot aérien hexacopter sous turbulence atmosphérique.  La tâche comprend: 1) la détermination des équations non linéaires de mouvement pour l'hexacopter, 2) la linéarisation du système sur une condition de vol stationnaire, 3) la conception d'un régulateur quadratique linéaire (LQR) pour la stabilité, 4) intégrant un filtre de Kalman pour l'observation d'état sous les rejets de vent bruyants, et 5) simuant la réaction du système à un pas de commande dans la présence de Gust Gust. Fournissez des dérivations mathématiques approfondies, des paramètres du contrôleur et des résultats de simulation.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.82,
                        "inertia_matrix": [
                            0.0,
                            0.04,
                            0.0,
                            0.0,
                            0.05,
                            0.04,
                            0.0,
                            0.0,
                            0.0
                        ],
                        "arm_length": 0.27,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "gravity": 11.1
                    },
                    "wind_disturbance": {
                        "gust_amplitude": 2.77,
                        "gust_frequency": 0.66
                    },
                    "sensor_noise": {
                        "position_noise_variance": 0.02,
                        "velocity_noise_variance": 0.03,
                        "attitude_noise_variance": 0.0
                    }
                }
            },
            "mathematical_formulation": {
                "nonlinear_dynamics": "\\dot{x} = v, \\dot{v} = \\frac{1}{m}(R(\\phi, \\theta, \\psi)F - mg\\hat{z}), \\dot{\\omega} = J^{-1}(\\tau - \\omega \\times J\\omega)",
                "linearized_dynamics": "\\delta\\dot{x} = A\\delta x + B\\delta u, \\delta y = C\\delta x + D\\delta u",
                "LQR_cost_function": "J = \\int_0^\\infty (x^T Q x + u^T R u) dt",
                "Kalman_filter": "\\hat{x}_{k|k-1} = A\\hat{x}_{k-1|k-1} + Bu_{k-1}, P_{k|k-1} = AP_{k-1|k-1}A^T + Q_k"
            }
        }
    },
    {
        "task_id": "6a0c65c2-a099-4784-99aa-86eaf13e6ddf-a",
        "original_task_id": "6a0c65c2-a099-4784-99aa-86eaf13e6ddf",
        "task_details": {
            "task_instructions": "Desarrolle un algoritmo de control óptimo para un sistema dinámico no lineal de salida múltiple (MIMO) múltiple que represente un robot aéreo hexacóptero bajo perturbaciones atmosféricas.  El sistema debe lograr el seguimiento de la ruta al minimizar el uso de energía y garantizar la estabilidad. El algoritmo de control debe integrar el control predictivo del modelo (MPC) y el aprendizaje de refuerzo (RL). Proporcione un modelo de simulación exhaustivo, incorporando dinámica del sistema, limitaciones y métricas de rendimiento.",
            "task_data": {
                "data_points": {
                    "system_dynamics": {
                        "mass": 1.54,
                        "inertia_matrix": [
                            0.04,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.03,
                            0.03
                        ],
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "arm_length": 0.23,
                        "gravity": 10.52
                    },
                    "atmospheric_disturbance": {
                        "mean_wind_speed": 5.65,
                        "wind_speed_variance": 1.72,
                        "direction": [
                            0.62,
                            0.65,
                            0.0
                        ]
                    },
                    "path": {
                        "waypoints": [
                            [
                                5.75,
                                4.48,
                                4.71
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                10.88,
                                8.51,
                                8.54
                            ]
                        ],
                        "time_steps": [
                            5.48,
                            8.92,
                            0.0
                        ]
                    },
                    "constraints": {
                        "max_thrust": 19.46,
                        "max_tilt_angle": 0.34,
                        "battery_capacity": 2191.24,
                        "energy_consumption_rate": 0.1
                    }
                }
            },
            "mathematical_formulation": {
                "system_dynamics": "m * d²x/dt² = ΣF_i - m * g + F_atmospheric, I * d²θ/dt² = Στ_i",
                "objective_function": "minimize J = ∫(e^T Q e + u^T R u) dt, where e = x_desired - x_actual",
                "constraints": "|F_i| ≤ F_max, |θ| ≤ θ_max, E_consumed ≤ E_max",
                "wind_model": "F_atmospheric = 0.5 * ρ * C_d * A * v_wind²"
            }
        }
    },
    {
        "task_id": "6a0c65c2-a099-4784-99aa-86eaf13e6ddf-b",
        "original_task_id": "6a0c65c2-a099-4784-99aa-86eaf13e6ddf",
        "task_details": {
            "task_instructions": "Desarrolle un algoritmo de control óptimo para un sistema dinámico no lineal de salida múltiple de entrada múltiple (MIMO) modelando un robot aéreo hexacóptero bajo perturbaciones atmosféricas. El sistema debe lograr el seguimiento de la ruta al minimizar el uso de energía y garantizar la estabilidad. El algoritmo de control debe integrar el control predictivo del modelo (MPC) y el aprendizaje de refuerzo (RL).  Proporcione un modelo de simulación integral, incluidas las ecuaciones de movimiento del sistema, limitaciones e indicadores de rendimiento.",
            "task_data": {
                "data_points": {
                    "system_dynamics": {
                        "mass": 1.33,
                        "inertia_matrix": [
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.04,
                            0.03,
                            0.03
                        ],
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "arm_length": 0.25,
                        "gravity": 10.53
                    },
                    "wind_disturbance": {
                        "mean_wind_speed": 5.73,
                        "wind_speed_variance": 1.35,
                        "direction": [
                            0.76,
                            0.7,
                            0.0
                        ]
                    },
                    "trajectory": {
                        "waypoints": [
                            [
                                8.98,
                                10.99,
                                10.53
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                5.68,
                                4.79,
                                5.53
                            ]
                        ],
                        "time_steps": [
                            10.69,
                            0.0,
                            4.32
                        ]
                    },
                    "constraints": {
                        "max_thrust": 20.86,
                        "max_tilt_angle": 0.35,
                        "battery_capacity": 2374.09,
                        "power_consumption_rate": 0.1
                    }
                }
            },
            "mathematical_formulation": {
                "system_dynamics": "m * d²x/dt² = ΣF_i - m * g + F_wind, I * d²θ/dt² = Στ_i",
                "objective_function": "minimize J = ∫(e^T Q e + u^T R u) dt, where e = x_desired - x_actual",
                "constraints": "|F_i| ≤ F_max, |θ| ≤ θ_max, P_consumed ≤ P_max",
                "wind_model": "F_wind = 0.5 * ρ * C_d * A * v_wind²"
            }
        }
    },
    {
        "task_id": "6a0c65c2-a099-4784-99aa-86eaf13e6ddf-c",
        "original_task_id": "6a0c65c2-a099-4784-99aa-86eaf13e6ddf",
        "task_details": {
            "task_instructions": "Entwickeln Sie einen optimalen Leitlinienalgorithmus für ein nichtlineares dynamisches System mit mehreren Eingängen, das einen Hexacopter-Luftroboter unter atmosphärischen Turbulenzen darstellt. Das System muss den Pfad befolgen, während die Stromverbrauch minimiert und das Gleichgewicht aufbewahrt wird. Der Leitalgorithmus sollte eine Kombination aus Modellvorhersagekontrolle (MPC) und Verstärkungslernen (RL) nutzen. Stellen Sie eine detaillierte Simulationsumgebung an, einschließlich Fahrzeugdynamik, Einschränkungen und Leistungsindikatoren.",
            "task_data": {
                "data_points": {
                    "system_dynamics": {
                        "mass": 1.32,
                        "inertia_matrix": [
                            0.03,
                            0.0,
                            0.0,
                            0.04,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.03
                        ],
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "arm_length": 0.24,
                        "gravity": 9.0
                    },
                    "wind_disturbance": {
                        "mean_wind_speed": 4.68,
                        "wind_speed_variance": 1.4,
                        "direction": [
                            0.76,
                            0.0,
                            0.66
                        ]
                    },
                    "trajectory": {
                        "waypoints": [
                            [
                                9.88,
                                9.54,
                                9.48
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                4.72,
                                4.89,
                                4.95
                            ]
                        ],
                        "time_steps": [
                            10.43,
                            0.0,
                            4.68
                        ]
                    },
                    "constraints": {
                        "max_thrust": 18.11,
                        "max_tilt_angle": 0.35,
                        "battery_capacity": 2270.07,
                        "power_consumption_rate": 0.1
                    }
                }
            },
            "mathematical_formulation": {
                "system_dynamics": "m * d²x/dt² = ΣF_i - m * g + F_wind, I * d²θ/dt² = Στ_i",
                "objective_function": "minimize J = ∫(e^T Q e + u^T R u) dt, where e = x_desired - x_actual",
                "constraints": "|F_i| ≤ F_max, |θ| ≤ θ_max, P_consumed ≤ P_max",
                "wind_model": "F_wind = 0.5 * ρ * C_d * A * v_wind²"
            }
        }
    },
    {
        "task_id": "59e31ec5-a797-4a8e-b01f-9594e6369c4e-a",
        "original_task_id": "59e31ec5-a797-4a8e-b01f-9594e6369c4e",
        "task_details": {
            "task_instructions": "Entwickeln Sie ein optimales Leitlinienschema für ein Multi-Unit-System mit automatisiertem Führungsfahrzeug (AGV), das in einem dynamischen Arbeitsbereich betrieben wird. Das System umfasst 5 unabhängige AGVs, die mit dem kooperativen Transport einer 50 kg -Last über eine Fläche von 100 m x 100 m mit Hindernissen transportieren. Das Leitfadenschema muss den Energieverbrauch minimieren und gleichzeitig die Kollisionsprävention und Lastbeständigkeit sicherstellen. Die Lösung muss ein mathematisches Modell der Systemkinetik, einen Leitalgorithmus und eine Simulation der Systemleistung im Rahmen des vorgeschlagenen Schemas enthalten.",
            "task_data": {
                "data_points": {
                    "agvs": [
                        {
                            "id": 4.21,
                            "mass": 9.89,
                            "max_velocity": 2.21,
                            "max_force": 50.72,
                            "battery_capacity": 5632.56
                        },
                        {
                            "id": 2.16,
                            "mass": 10.8,
                            "max_velocity": 1.86,
                            "max_force": 48.81,
                            "battery_capacity": 4697.64
                        },
                        {
                            "id": 5.22,
                            "mass": 9.28,
                            "max_velocity": 2.07,
                            "max_force": 46.77,
                            "battery_capacity": 5181.64
                        },
                        {
                            "id": 3.41,
                            "mass": 8.83,
                            "max_velocity": 1.89,
                            "max_force": 45.1,
                            "battery_capacity": 4453.24
                        },
                        {
                            "id": 0.95,
                            "mass": 8.91,
                            "max_velocity": 2.07,
                            "max_force": 51.85,
                            "battery_capacity": 5336.69
                        }
                    ],
                    "load": {
                        "mass": 50.3,
                        "dimensions": {
                            "length": 1.75,
                            "width": 1.07,
                            "height": 0.56
                        }
                    },
                    "area": {
                        "dimensions": {
                            "length": 104.0,
                            "width": 96.5
                        },
                        "obstructions": [
                            {
                                "id": 0.9,
                                "position": [
                                    17.71,
                                    32.77
                                ],
                                "radius": 5.36
                            },
                            {
                                "id": 2.91,
                                "position": [
                                    21.61,
                                    88.29
                                ],
                                "radius": 3.41
                            },
                            {
                                "id": 2.05,
                                "position": [
                                    63.91,
                                    63.35
                                ],
                                "radius": 6.85
                            }
                        ]
                    },
                    "environment": {
                        "gravity": 8.57,
                        "friction_coefficient": 0.27
                    }
                }
            },
            "mathematical_formulation": {
                "system_kinetics": "M(q)q'' + C(q, q')q' + G(q) = τ + F_ext",
                "energy_expenditure": "E = ∫(τ^T q') dt",
                "collision_prevention": "||p_i - p_j|| ≥ r_i + r_j ∀ i ≠ j",
                "load_steadiness": "||θ|| ≤ θ_max, ||ω|| ≤ ω_max"
            }
        }
    },
    {
        "task_id": "59e31ec5-a797-4a8e-b01f-9594e6369c4e-b",
        "original_task_id": "59e31ec5-a797-4a8e-b01f-9594e6369c4e",
        "task_details": {
            "task_instructions": "Entwickeln Sie ein optimales Steuerungsschema für ein autonomes Fahrzeugnetzwerk mit mehreren Agenten in einer dynamischen Umgebung. Das Netzwerk umfasst 5 unabhängige Fahrzeuge, die mit dem gemeinsamen Transport einer 50 kg -Last über einen Bereich von 100 m x 100 m mit Hindernissen transportieren. Das Kontrollschema muss den Energieverbrauch minimieren und gleichzeitig den kollisionsfreien Betrieb und die Laststabilität sicherstellen. Die Lösung muss ein mathematisches Modell der Systemdynamik, einen Kontrollalgorithmus und eine Simulation umfassen, die die Leistung des Systems im Rahmen des vorgeschlagenen Schemas zeigt.",
            "task_data": {
                "data_points": {
                    "vehicles": [
                        {
                            "id": 1.14,
                            "mass": 10.07,
                            "max_velocity": 2.23,
                            "max_force": 54.07,
                            "battery_capacity": 4912.34
                        },
                        {
                            "id": 1.95,
                            "mass": 10.12,
                            "max_velocity": 1.74,
                            "max_force": 47.7,
                            "battery_capacity": 5049.95
                        },
                        {
                            "id": 2.91,
                            "mass": 8.85,
                            "max_velocity": 2.03,
                            "max_force": 48.29,
                            "battery_capacity": 4515.85
                        },
                        {
                            "id": 4.09,
                            "mass": 10.68,
                            "max_velocity": 1.77,
                            "max_force": 51.08,
                            "battery_capacity": 5017.0
                        },
                        {
                            "id": 5.32,
                            "mass": 10.69,
                            "max_velocity": 1.78,
                            "max_force": 56.27,
                            "battery_capacity": 5275.22
                        }
                    ],
                    "load": {
                        "mass": 54.15,
                        "dimensions": {
                            "length": 2.14,
                            "width": 0.89,
                            "height": 0.47
                        }
                    },
                    "area": {
                        "dimensions": {
                            "length": 90.72,
                            "width": 111.79
                        },
                        "obstacles": [
                            {
                                "id": 2.56,
                                "position": [
                                    19.11,
                                    75.3
                                ],
                                "radius": 3.8
                            },
                            {
                                "id": 1.96,
                                "position": [
                                    54.73,
                                    60.04
                                ],
                                "radius": 6.19
                            },
                            {
                                "id": 1.0,
                                "position": [
                                    26.58,
                                    18.95
                                ],
                                "radius": 5.24
                            }
                        ]
                    },
                    "environment": {
                        "gravity": 9.82,
                        "friction_coefficient": 0.3
                    }
                }
            },
            "mathematical_formulation": {
                "system_dynamics": "M(q)q'' + C(q, q')q' + G(q) = τ + F_ext",
                "energy_usage": "E = ∫(τ^T q') dt",
                "collision_avoidance": "||p_i - p_j|| ≥ r_i + r_j ∀ i ≠ j",
                "load_stability": "||θ|| ≤ θ_max, ||ω|| ≤ ω_max"
            }
        }
    },
    {
        "task_id": "59e31ec5-a797-4a8e-b01f-9594e6369c4e-c",
        "original_task_id": "59e31ec5-a797-4a8e-b01f-9594e6369c4e",
        "task_details": {
            "task_instructions": "Concevez un schéma de contrôle optimal pour un système de véhicule guidé automatisé multi-agents (AGV) fonctionnant dans un espace de travail dynamique. Le système comprend 5 AGV autonomes chargés de transmettre en collaboration une charge de 50 kg dans une zone de 100 m x 100 m contenant des obstacles.  Le schéma de contrôle doit minimiser la consommation d'énergie tout en garantissant la prévention des collisions et la stabilité de la charge. La solution doit inclure un modèle mathématique de la cinétique du système, un algorithme de contrôle et une simulation des performances du système dans le cadre du schéma proposé.",
            "task_data": {
                "data_points": {
                    "agvs": [
                        {
                            "id": 1.14,
                            "mass": 9.61,
                            "max_velocity": 1.83,
                            "max_force": 43.21,
                            "battery_capacity": 5643.05
                        },
                        {
                            "id": 1.86,
                            "mass": 11.45,
                            "max_velocity": 2.3,
                            "max_force": 49.03,
                            "battery_capacity": 4606.88
                        },
                        {
                            "id": 2.61,
                            "mass": 10.28,
                            "max_velocity": 2.22,
                            "max_force": 50.3,
                            "battery_capacity": 5366.99
                        },
                        {
                            "id": 4.62,
                            "mass": 9.63,
                            "max_velocity": 2.03,
                            "max_force": 57.08,
                            "battery_capacity": 4784.81
                        },
                        {
                            "id": 4.32,
                            "mass": 8.73,
                            "max_velocity": 1.99,
                            "max_force": 43.27,
                            "battery_capacity": 4441.48
                        }
                    ],
                    "load": {
                        "mass": 55.3,
                        "dimensions": {
                            "length": 1.71,
                            "width": 0.95,
                            "height": 0.57
                        }
                    },
                    "area": {
                        "dimensions": {
                            "length": 102.6,
                            "width": 89.26
                        },
                        "obstacles": [
                            {
                                "id": 2.93,
                                "position": [
                                    70.66,
                                    22.52
                                ],
                                "radius": 3.78
                            },
                            {
                                "id": 2.13,
                                "position": [
                                    67.64,
                                    60.73
                                ],
                                "radius": 6.75
                            },
                            {
                                "id": 1.03,
                                "position": [
                                    34.38,
                                    21.54
                                ],
                                "radius": 4.72
                            }
                        ]
                    },
                    "environment": {
                        "gravity": 10.22,
                        "friction_coefficient": 0.27
                    }
                }
            },
            "mathematical_formulation": {
                "system_kinetics": "M(q)q'' + C(q, q')q' + G(q) = τ + F_ext",
                "energy_usage": "E = ∫(τ^T q') dt",
                "collision_prevention": "||p_i - p_j|| ≥ r_i + r_j ∀ i ≠ j",
                "load_stability": "||θ|| ≤ θ_max, ||ω|| ≤ ω_max"
            }
        }
    },
    {
        "task_id": "dedd267f-34af-4655-b37d-ba80ed1111a4-a",
        "original_task_id": "dedd267f-34af-4655-b37d-ba80ed1111a4",
        "task_details": {
            "task_instructions": "Diseñe un esquema de guía óptimo para un sistema de vehículos no tripulados de múltiples agentes que opere dentro de un entorno dinámico. El sistema comprende 5 vehículos autónomos encargados de transportar colaborativamente una carga de 50 kg en un paisaje desigual de 100 metros. Cada vehículo tiene una fuerza de propulsión máxima de 20 N, una masa de 10 kg y un radio de comunicación de 30 metros. El paisaje se representa como una cuadrícula 2D con datos de elevación proporcionados. El esquema de orientación debe minimizar el gasto de energía al tiempo que garantiza la evitación de colisiones, la estabilidad de la carga y el cumplimiento de las restricciones temporales (complete la tarea en menos de 10 minutos). Proporcione un algoritmo de guía detallado, incluida la representación del espacio de estado, la función objetivo y las limitaciones.",
            "task_data": {
                "data_points": {
                    "vehicles": [
                        {
                            "id": 4.92,
                            "mass": 9.62,
                            "propulsion_force": 21.75,
                            "communication_radius": 31.68
                        },
                        {
                            "id": 3.32,
                            "mass": 11.17,
                            "propulsion_force": 19.14,
                            "communication_radius": 26.05
                        },
                        {
                            "id": 3.47,
                            "mass": 8.61,
                            "propulsion_force": 21.56,
                            "communication_radius": 30.54
                        },
                        {
                            "id": 1.96,
                            "mass": 10.28,
                            "propulsion_force": 21.02,
                            "communication_radius": 29.17
                        },
                        {
                            "id": 1.05,
                            "mass": 9.99,
                            "propulsion_force": 22.8,
                            "communication_radius": 27.34
                        }
                    ],
                    "load": {
                        "mass": 53.3
                    },
                    "landscape": {
                        "grid_size": "100m x 100m",
                        "elevation_data": "provided as a 100x100 matrix with values in meters"
                    },
                    "time_constraint": 631.63
                }
            },
            "mathematical_formulation": {
                "state_space_representation": "x(t) = [p(t), v(t), θ(t)]^T, where p(t) is position, v(t) is velocity, and θ(t) is orientation.",
                "cost_function": "J = ∫(u^T(t)Ru(t) + x^T(t)Qx(t)) dt, where R and Q are weight matrices, u(t) is control input.",
                "constraints": [
                    "||p_i(t) - p_j(t)|| ≥ d_min for all i ≠ j (collision avoidance)",
                    "|θ_i(t) - θ_j(t)| ≤ θ_max for all i, j (load stability)",
                    "∑u_i(t) ≤ F_max (propulsion force constraint)",
                    "t_f ≤ 600 seconds (time constraint)"
                ]
            }
        }
    },
    {
        "task_id": "dedd267f-34af-4655-b37d-ba80ed1111a4-b",
        "original_task_id": "dedd267f-34af-4655-b37d-ba80ed1111a4",
        "task_details": {
            "task_instructions": "Idee un esquema de control óptimo para un sistema de vehículos no tripulados de múltiples agentes que opere dentro de un entorno dinámico. El sistema comprende 5 vehículos autónomos encargados de transportar colaborativamente una carga de 50 kg en un paisaje desigual de 100 metros. Cada vehículo posee una fuerza de propulsión máxima de 20 N, una masa de 10 kg y un radio de comunicación de 30 metros. El paisaje se representa como una cuadrícula 2D con datos de elevación proporcionados. El esquema de control debe minimizar el gasto de energía al tiempo que garantiza la evitación de colisión, la estabilidad de la carga y el cumplimiento de las restricciones temporales (complete la tarea en 10 minutos). Proporcione un algoritmo de control detallado, incluida la representación del espacio de estado, la función objetivo y las limitaciones.",
            "task_data": {
                "data_points": {
                    "vehicles": [
                        {
                            "id": 1.75,
                            "mass": 8.8,
                            "propulsion_force": 20.74,
                            "communication_radius": 25.7
                        },
                        {
                            "id": 1.06,
                            "mass": 10.95,
                            "propulsion_force": 19.88,
                            "communication_radius": 32.56
                        },
                        {
                            "id": 4.49,
                            "mass": 9.37,
                            "propulsion_force": 19.34,
                            "communication_radius": 29.53
                        },
                        {
                            "id": 2.71,
                            "mass": 11.01,
                            "propulsion_force": 18.08,
                            "communication_radius": 31.75
                        },
                        {
                            "id": 3.84,
                            "mass": 8.73,
                            "propulsion_force": 17.96,
                            "communication_radius": 26.84
                        }
                    ],
                    "load": {
                        "mass": 43.93
                    },
                    "landscape": {
                        "grid_size": "100m x 100m",
                        "elevation_data": "provided as a 100x100 matrix with values in meters"
                    },
                    "time_constraint": 689.41
                }
            },
            "mathematical_formulation": {
                "state_space_representation": "x(t) = [p(t), v(t), θ(t)]^T, where p(t) is position, v(t) is velocity, and θ(t) is orientation.",
                "cost_function": "J = ∫(u^T(t)Ru(t) + x^T(t)Qx(t)) dt, where R and Q are weight matrices, u(t) is control input.",
                "constraints": [
                    "||p_i(t) - p_j(t)|| ≥ d_min for all i ≠ j (collision avoidance)",
                    "|θ_i(t) - θ_j(t)| ≤ θ_max for all i, j (load stability)",
                    "∑u_i(t) ≤ F_max (propulsion force constraint)",
                    "t_f ≤ 600 seconds (time constraint)"
                ]
            }
        }
    },
    {
        "task_id": "dedd267f-34af-4655-b37d-ba80ed1111a4-c",
        "original_task_id": "dedd267f-34af-4655-b37d-ba80ed1111a4",
        "task_details": {
            "task_instructions": "Diseñe un esquema de orientación óptimo para un equipo de vehículos terrestres no tripulados de múltiples agentes (UGV) que opera en un entorno complejo. El sistema comprende 5 UGV autónomos encargados de transportar colaborativamente una carga de 50 kg en un paisaje desigual de 100 metros. Cada UGV tiene una fuerza de propulsión máxima de 20 N, una masa de 10 kg y un radio de comunicación de 30 metros. El paisaje se representa como una cuadrícula 2D con datos de elevación proporcionados. El esquema de orientación debe minimizar el gasto de energía al tiempo que garantiza la evitación de colisiones, la estabilidad de la carga y el cumplimiento de los límites de tiempo (finalización de la misión dentro de los 10 minutos). Proporcione un algoritmo de guía integral, que incluya la representación del espacio de estado, la función objetivo y las limitaciones.",
            "task_data": {
                "data_points": {
                    "ugvs": [
                        {
                            "id": 2.13,
                            "mass": 10.29,
                            "propulsion_force": 22.7,
                            "communication_radius": 33.14
                        },
                        {
                            "id": 4.29,
                            "mass": 9.69,
                            "propulsion_force": 21.39,
                            "communication_radius": 31.05
                        },
                        {
                            "id": 1.01,
                            "mass": 9.26,
                            "propulsion_force": 19.21,
                            "communication_radius": 33.91
                        },
                        {
                            "id": 5.58,
                            "mass": 10.08,
                            "propulsion_force": 22.06,
                            "communication_radius": 29.39
                        },
                        {
                            "id": 3.3,
                            "mass": 10.5,
                            "propulsion_force": 22.53,
                            "communication_radius": 31.98
                        }
                    ],
                    "load": {
                        "mass": 49.49
                    },
                    "landscape": {
                        "grid_size": "100m x 100m",
                        "elevation_data": "provided as a 100x100 matrix with values in meters"
                    },
                    "time_limit": 523.59
                }
            },
            "mathematical_formulation": {
                "state_space_representation": "x(t) = [p(t), v(t), θ(t)]^T, where p(t) is position, v(t) is velocity, and θ(t) is orientation.",
                "objective_function": "J = ∫(u^T(t)Ru(t) + x^T(t)Qx(t)) dt, where R and Q are weight matrices, u(t) is control input.",
                "limitations": [
                    "||p_i(t) - p_j(t)|| ≥ d_min for all i ≠ j (collision avoidance)",
                    "|θ_i(t) - θ_j(t)| ≤ θ_max for all i, j (load stability)",
                    "∑u_i(t) ≤ F_max (propulsion force constraint)",
                    "t_f ≤ 600 seconds (time limit)"
                ]
            }
        }
    },
    {
        "task_id": "a0689b46-c288-4f8d-8835-ac2ef5ad4d4e-a",
        "original_task_id": "a0689b46-c288-4f8d-8835-ac2ef5ad4d4e",
        "task_details": {
            "task_instructions": "Concevez un schéma de contrôle optimal pour un système de véhicules sans pilote multi-agents fonctionnant dans un environnement complexe. Le système comprend 5 véhicules autonomes chargés de transporter en collaboration une charge de 50 kg dans un paysage inégal de 100 mètres. Chaque véhicule a une capacité de force maximale de 200 N et une vitesse maximale de 2 m / s. Le paysage est modélisé comme une grille 2D avec des données d'élévation fournies. Le schéma de contrôle doit minimiser les dépenses énergétiques tout en garantissant la prévention des collisions et la stabilité de la charge. Fournir un algorithme détaillé, y compris la représentation de l'espace d'État, les lois de contrôle et une simulation de la trajectoire du système.",
            "task_data": {
                "data_points": {
                    "vehicles": [
                        {
                            "id": 3.64,
                            "mass": 17.35,
                            "force_capacity": 220.13,
                            "max_velocity": 2.14
                        },
                        {
                            "id": 2.57,
                            "mass": 22.92,
                            "force_capacity": 202.5,
                            "max_velocity": 1.74
                        },
                        {
                            "id": 4.46,
                            "mass": 20.67,
                            "force_capacity": 194.33,
                            "max_velocity": 2.2
                        },
                        {
                            "id": 1.0,
                            "mass": 20.88,
                            "force_capacity": 184.6,
                            "max_velocity": 2.29
                        },
                        {
                            "id": 1.98,
                            "mass": 18.1,
                            "force_capacity": 225.51,
                            "max_velocity": 2.1
                        }
                    ],
                    "load": {
                        "mass": 52.58
                    },
                    "landscape": {
                        "grid_size": [
                            103.62,
                            99.68
                        ],
                        "elevation_data": "randomly_generated_0_to_10_meters"
                    },
                    "environment": {
                        "gravity": 10.23,
                        "friction_coefficient": 0.34
                    }
                }
            },
            "mathematical_formulation": {
                "state_space_representation": "ẋ = Ax + Bu, where x = [position, velocity], u = [force_vector]",
                "energy_minimization": "min ∫(u^T R u) dt, subject to dynamics and constraints",
                "collision_prevention": "||p_i - p_j|| ≥ d_min, ∀i ≠ j",
                "load_stability": "|θ| ≤ θ_max, where θ is the load tilt angle"
            }
        }
    },
    {
        "task_id": "a0689b46-c288-4f8d-8835-ac2ef5ad4d4e-b",
        "original_task_id": "a0689b46-c288-4f8d-8835-ac2ef5ad4d4e",
        "task_details": {
            "task_instructions": "Idee un esquema de control óptimo para un sistema de vehículos aéreos no tripulados (UAV) de múltiples agentes que opere en un entorno dinámico. El sistema comprende 5 UAV autónomos encargados de transportar colaborativamente una carga de 50 kg en un paisaje desigual de 100 metros. Cada UAV tiene una capacidad de propulsión máxima de 200 N y una velocidad máxima de 2 m/s. El paisaje se modela como una cuadrícula 2D con datos de elevación proporcionados. El esquema de control debe minimizar el gasto de energía al tiempo que garantiza la evitación de colisiones y la estabilidad de la carga. Proporcione un algoritmo detallado, incluida la representación del espacio de estado, las leyes de control y una simulación de la trayectoria del sistema.",
            "task_data": {
                "data_points": {
                    "uavs": [
                        {
                            "id": 1.04,
                            "mass": 17.12,
                            "propulsion_capacity": 209.3,
                            "max_velocity": 1.77
                        },
                        {
                            "id": 2.72,
                            "mass": 19.67,
                            "propulsion_capacity": 205.71,
                            "max_velocity": 2.12
                        },
                        {
                            "id": 4.78,
                            "mass": 22.87,
                            "propulsion_capacity": 178.55,
                            "max_velocity": 2.06
                        },
                        {
                            "id": 3.72,
                            "mass": 20.07,
                            "propulsion_capacity": 193.96,
                            "max_velocity": 2.01
                        },
                        {
                            "id": 2.05,
                            "mass": 20.87,
                            "propulsion_capacity": 177.79,
                            "max_velocity": 1.78
                        }
                    ],
                    "load": {
                        "mass": 52.57
                    },
                    "landscape": {
                        "grid_size": [
                            85.88,
                            90.6
                        ],
                        "elevation_data": "randomly_generated_0_to_10_meters"
                    },
                    "environment": {
                        "gravity": 9.6,
                        "friction_coefficient": 0.34
                    }
                }
            },
            "mathematical_formulation": {
                "state_space_representation": "ẋ = Ax + Bu, where x = [position, velocity], u = [propulsion_vector]",
                "energy_minimization": "min ∫(u^T R u) dt, subject to dynamics and constraints",
                "collision_avoidance": "||p_i - p_j|| ≥ d_min, ∀i ≠ j",
                "load_stability": "|θ| ≤ θ_max, where θ is the load tilt angle"
            }
        }
    },
    {
        "task_id": "a0689b46-c288-4f8d-8835-ac2ef5ad4d4e-c",
        "original_task_id": "a0689b46-c288-4f8d-8835-ac2ef5ad4d4e",
        "task_details": {
            "task_instructions": "Idee un esquema de control óptimo para un sistema de vehículos aéreos no tripulados (UAV) de múltiples agentes que opere dentro de un entorno dinámico. El sistema comprende 5 UAV autónomos encargados de transportar colaborativamente un módulo de 50 kg en un paisaje desigual de 100 metros. Cada UAV tiene una fuerza de propulsión máxima de 200 N y una velocidad máxima de 2 m/s. El paisaje se representa como una cuadrícula 2D con datos de elevación proporcionados. El esquema de control debe minimizar el gasto de energía al tiempo que garantiza la prevención de colisiones y la estabilidad del módulo. Proporcione un algoritmo detallado, incluida la representación del espacio de estado, las leyes de control y una simulación de la trayectoria del sistema.",
            "task_data": {
                "data_points": {
                    "uavs": [
                        {
                            "id": 1.06,
                            "mass": 21.81,
                            "propulsion_force": 186.18,
                            "max_velocity": 1.82
                        },
                        {
                            "id": 4.5,
                            "mass": 18.34,
                            "propulsion_force": 174.11,
                            "max_velocity": 1.88
                        },
                        {
                            "id": 3.63,
                            "mass": 19.93,
                            "propulsion_force": 185.03,
                            "max_velocity": 2.25
                        },
                        {
                            "id": 2.67,
                            "mass": 17.74,
                            "propulsion_force": 177.08,
                            "max_velocity": 1.9
                        },
                        {
                            "id": 2.29,
                            "mass": 22.98,
                            "propulsion_force": 227.37,
                            "max_velocity": 2.14
                        }
                    ],
                    "module": {
                        "mass": 44.38
                    },
                    "landscape": {
                        "grid_size": [
                            94.02,
                            93.08
                        ],
                        "elevation_data": "randomly_generated_0_to_10_meters"
                    },
                    "environment": {
                        "gravity": 10.75,
                        "friction_coefficient": 0.31
                    }
                }
            },
            "mathematical_formulation": {
                "state_space_representation": "ẋ = Ax + Bu, where x = [position, velocity], u = [propulsion_force_vector]",
                "energy_minimization": "min ∫(u^T R u) dt, subject to dynamics and constraints",
                "collision_prevention": "||p_i - p_j|| ≥ d_min, ∀i ≠ j",
                "module_stability": "|θ| ≤ θ_max, where θ is the module tilt angle"
            }
        }
    },
    {
        "task_id": "11a70fe1-418c-4ba0-8484-8908c82d6431-a",
        "original_task_id": "11a70fe1-418c-4ba0-8484-8908c82d6431",
        "task_details": {
            "task_instructions": "Idee un esquema de control óptimo para un sistema de vehículos no tripulados de múltiples agentes que opere dentro de un entorno dinámico. El sistema comprende 5 vehículos autónomos encargados de transportar colaborativamente una carga de 50 kg en un paisaje desigual de 100 metros de largo. Cada vehículo tiene una fuerza de propulsión máxima de 20 N y una velocidad máxima de 2 m/s. El paisaje se modela como una cuadrícula 2D con datos de elevación proporcionados. El esquema de control debe minimizar el consumo de energía al tiempo que garantiza la evitación de colisión y la estabilidad de la carga. Proporcione un algoritmo de control detallado, incluida la representación del espacio de estado, la función objetivo y las restricciones.",
            "task_data": {
                "data_points": {
                    "vehicles": [
                        {
                            "id": 3.56,
                            "mass": 10.97,
                            "max_propulsion_force": 17.87,
                            "max_velocity": 1.89
                        },
                        {
                            "id": 5.32,
                            "mass": 10.27,
                            "max_propulsion_force": 18.59,
                            "max_velocity": 1.86
                        },
                        {
                            "id": 2.24,
                            "mass": 10.05,
                            "max_propulsion_force": 17.56,
                            "max_velocity": 2.08
                        },
                        {
                            "id": 0.95,
                            "mass": 11.04,
                            "max_propulsion_force": 17.58,
                            "max_velocity": 1.93
                        },
                        {
                            "id": 3.27,
                            "mass": 9.01,
                            "max_propulsion_force": 17.43,
                            "max_velocity": 2.24
                        }
                    ],
                    "load": {
                        "mass": 43.04
                    },
                    "landscape": {
                        "grid_size": "100x100",
                        "elevation_data": "provided as a 100x100 matrix with values in meters"
                    }
                }
            },
            "mathematical_formulation": {
                "state_space_representation": "x(k+1) = Ax(k) + Bu(k) + w(k), where x(k) is the state vector, u(k) is the control input, and w(k) is the process noise.",
                "objective_function": "J = ∑(x(k)^T Q x(k) + u(k)^T R u(k)), where Q and R are weighting matrices.",
                "constraints": {
                    "propulsion_force_constraint": "||u_i(k)|| ≤ 20 N for all vehicles i",
                    "velocity_constraint": "||v_i(k)|| ≤ 2 m/s for all vehicles i",
                    "collision_avoidance": "||p_i(k) - p_j(k)|| ≥ d_min for all i ≠ j, where d_min is the minimum safe distance",
                    "load_stability": "θ(k) ≤ θ_max, where θ(k) is the load tilt angle and θ_max is the maximum allowable tilt"
                }
            }
        }
    },
    {
        "task_id": "11a70fe1-418c-4ba0-8484-8908c82d6431-b",
        "original_task_id": "11a70fe1-418c-4ba0-8484-8908c82d6431",
        "task_details": {
            "task_instructions": "Entwickeln Sie ein optimales Steuerungsschema für ein unbemannes Fahrzeugsystem mit mehreren Agenten, das in einer dynamischen Umgebung betrieben wird. Das System umfasst 5 autonome Fahrzeuge, die mit der gemeinsamen Übermittlung einer 50 kg Last über eine 100 Meter lange unebene Landschaft beauftragt werden. Jedes Fahrzeug besitzt eine maximale Antriebskapazität von 20 n und eine maximale Geschwindigkeit von 2 m/s. Die Landschaft wird als 2D -Gitter mit bereitgestellten Höhendaten dargestellt. Das Kontrollschema muss den Energieverbrauch minimieren und gleichzeitig die Vermeidung von Kollision und Laststabilität sicherstellen. Geben Sie einen detaillierten Kontrollalgorithmus an, einschließlich Zustandsraumdarstellung, objektiver Funktion und Einschränkungen.",
            "task_data": {
                "data_points": {
                    "vehicles": [
                        {
                            "id": 2.75,
                            "mass": 9.96,
                            "max_propulsion": 20.35,
                            "max_velocity": 2.19
                        },
                        {
                            "id": 0.99,
                            "mass": 9.49,
                            "max_propulsion": 18.12,
                            "max_velocity": 2.1
                        },
                        {
                            "id": 5.14,
                            "mass": 10.69,
                            "max_propulsion": 22.72,
                            "max_velocity": 2.06
                        },
                        {
                            "id": 1.84,
                            "mass": 9.91,
                            "max_propulsion": 19.57,
                            "max_velocity": 2.0
                        },
                        {
                            "id": 3.4,
                            "mass": 9.0,
                            "max_propulsion": 22.28,
                            "max_velocity": 1.84
                        }
                    ],
                    "load": {
                        "mass": 44.63
                    },
                    "landscape": {
                        "grid_size": "100x100",
                        "elevation_data": "provided as a 100x100 matrix with values in meters"
                    }
                }
            },
            "mathematical_formulation": {
                "state_space_representation": "x(k+1) = Ax(k) + Bu(k) + w(k), where x(k) is the state vector, u(k) is the control input, and w(k) is the process noise.",
                "cost_function": "J = ∑(x(k)^T Q x(k) + u(k)^T R u(k)), where Q and R are weighting matrices.",
                "constraints": {
                    "propulsion_constraint": "||u_i(k)|| ≤ 20 N for all vehicles i",
                    "velocity_constraint": "||v_i(k)|| ≤ 2 m/s for all vehicles i",
                    "collision_avoidance": "||p_i(k) - p_j(k)|| ≥ d_min for all i ≠ j, where d_min is the minimum safe distance",
                    "load_stability": "θ(k) ≤ θ_max, where θ(k) is the load tilt angle and θ_max is the maximum allowable tilt"
                }
            }
        }
    },
    {
        "task_id": "11a70fe1-418c-4ba0-8484-8908c82d6431-c",
        "original_task_id": "11a70fe1-418c-4ba0-8484-8908c82d6431",
        "task_details": {
            "task_instructions": "Développer un schéma de contrôle optimal pour un système de véhicules sans pilote multi-agents opérant dans un environnement dynamique. Le système comprend 5 véhicules autonomes chargés de transporter en collaboration une charge de 50 kg dans un paysage inégal de 100 mètres de long. Chaque véhicule possède une capacité de force de propulsion maximale de 20 N et une vitesse maximale de 2 m / s. Le paysage est modélisé comme une grille 2D avec des données d'élévation fournies. Le schéma de contrôle doit minimiser la dépense énergétique tout en garantissant l'évitement des collisions et la stabilité de la charge. Fournissez un algorithme de contrôle détaillé, y compris la représentation de l'espace d'état, la fonction objective et les limitations.",
            "task_data": {
                "data_points": {
                    "vehicles": [
                        {
                            "id": 1.94,
                            "mass": 9.6,
                            "max_propulsion_force": 22.82,
                            "max_velocity": 2.04
                        },
                        {
                            "id": 3.05,
                            "mass": 10.45,
                            "max_propulsion_force": 21.43,
                            "max_velocity": 1.79
                        },
                        {
                            "id": 4.42,
                            "mass": 9.82,
                            "max_propulsion_force": 20.47,
                            "max_velocity": 2.3
                        },
                        {
                            "id": 5.31,
                            "mass": 9.43,
                            "max_propulsion_force": 19.64,
                            "max_velocity": 2.09
                        },
                        {
                            "id": 1.04,
                            "mass": 9.22,
                            "max_propulsion_force": 17.94,
                            "max_velocity": 2.27
                        }
                    ],
                    "load": {
                        "mass": 55.76
                    },
                    "landscape": {
                        "grid_size": "100x100",
                        "elevation_data": "provided as a 100x100 matrix with values in meters"
                    }
                }
            },
            "mathematical_formulation": {
                "state_space_representation": "x(k+1) = Ax(k) + Bu(k) + w(k), where x(k) is the state vector, u(k) is the control input, and w(k) is the process noise.",
                "objective_function": "J = ∑(x(k)^T Q x(k) + u(k)^T R u(k)), where Q and R are weighting matrices.",
                "constraints": {
                    "propulsion_force_constraint": "||u_i(k)|| ≤ 20 N for all vehicles i",
                    "velocity_constraint": "||v_i(k)|| ≤ 2 m/s for all vehicles i",
                    "collision_avoidance": "||p_i(k) - p_j(k)|| ≥ d_min for all i ≠ j, where d_min is the minimum safe distance",
                    "load_stability": "θ(k) ≤ θ_max, where θ(k) is the load tilt angle and θ_max is the maximum allowable tilt"
                }
            }
        }
    },
    {
        "task_id": "1b0792df-9e3f-440e-9f6d-b9544cc59741-a",
        "original_task_id": "1b0792df-9e3f-440e-9f6d-b9544cc59741",
        "task_details": {
            "task_instructions": "Développez un algorithme de contrôle optimal pour un robot aérien hexacopter pour maintenir un volant stable dans le flux d'air turbulent. L'algorithme doit minimiser la consommation de puissance tout en maintenant l'écart de position à moins de 0,1 mètre entre les trois axes.  La solution doit inclure un modèle mathématique complet de la dynamique de l'hexacopter, une explication détaillée de l'algorithme de contrôle et une vérification basée sur la simulation à l'aide de l'ensemble de données fourni.",
            "task_data": {
                "data_points": {
                    "hexacopter_mass": 1.17,
                    "rotor_thrust_coefficient": 0.0,
                    "rotor_drag_coefficient": 0.02,
                    "moment_of_inertia": [
                        0.05,
                        0.11,
                        0.04
                    ],
                    "arm_length": 0.2,
                    "gravity": 9.43,
                    "air_turbulence": {
                        "magnitude": [
                            1.64,
                            1.12,
                            0.49
                        ],
                        "direction": [
                            27.82,
                            56.67,
                            48.28
                        ]
                    },
                    "initial_position": [
                        0.0,
                        0.0,
                        0.0
                    ],
                    "desired_position": [
                        1.79,
                        0.0,
                        0.0
                    ],
                    "simulation_time": 10.29,
                    "time_step": 0.01,
                    "rotor_speed_limits": [
                        9507.36,
                        995.53
                    ]
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * d²x/dt² = Σ(F_i) - m * g * e_z + F_turbulence",
                    "rotational": "I * d²θ/dt² = Σ(τ_i) + τ_turbulence",
                    "thrust": "F_i = k_f * ω_i²",
                    "drag": "τ_i = k_d * ω_i²"
                },
                "control_objective": "minimize ∫(u(t)^T * R * u(t)) dt, subject to ||x(t) - x_desired|| < 0.1",
                "constraints": {
                    "position_error": "||x(t) - x_desired|| < 0.1",
                    "energy_consumption": "∫(u(t)^T * R * u(t)) dt < E_max",
                    "rotor_speed": "1000 < ω_i < 9000"
                }
            }
        }
    },
    {
        "task_id": "1b0792df-9e3f-440e-9f6d-b9544cc59741-b",
        "original_task_id": "1b0792df-9e3f-440e-9f6d-b9544cc59741",
        "task_details": {
            "task_instructions": "Développez un algorithme de contrôle optimal pour un robot aérien hexacopter pour obtenir un vol stable et stationnaire malgré une interférence externe de courant d'air.  L'algorithme doit minimiser la consommation de puissance tout en gardant l'erreur de localisation à 0,1 mètre entre les trois axes. La solution doit inclure un modèle mathématique complet de la dynamique de l'hexacopter, une description de l'algorithme de contrôle et une vérification par simulation à l'aide de l'ensemble de données fourni.",
            "task_data": {
                "data_points": {
                    "hexacopter_mass": 1.1,
                    "rotor_thrust_coefficient": 0.0,
                    "rotor_drag_coefficient": 0.02,
                    "moment_of_inertia": [
                        0.05,
                        0.03,
                        0.1
                    ],
                    "arm_length": 0.24,
                    "gravity": 8.99,
                    "wind_disturbance": {
                        "magnitude": [
                            0.45,
                            1.67,
                            1.14
                        ],
                        "direction": [
                            65.61,
                            27.33,
                            49.67
                        ]
                    },
                    "initial_position": [
                        0.0,
                        0.0,
                        0.0
                    ],
                    "desired_position": [
                        0.0,
                        0.0,
                        1.7
                    ],
                    "simulation_time": 9.31,
                    "time_step": 0.01,
                    "max_energy_consumption": 109.73
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * d²x/dt² = Σ(F_i) - m * g * e_z + F_air_current",
                    "rotational": "I * d²θ/dt² = Σ(τ_i) + τ_air_current",
                    "thrust": "F_i = k_f * ω_i²",
                    "drag": "τ_i = k_d * ω_i²"
                },
                "control_objective": "minimize ∫(u(t)^T * R * u(t)) dt, subject to ||x(t) - x_desired|| < 0.1",
                "constraints": {
                    "position_error": "||x(t) - x_desired|| < 0.1",
                    "energy_consumption": "∫(u(t)^T * R * u(t)) dt < E_max"
                }
            }
        }
    },
    {
        "task_id": "1b0792df-9e3f-440e-9f6d-b9544cc59741-c",
        "original_task_id": "1b0792df-9e3f-440e-9f6d-b9544cc59741",
        "task_details": {
            "task_instructions": "Entwickeln Sie einen optimalen Kontrollalgorithmus für einen Hexacopter -Luftroboter, um trotz externer Luftströmungen einen stabilen, stationären Flug aufrechtzuerhalten. Der Algorithmus muss die Stromverbrauch minimieren und gleichzeitig sicherstellen, dass die Positionsabweichung über alle drei Achsen weniger als 0,1 Meter beträgt.  Die Lösung sollte ein umfassendes mathematisches Modell der Hexacopter-Mechanik, eine detaillierte Erklärung des Steueralgorithmus und eine simulationsbasierte Bewertung unter Verwendung des bereitgestellten Datensatzes umfassen.",
            "task_data": {
                "data_points": {
                    "hexacopter_mass": 1.37,
                    "rotor_thrust_coefficient": 0.0,
                    "rotor_drag_coefficient": 0.02,
                    "moment_of_inertia": [
                        0.05,
                        0.09,
                        0.03
                    ],
                    "arm_length": 0.21,
                    "gravity": 11.17,
                    "air_current": {
                        "magnitude": [
                            1.71,
                            0.54,
                            0.95
                        ],
                        "direction": [
                            44.0,
                            56.3,
                            33.92
                        ]
                    },
                    "initial_position": [
                        0.0,
                        0.0,
                        0.0
                    ],
                    "desired_position": [
                        1.96,
                        0.0,
                        0.0
                    ],
                    "simulation_time": 9.02,
                    "time_step": 0.01,
                    "rotor_count": 6.41,
                    "max_rotor_speed": 887.15
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * d²x/dt² = Σ(F_i) - m * g * e_z + F_air_current",
                    "rotational": "I * d²θ/dt² = Σ(τ_i) + τ_air_current",
                    "thrust": "F_i = k_f * ω_i²",
                    "drag": "τ_i = k_d * ω_i²"
                },
                "control_objective": "minimize ∫(u(t)^T * R * u(t)) dt, subject to ||x(t) - x_desired|| < 0.1",
                "constraints": {
                    "position_error": "||x(t) - x_desired|| < 0.1",
                    "energy_consumption": "∫(u(t)^T * R * u(t)) dt < E_max"
                }
            }
        }
    },
    {
        "task_id": "9fe42e49-74ac-45b9-acf0-1220879946a2-a",
        "original_task_id": "9fe42e49-74ac-45b9-acf0-1220879946a2",
        "task_details": {
            "task_instructions": "Desarrolle un esquema de guía óptimo para un sistema dinámico no lineal de salida múltiple de entrada múltiple (MIMO) modelando un robot aéreo hexacóptero. El sistema debe considerar perturbaciones externas como ráfagas de viento y variaciones de masa. El esquema de orientación debe minimizar el consumo de energía al tiempo que preserva la estabilidad y la trayectoria después de la precisión. Proporcione un análisis exhaustivo de la respuesta del sistema a las entradas y perturbaciones armónicas, incluido el comportamiento transitorio y de estado estacionario.",
            "task_data": {
                "data_points": {
                    "system_parameters": {
                        "mass": 1.21,
                        "inertia_matrix": [
                            [
                                0.0,
                                0.0,
                                0.1
                            ],
                            [
                                0.04,
                                0.0,
                                0.0
                            ],
                            [
                                0.0,
                                0.04,
                                0.0
                            ]
                        ],
                        "arm_length": 0.2,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.01,
                        "gravity": 8.76
                    },
                    "disturbances": {
                        "wind_gust": {
                            "magnitude": 2.31,
                            "direction": [
                                0.0,
                                0.76,
                                0.65
                            ],
                            "frequency": 0.52
                        },
                        "payload_variation": {
                            "mass_change": 0.28,
                            "time_of_change": 5.46
                        }
                    },
                    "control_constraints": {
                        "max_thrust_per_motor": 13.16,
                        "max_tilt_angle": 0.4,
                        "sampling_time": 0.01
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * d²r/dt² = Σ(F_i) - m * g * e_z + F_d",
                    "rotational": "I * d²ω/dt² + ω × (I * ω) = Σ(M_i)",
                    "thrust": "F_i = k_f * ω_i²",
                    "drag": "F_d = -0.5 * ρ * C_d * A * ||v|| * v"
                },
                "control_objective": "minimize J = ∫(eᵀQe + uᵀRu) dt, where e = r_desired - r_actual",
                "constraints": {
                    "thrust": "0 ≤ F_i ≤ F_max",
                    "tilt": "|θ| ≤ θ_max"
                }
            }
        }
    },
    {
        "task_id": "9fe42e49-74ac-45b9-acf0-1220879946a2-b",
        "original_task_id": "9fe42e49-74ac-45b9-acf0-1220879946a2",
        "task_details": {
            "task_instructions": "Entwickeln Sie einen optimalen Kontrollalgorithmus für ein nichtlineares dynamisches System mit mehreren Input-Mehrfacheingängen (Multiple-Output), das einen Hexacopter-Luftroboter darstellt. Das System muss externe Störungen wie Windböen und Massenschwankungen ausgleichen. Der Kontrollalgorithmus sollte die Stromverbrauch minimieren und gleichzeitig die folgende Stabilität und Flugbahn sicherstellen. Geben Sie eine gründliche Analyse der Reaktion des Systems auf Einheitstufeneingänge und sinusförmige Störungen an, einschließlich vorübergehendem und stationärem Verhalten.",
            "task_data": {
                "data_points": {
                    "system_parameters": {
                        "mass": 1.24,
                        "inertia_matrix": [
                            [
                                0.0,
                                0.05,
                                0.0
                            ],
                            [
                                0.09,
                                0.0,
                                0.0
                            ],
                            [
                                0.0,
                                0.0,
                                0.03
                            ]
                        ],
                        "arm_length": 0.22,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "gravity": 9.16,
                        "motor_count": 6.49
                    },
                    "disturbances": {
                        "wind_gust": {
                            "magnitude": 2.16,
                            "direction": [
                                0.0,
                                0.69,
                                0.6
                            ],
                            "frequency": 0.54
                        },
                        "payload_variation": {
                            "mass_change": 0.3,
                            "time_of_change": 5.12
                        }
                    },
                    "control_constraints": {
                        "max_thrust_per_motor": 14.85,
                        "max_tilt_angle": 0.34,
                        "sampling_time": 0.01
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * d²r/dt² = Σ(F_i) - m * g * e_z + F_d",
                    "rotational": "I * d²ω/dt² + ω × (I * ω) = Σ(M_i)",
                    "thrust": "F_i = k_f * ω_i²",
                    "drag": "F_d = -0.5 * ρ * C_d * A * ||v|| * v"
                },
                "control_objective": "minimize J = ∫(eᵀQe + uᵀRu) dt, where e = r_desired - r_actual",
                "constraints": {
                    "thrust": "0 ≤ F_i ≤ F_max",
                    "tilt": "|θ| ≤ θ_max"
                }
            }
        }
    },
    {
        "task_id": "9fe42e49-74ac-45b9-acf0-1220879946a2-c",
        "original_task_id": "9fe42e49-74ac-45b9-acf0-1220879946a2",
        "task_details": {
            "task_instructions": "Développez un algorithme de contrôle optimal pour un système dynamique non linéaire multi-entrées multiput (MIMO) modélisant un robot aérien hexacopter. Le système doit compenser les perturbations externes telles que les rafales de vent et les variations de masse. L'algorithme de contrôle devrait minimiser la consommation d'énergie tout en maintenant la stabilité et la précision de la trajectoire. Fournissez une analyse complète de la réponse du système aux entrées de pas et sinusoïdales, y compris les caractéristiques transitoires et en régime permanent.",
            "task_data": {
                "data_points": {
                    "system_parameters": {
                        "mass": 1.16,
                        "inertia_matrix": [
                            [
                                0.0,
                                0.09,
                                0.0
                            ],
                            [
                                0.05,
                                0.0,
                                0.0
                            ],
                            [
                                0.03,
                                0.0,
                                0.0
                            ]
                        ],
                        "arm_length": 0.25,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "gravity": 8.61,
                        "rotor_count": 6.14
                    },
                    "disturbances": {
                        "wind_gust": {
                            "magnitude": 2.7,
                            "direction": [
                                0.72,
                                0.77,
                                0.0
                            ],
                            "frequency": 0.55
                        },
                        "mass_variation": {
                            "mass_change": 0.33,
                            "time_of_change": 5.02
                        }
                    },
                    "control_constraints": {
                        "max_thrust_per_rotor": 14.54,
                        "max_tilt_angle": 0.38,
                        "sampling_time": 0.01
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * d²r/dt² = Σ(F_i) - m * g * e_z + F_d",
                    "rotational": "I * d²ω/dt² + ω × (I * ω) = Σ(M_i)",
                    "thrust": "F_i = k_f * ω_i²",
                    "drag": "F_d = -0.5 * ρ * C_d * A * ||v|| * v"
                },
                "control_objective": "minimize J = ∫(eᵀQe + uᵀRu) dt, where e = r_desired - r_actual",
                "constraints": {
                    "thrust": "0 ≤ F_i ≤ F_max",
                    "tilt": "|θ| ≤ θ_max"
                }
            }
        }
    },
    {
        "task_id": "17f329d3-a911-4775-a6ec-eb0b6935b816-a",
        "original_task_id": "17f329d3-a911-4775-a6ec-eb0b6935b816",
        "task_details": {
            "task_instructions": "Entwickeln Sie einen optimalen Kontrollalgorithmus für ein nichtlineares dynamisches System mit mehreren Input-Multi-Output (Multi-Output), das einen Hexacopter-Luftroboter modelliert.  Das System muss externe Störungen wie Windböen und Messunsicherheiten berücksichtigen. Der Kontrollalgorithmus sollte den Energieverbrauch minimieren und gleichzeitig die folgende Stabilität und Flugbahn sicherstellen.  Bereiten Sie eine gründliche Analyse der Reaktion des Systems auf Einheitenschritt und sinusförmige Störungen, einschließlich Zeitdomänen- und Frequenz-Domänen-Analysen.",
            "task_data": {
                "data_points": {
                    "system_parameters": {
                        "mass": 1.2,
                        "inertia_tensor": [
                            [
                                0.0,
                                0.0,
                                0.04
                            ],
                            [
                                0.1,
                                0.0,
                                0.0
                            ],
                            [
                                0.0,
                                0.0,
                                0.03
                            ]
                        ],
                        "arm_length": 0.29,
                        "rotor_thrust_coefficient": 0.0,
                        "aerodynamic_drag_coefficient": 0.02,
                        "gravity": 8.36
                    },
                    "disturbances": {
                        "wind_gust": {
                            "magnitude": 2.67,
                            "direction": [
                                0.65,
                                0.0,
                                0.69
                            ],
                            "frequency": 0.52
                        },
                        "measurement_noise": {
                            "mean": 0.0,
                            "variance": 0.01
                        }
                    },
                    "control_constraints": {
                        "max_rotor_thrust": 21.1,
                        "min_rotor_thrust": 0.0,
                        "actuator_saturation_limits": [
                            -15.18,
                            17.13
                        ]
                    },
                    "performance_metrics": {
                        "settling_time": 2.1,
                        "overshoot": 0.04,
                        "trajectory_error": 0.01
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * d²x/dt² = Σ(F_i) - m * g * e_z + F_wind",
                    "rotational": "I * d²θ/dt² = Σ(τ_i) + τ_wind",
                    "rotor_thrust": "F_i = k_f * ω_i²",
                    "rotor_torque": "τ_i = k_m * ω_i²"
                },
                "control_objective": "minimize J = ∫(e^T Q e + u^T R u) dt",
                "constraints": {
                    "rotor_thrust": "0 ≤ F_i ≤ F_max",
                    "rotor_torque": "|τ_i| ≤ τ_max"
                }
            }
        }
    },
    {
        "task_id": "17f329d3-a911-4775-a6ec-eb0b6935b816-b",
        "original_task_id": "17f329d3-a911-4775-a6ec-eb0b6935b816",
        "task_details": {
            "task_instructions": "Desarrolle un algoritmo de control óptimo para un sistema dinámico no lineal multi-entrada (MIMO) que modela un robot aéreo hexacóptero.  El sistema debe tener en cuenta perturbaciones externas, como ráfagas de viento y errores de medición. El algoritmo de control debe minimizar el uso de energía al tiempo que garantiza la estabilidad y la trayectoria siguiente. Proporcione un análisis exhaustivo de la reacción del sistema al paso de la unidad y las perturbaciones sinusoidales, incluidos los análisis de dominio de tiempo y dominio de frecuencia.",
            "task_data": {
                "data_points": {
                    "system_parameters": {
                        "mass": 1.33,
                        "inertia_matrix": [
                            [
                                0.0,
                                0.0,
                                0.05
                            ],
                            [
                                0.0,
                                0.1,
                                0.0
                            ],
                            [
                                0.03,
                                0.0,
                                0.0
                            ]
                        ],
                        "arm_length": 0.28,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "gravity": 10.78,
                        "rotor_count": 5.26
                    },
                    "disturbances": {
                        "wind_gust": {
                            "magnitude": 2.38,
                            "direction": [
                                0.0,
                                0.67,
                                0.74
                            ],
                            "frequency": 0.47
                        },
                        "measurement_error": {
                            "mean": 0.0,
                            "variance": 0.01
                        }
                    },
                    "control_constraints": {
                        "max_thrust": 22.97,
                        "min_thrust": 0.0,
                        "saturation_limits": [
                            -13.37,
                            15.3
                        ]
                    },
                    "performance_metrics": {
                        "settling_time": 1.87,
                        "overshoot": 0.05,
                        "trajectory_error": 0.01
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * d²x/dt² = Σ(F_i) - m * g * e_z + F_wind",
                    "rotational": "I * d²θ/dt² = Σ(τ_i) + τ_wind",
                    "thrust": "F_i = k_f * ω_i²",
                    "torque": "τ_i = k_m * ω_i²"
                },
                "control_objective": "minimize J = ∫(e^T Q e + u^T R u) dt",
                "constraints": {
                    "thrust": "0 ≤ F_i ≤ F_max",
                    "torque": "|τ_i| ≤ τ_max"
                }
            }
        }
    },
    {
        "task_id": "17f329d3-a911-4775-a6ec-eb0b6935b816-c",
        "original_task_id": "17f329d3-a911-4775-a6ec-eb0b6935b816",
        "task_details": {
            "task_instructions": "Concevez un algorithme de contrôle optimal pour un modèle dynamique non linéaire multi-entrées multiput (MIMO) représentant un robot aérien hexacopter. Le système doit tenir compte des perturbations externes telles que des rafales de vent et des erreurs de mesure. L'algorithme de contrôle devrait minimiser la consommation de puissance tout en garantissant la stabilité et la trajectoire suivantes. Fournissez une analyse détaillée de la réponse du système aux entrées d'étape et aux perturbations sinusoïdales, y compris les caractéristiques du domaine du temps et du domaine de la fréquence.",
            "task_data": {
                "data_points": {
                    "system_parameters": {
                        "mass": 1.11,
                        "inertia_matrix": [
                            [
                                0.0,
                                0.04,
                                0.0
                            ],
                            [
                                0.0,
                                0.04,
                                0.0
                            ],
                            [
                                0.0,
                                0.11,
                                0.0
                            ]
                        ],
                        "arm_length": 0.27,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "gravity": 9.0,
                        "rotor_count": 5.5
                    },
                    "disturbances": {
                        "wind_gust": {
                            "magnitude": 2.17,
                            "direction": [
                                0.78,
                                0.0,
                                0.69
                            ],
                            "frequency": 0.56
                        },
                        "measurement_error": {
                            "mean": 0.0,
                            "variance": 0.01
                        }
                    },
                    "control_constraints": {
                        "max_thrust": 19.38,
                        "min_thrust": 0.0,
                        "saturation_limits": [
                            -13.56,
                            16.59
                        ]
                    },
                    "performance_metrics": {
                        "settling_time": 1.81,
                        "overshoot": 0.06,
                        "trajectory_error": 0.01
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * d²x/dt² = Σ(F_i) - m * g * e_z + F_wind",
                    "rotational": "I * d²θ/dt² = Σ(τ_i) + τ_wind",
                    "thrust": "F_i = k_f * ω_i²",
                    "torque": "τ_i = k_m * ω_i²"
                },
                "control_objective": "minimize J = ∫(e^T Q e + u^T R u) dt",
                "constraints": {
                    "thrust": "0 ≤ F_i ≤ F_max",
                    "torque": "|τ_i| ≤ τ_max"
                }
            }
        }
    },
    {
        "task_id": "8bac5468-fd09-4b74-a74c-5e85526be2e8-a",
        "original_task_id": "8bac5468-fd09-4b74-a74c-5e85526be2e8",
        "task_details": {
            "task_instructions": "Desarrolle un algoritmo de control óptimo para un sistema dinámico no lineal de salida múltiple de entrada múltiple (MIMO) modelando un robot aéreo hexacóptero bajo perturbaciones atmosféricas.  El algoritmo debe garantizar la estabilidad, minimizar el uso de energía y lograr una ruta precisa. Se dan las ecuaciones de movimiento del sistema; La tarea implica diseñar un controlador que utilice la teoría de la estabilidad de Lyapunov, implementándola dentro de un entorno de simulación y evaluar su efectividad utilizando indicadores de rendimiento predefinidos.",
            "task_data": {
                "data_points": {
                    "system_dynamics": {
                        "mass": 1.38,
                        "inertia_matrix": [
                            [
                                0.0,
                                0.0,
                                0.03
                            ],
                            [
                                0.0,
                                0.0,
                                0.03
                            ],
                            [
                                0.04,
                                0.0,
                                0.0
                            ]
                        ],
                        "gravity": 9.5,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.0,
                        "arm_length": 0.27,
                        "wind_disturbance": {
                            "mean_speed": 3.22,
                            "variance": 1.69,
                            "direction": [
                                0.62,
                                0.67,
                                0.0
                            ]
                        }
                    },
                    "trajectory": {
                        "waypoints": [
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                4.75,
                                5.46,
                                4.64
                            ],
                            [
                                11.26,
                                9.47,
                                0.0
                            ]
                        ],
                        "time_steps": [
                            4.93,
                            10.64,
                            0.0
                        ]
                    },
                    "performance_metrics": {
                        "position_error_threshold": 0.11,
                        "power_consumption_limit": 550.46,
                        "settling_time_limit": 8.57
                    }
                }
            },
            "mathematical_formulation": {
                "system_equations": {
                    "translational_dynamics": "m * d²x/dt² = u_x - m * g + F_wind_x",
                    "rotational_dynamics": "I * d²θ/dt² = τ - F_wind_θ",
                    "control_input": "u = [u_x, u_y, u_z, τ_roll, τ_pitch, τ_yaw]"
                },
                "lyapunov_function": "V = 0.5 * (e_x² + e_v²)",
                "stability_condition": "dV/dt ≤ 0",
                "energy_consumption": "E = ∫(u_x² + u_y² + u_z² + τ_roll² + τ_pitch² + τ_yaw²) dt"
            }
        }
    },
    {
        "task_id": "8bac5468-fd09-4b74-a74c-5e85526be2e8-b",
        "original_task_id": "8bac5468-fd09-4b74-a74c-5e85526be2e8",
        "task_details": {
            "task_instructions": "Développez un algorithme de contrôle optimal pour un système dynamique non linéaire multi-entrées multiput (MIMO) modélisant un robot aérien hexacopter sous turbulence atmosphérique.  L'algorithme doit garantir la stabilité, minimiser la consommation d'énergie et obtenir un chemin précis après. Les équations de mouvement du système sont données et la tâche consiste à formuler un algorithme de contrôle en utilisant la théorie de la stabilité de Lyapunov, en le simulant et en évaluant son efficacité à l'aide d'indicateurs de performance prédéfinis.",
            "task_data": {
                "data_points": {
                    "system_dynamics": {
                        "mass": 1.58,
                        "inertia_matrix": [
                            [
                                0.0,
                                0.05,
                                0.0
                            ],
                            [
                                0.03,
                                0.0,
                                0.0
                            ],
                            [
                                0.03,
                                0.0,
                                0.0
                            ]
                        ],
                        "gravity": 11.03,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.0,
                        "arm_length": 0.25,
                        "wind_disturbance": {
                            "mean_speed": 3.24,
                            "variance": 1.61,
                            "direction": [
                                0.71,
                                0.0,
                                0.63
                            ]
                        },
                        "rotor_inertia": 0.0
                    },
                    "trajectory": {
                        "waypoints": [
                            [
                                9.29,
                                0.0,
                                11.32
                            ],
                            [
                                5.1,
                                5.47,
                                4.47
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ]
                        ],
                        "time_steps": [
                            0.0,
                            4.76,
                            10.76
                        ],
                        "reference_velocities": [
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                0.9,
                                1.0,
                                1.08
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ]
                        ],
                        "reference_accelerations": [
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ]
                        ]
                    },
                    "performance_metrics": {
                        "position_error_threshold": 0.11,
                        "power_consumption_limit": 492.6,
                        "settling_time_limit": 11.28
                    }
                }
            },
            "mathematical_formulation": {
                "system_equations": {
                    "translational_dynamics": "m * d²x/dt² = u_x - m * g + F_wind_x",
                    "rotational_dynamics": "I * d²θ/dt² = τ - F_wind_θ",
                    "control_input": "u = [u_x, u_y, u_z, τ_roll, τ_pitch, τ_yaw]"
                },
                "lyapunov_function": "V = 0.5 * (e_x² + e_v²)",
                "stability_condition": "dV/dt ≤ 0",
                "energy_consumption": "E = ∫(u_x² + u_y² + u_z² + τ_roll² + τ_pitch² + τ_yaw²) dt"
            }
        }
    },
    {
        "task_id": "8bac5468-fd09-4b74-a74c-5e85526be2e8-c",
        "original_task_id": "8bac5468-fd09-4b74-a74c-5e85526be2e8",
        "task_details": {
            "task_instructions": "Desarrolle un algoritmo de control óptimo para un sistema dinámico no lineal de salida múltiple (MIMO) multi-entrada que modela un robot aéreo hexacóptero bajo turbulencia atmosférica. El algoritmo de control debe garantizar la estabilidad, minimizar el consumo de energía y lograr el seguimiento preciso de la ruta. Se proporcionan la dinámica del sistema, y ​​la tarea implica derivar un controlador que utiliza métodos basados ​​en Lyapunov, implementándolo dentro de un entorno de simulación y validar su rendimiento contra los criterios preestablecidos.",
            "task_data": {
                "data_points": {
                    "system_dynamics": {
                        "mass": 1.55,
                        "inertia_matrix": [
                            [
                                0.0,
                                0.0,
                                0.03
                            ],
                            [
                                0.03,
                                0.0,
                                0.0
                            ],
                            [
                                0.0,
                                0.04,
                                0.0
                            ]
                        ],
                        "gravity": 9.99,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.0,
                        "arm_length": 0.26,
                        "wind_disturbance": {
                            "mean_speed": 2.57,
                            "variance": 1.37,
                            "direction": [
                                0.78,
                                0.73,
                                0.0
                            ]
                        },
                        "rotor_speed_limits": [
                            1148.6,
                            1700.27
                        ]
                    },
                    "trajectory": {
                        "waypoints": [
                            [
                                0.0,
                                10.34,
                                10.57
                            ],
                            [
                                4.4,
                                5.62,
                                5.41
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ]
                        ],
                        "time_steps": [
                            9.35,
                            0.0,
                            4.99
                        ]
                    },
                    "performance_metrics": {
                        "position_error_threshold": 0.09,
                        "energy_consumption_limit": 528.04,
                        "settling_time_limit": 9.33
                    }
                }
            },
            "mathematical_formulation": {
                "system_equations": {
                    "translational_dynamics": "m * d²x/dt² = u_x - m * g + F_wind_x",
                    "rotational_dynamics": "I * d²θ/dt² = τ - F_wind_θ",
                    "control_input": "u = [u_x, u_y, u_z, τ_roll, τ_pitch, τ_yaw]"
                },
                "lyapunov_function": "V = 0.5 * (e_x² + e_v²)",
                "stability_condition": "dV/dt ≤ 0",
                "energy_consumption": "E = ∫(u_x² + u_y² + u_z² + τ_roll² + τ_pitch² + τ_yaw²) dt"
            }
        }
    },
    {
        "task_id": "f3f4ee71-cce9-4917-8d14-3395b3b50e09-a",
        "original_task_id": "f3f4ee71-cce9-4917-8d14-3395b3b50e09",
        "task_details": {
            "task_instructions": "Développer un système de guidage optimal pour un robot aérien multirotor opérant dans un environnement urbain complexe avec des obstacles statiques.  La tâche consiste à générer une trajectoire de vol qui minimise la consommation d'énergie tout en empêchant les collisions et en adhérant aux limitations de mouvement. Le système d'orientation doit être résilient aux rafales de vent et aux inexactitudes des capteurs.  Fournir une représentation mathématique détaillée de la dynamique multirotor, de l'algorithme de guidage et d'une simulation du chemin de vol dans un cadre 3D.",
            "task_data": {
                "data_points": {
                    "multirotor_parameters": {
                        "mass": 1.4,
                        "inertia_matrix": [
                            0.03,
                            0.03,
                            0.03
                        ],
                        "rotor_thrust_coefficient": 0.0,
                        "rotor_drag_coefficient": 0.02,
                        "arm_length": 0.23
                    },
                    "environment_parameters": {
                        "wind_velocity": [
                            1.43,
                            2.08,
                            0.53
                        ],
                        "obstacle_locations": [
                            [
                                13.57,
                                5.65,
                                12.61
                            ],
                            [
                                9.97,
                                8.82,
                                4.44
                            ],
                            [
                                4.65,
                                5.6,
                                2.72
                            ]
                        ],
                        "sensor_noise_std_dev": 0.11
                    },
                    "motion_constraints": {
                        "max_velocity": 8.77,
                        "max_acceleration": 4.28,
                        "max_angular_rate": 2.56
                    }
                }
            },
            "mathematical_formulation": {
                "multirotor_dynamics": {
                    "translational_dynamics": "m * d²x/dt² = Σ(F_i) - m * g * e_z - F_drag",
                    "rotational_dynamics": "I * d²θ/dt² = Σ(τ_i) - ω × (I * ω)",
                    "thrust_and_torque": "F_i = k_f * ω_i², τ_i = k_m * ω_i²"
                },
                "control_objective": "minimize ∫(F_i²) dt subject to collision avoidance and motion constraints",
                "wind_disturbance_model": "F_wind = 0.5 * ρ * C_d * A * ||v_wind||²"
            }
        }
    },
    {
        "task_id": "f3f4ee71-cce9-4917-8d14-3395b3b50e09-b",
        "original_task_id": "f3f4ee71-cce9-4917-8d14-3395b3b50e09",
        "task_details": {
            "task_instructions": "Diseñe un esquema de guía óptimo para un robot aéreo hexacóptero que opera en un espacio aéreo urbano complejo con obstrucciones. La tarea implica generar una ruta de vuelo que minimiza el consumo de energía al tiempo que evita colisiones y respeta las limitaciones cinemáticas. El esquema de guía debe ser resistente a las perturbaciones atmosféricas e imprecisiones de sensores. Proporcione una representación matemática exhaustiva de la dinámica de Hexacopter, el algoritmo de guía y una simulación de la ruta de vuelo en un entorno 3D.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.53,
                        "inertia_matrix": [
                            0.04,
                            0.03,
                            0.03
                        ],
                        "rotor_thrust_coefficient": 0.0,
                        "rotor_drag_coefficient": 0.02,
                        "arm_length": 0.24
                    },
                    "environment_parameters": {
                        "wind_speed": [
                            1.43,
                            0.51,
                            2.06
                        ],
                        "obstacle_positions": [
                            [
                                16.35,
                                5.0,
                                10.29
                            ],
                            [
                                5.52,
                                4.47,
                                3.36
                            ],
                            [
                                4.42,
                                8.69,
                                9.53
                            ]
                        ],
                        "noise_std_dev": 0.1
                    },
                    "kinematic_constraints": {
                        "max_velocity": 10.28,
                        "max_acceleration": 5.44,
                        "max_angular_velocity": 2.89
                    }
                }
            },
            "mathematical_formulation": {
                "hexacopter_dynamics": {
                    "translational_dynamics": "m * d²x/dt² = Σ(T_i) - m * g * e_z - F_drag",
                    "rotational_dynamics": "I * d²θ/dt² = Σ(τ_i) - ω × (I * ω)",
                    "thrust_and_torque": "T_i = k_f * ω_i², τ_i = k_m * ω_i²"
                },
                "control_objective": "minimize ∫(T_i²) dt subject to collision avoidance and kinematic constraints",
                "wind_disturbance_model": "F_wind = 0.5 * ρ * C_d * A * ||v_wind||²"
            }
        }
    },
    {
        "task_id": "f3f4ee71-cce9-4917-8d14-3395b3b50e09-c",
        "original_task_id": "f3f4ee71-cce9-4917-8d14-3395b3b50e09",
        "task_details": {
            "task_instructions": "Diseñe un esquema de guía óptimo para un robot aéreo multirotor que opere dentro de un espacio aéreo urbano dinámico que contenga obstáculos. La tarea implica generar una ruta de vuelo que minimiza el consumo de energía al tiempo que evita colisiones y respeta las limitaciones de movimiento. El esquema de orientación debe ser resistente a las ráfagas de viento y las incertidumbres del sensor.  Proporcione un modelo matemático integral de la dinámica multirotora, el algoritmo de guía y una simulación de la ruta de vuelo en un entorno tridimensional.",
            "task_data": {
                "data_points": {
                    "multirotor_parameters": {
                        "mass": 1.51,
                        "inertia_matrix": [
                            0.03,
                            0.04,
                            0.03
                        ],
                        "rotor_thrust_coefficient": 0.0,
                        "rotor_drag_coefficient": 0.01,
                        "arm_length": 0.22
                    },
                    "environment_parameters": {
                        "wind_velocity": [
                            1.68,
                            2.25,
                            0.53
                        ],
                        "obstacle_locations": [
                            [
                                13.53,
                                4.78,
                                15.85
                            ],
                            [
                                4.29,
                                4.5,
                                2.58
                            ],
                            [
                                8.96,
                                3.54,
                                11.35
                            ]
                        ],
                        "noise_std_dev": 0.09
                    },
                    "motion_constraints": {
                        "max_velocity": 9.93,
                        "max_acceleration": 5.56,
                        "max_angular_velocity": 3.36
                    }
                }
            },
            "mathematical_formulation": {
                "multirotor_dynamics": {
                    "translational_dynamics": "m * d²x/dt² = Σ(F_i) - m * g * e_z - F_drag",
                    "rotational_dynamics": "I * d²θ/dt² = Σ(τ_i) - ω × (I * ω)",
                    "thrust_and_torque": "F_i = k_f * ω_i², τ_i = k_m * ω_i²"
                },
                "control_objective": "minimize ∫(F_i²) dt subject to collision avoidance and motion constraints",
                "wind_disturbance_model": "F_wind = 0.5 * ρ * C_d * A * ||v_wind||²"
            }
        }
    },
    {
        "task_id": "404a9e37-914a-437c-b395-bfebe053b4c5-a",
        "original_task_id": "404a9e37-914a-437c-b395-bfebe053b4c5",
        "task_details": {
            "task_instructions": "Concevez une stratégie de contrôle optimale pour un système dynamique non linéaire à sortie multiple à entrée multiple (MIMO) représentant un robot aérien hexacopter sous turbulence atmosphérique. Le système doit stabiliser l'orientation du robot (rouleau, tangage, lacet) et la position verticale tout en minimisant la consommation d'énergie. La stratégie de contrôle doit être robuste aux incertitudes des paramètres et aux perturbations externes. Fournir une formulation mathématique détaillée de la dynamique du système, de la loi de contrôle et des critères d'optimisation. Valider la conception à l'aide de l'ensemble de données fourni et simuler la réponse du système dans des conditions de vent variables.",
            "task_data": {
                "data_points": {
                    "robot_parameters": {
                        "mass": 1.61,
                        "inertia_matrix": [
                            [
                                0.0,
                                0.06,
                                0.0
                            ],
                            [
                                0.0,
                                0.0,
                                0.03
                            ],
                            [
                                0.0,
                                0.03,
                                0.0
                            ]
                        ],
                        "arm_length": 0.21,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.0,
                        "gravity": 9.07
                    },
                    "atmospheric_turbulence": {
                        "mean_wind_speed": 4.32,
                        "wind_speed_variation": 2.19,
                        "wind_direction": [
                            0.0,
                            94.86,
                            41.66
                        ]
                    },
                    "initial_conditions": {
                        "roll": 0.11,
                        "pitch": 0.05,
                        "yaw": 0.0,
                        "altitude": 0.0,
                        "angular_velocities": [
                            0.0,
                            0.0,
                            0.0
                        ],
                        "linear_velocities": [
                            0.0,
                            0.0,
                            0.0
                        ]
                    }
                }
            },
            "mathematical_formulation": {
                "system_dynamics": {
                    "translational_motion": "m * d^2z/dt^2 = (cos(phi) * cos(theta) * T) - m * g",
                    "rotational_motion": "I * d^2(phi, theta, psi)/dt^2 = tau - cross(omega, I * omega)",
                    "thrust_and_torque": "T = k_t * (w1^2 + w2^2 + w3^2 + w4^2 + w5^2 + w6^2), tau = [l * k_t * (w2^2 - w6^2 + w4^2 - w5^2); l * k_t * (w3^2 - w1^2 + w5^2 - w4^2); k_d * (w1^2 - w2^2 + w3^2 - w4^2 + w5^2 - w6^2)]"
                },
                "control_law": "u = K_p * e + K_i * integral(e) + K_d * de/dt, where e = [phi_desired - phi; theta_desired - theta; psi_desired - psi; z_desired - z]",
                "optimization_criteria": "minimize J = integral(0 to T) [e^T * Q * e + u^T * R * u] dt, subject to system dynamics and constraints"
            }
        }
    },
    {
        "task_id": "404a9e37-914a-437c-b395-bfebe053b4c5-b",
        "original_task_id": "404a9e37-914a-437c-b395-bfebe053b4c5",
        "task_details": {
            "task_instructions": "Concevez une stratégie de contrôle optimale pour un système dynamique non linéaire à sortie multiple à entrée multiple (MIMO) représentant un robot aérien hexacopter sous des perturbations atmosphériques. Le système doit stabiliser l'orientation du robot (rouleau, tangage, lacet) et la position verticale tout en minimisant la consommation d'énergie. La stratégie de contrôle doit être robuste aux incertitudes des paramètres et aux perturbations externes. Fournir une formulation mathématique détaillée de la dynamique du système, de la loi de contrôle et des critères d'optimisation. Valider la conception à l'aide de l'ensemble de données fourni et simuler la réponse du système dans des conditions de vent variables.",
            "task_data": {
                "data_points": {
                    "Hexacopter_parameters": {
                        "mass": 1.7,
                        "inertia_matrix": [
                            [
                                0.03,
                                0.0,
                                0.0
                            ],
                            [
                                0.03,
                                0.0,
                                0.0
                            ],
                            [
                                0.0,
                                0.07,
                                0.0
                            ]
                        ],
                        "arm_length": 0.27,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.0,
                        "gravity": 9.47,
                        "number_of_rotors": 6.1
                    },
                    "atmospheric_disturbances": {
                        "mean_wind_speed": 4.44,
                        "wind_speed_variation": 1.78,
                        "wind_direction": [
                            0.0,
                            77.83,
                            51.58
                        ]
                    },
                    "initial_conditions": {
                        "roll": 0.09,
                        "pitch": 0.05,
                        "yaw": 0.0,
                        "altitude": 0.0,
                        "angular_velocities": [
                            0.0,
                            0.0,
                            0.0
                        ],
                        "linear_velocities": [
                            0.0,
                            0.0,
                            0.0
                        ]
                    }
                }
            },
            "mathematical_formulation": {
                "system_dynamics": {
                    "translational_motion": "m * d^2z/dt^2 = (cos(phi) * cos(theta) * T) - m * g",
                    "rotational_motion": "I * d^2(phi, theta, psi)/dt^2 = tau - cross(omega, I * omega)",
                    "thrust_and_torque": "T = k_t * (w1^2 + w2^2 + w3^2 + w4^2 + w5^2 + w6^2), tau = [l * k_t * (w2^2 - w6^2 + w4^2 - w5^2); l * k_t * (w3^2 - w1^2 + w5^2 - w4^2); k_d * (w1^2 - w2^2 + w3^2 - w4^2 + w5^2 - w6^2)]"
                },
                "control_law": "u = K_p * e + K_i * integral(e) + K_d * de/dt, where e = [phi_desired - phi; theta_desired - theta; psi_desired - psi; z_desired - z]",
                "optimization_criteria": "minimize J = integral(0 to T) [e^T * Q * e + u^T * R * u] dt, subject to system dynamics and constraints"
            }
        }
    },
    {
        "task_id": "404a9e37-914a-437c-b395-bfebe053b4c5-c",
        "original_task_id": "404a9e37-914a-437c-b395-bfebe053b4c5",
        "task_details": {
            "task_instructions": "Diseñe una estrategia de control óptima para un sistema dinámico no lineal de salida múltiple de entrada múltiple (MIMO) que modela un robot aéreo hexacóptero bajo perturbaciones del viento. El sistema debe estabilizar la orientación del robot aéreo (rollo, tono, guiñada) y elevación mientras minimiza el consumo de energía. La estrategia de control debe ser robusta para las incertidumbres de los parámetros y las perturbaciones externas. Proporcione una formulación matemática detallada de la dinámica del sistema, la ley de control y los criterios de optimización. Valide el diseño utilizando el conjunto de datos proporcionado y simule la respuesta del sistema en diferentes condiciones del viento.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.68,
                        "inertia_matrix": [
                            [
                                0.0,
                                0.06,
                                0.0
                            ],
                            [
                                0.03,
                                0.0,
                                0.0
                            ],
                            [
                                0.03,
                                0.0,
                                0.0
                            ]
                        ],
                        "arm_length": 0.28,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.0,
                        "gravity": 9.9
                    },
                    "wind_disturbances": {
                        "mean_wind_speed": 5.72,
                        "wind_speed_variation": 1.95,
                        "wind_direction": [
                            0.0,
                            96.4,
                            47.18
                        ]
                    },
                    "initial_conditions": {
                        "roll": 0.1,
                        "pitch": 0.05,
                        "yaw": 0.0,
                        "elevation": 0.0,
                        "angular_velocities": [
                            0.0,
                            0.0,
                            0.0
                        ],
                        "linear_velocities": [
                            0.0,
                            0.0,
                            0.0
                        ]
                    }
                }
            },
            "mathematical_formulation": {
                "system_dynamics": {
                    "translational_motion": "m * d^2z/dt^2 = (cos(phi) * cos(theta) * T) - m * g",
                    "rotational_motion": "I * d^2(phi, theta, psi)/dt^2 = tau - cross(omega, I * omega)",
                    "thrust_and_torque": "T = k_t * (w1^2 + w2^2 + w3^2 + w4^2 + w5^2 + w6^2), tau = [l * k_t * (w2^2 - w6^2 + w4^2 - w5^2); l * k_t * (w3^2 - w1^2 + w5^2 - w4^2); k_d * (w1^2 - w2^2 + w3^2 - w4^2 + w5^2 - w6^2)]"
                },
                "control_law": "u = K_p * e + K_i * integral(e) + K_d * de/dt, where e = [phi_desired - phi; theta_desired - theta; psi_desired - psi; z_desired - z]",
                "optimization_criteria": "minimize J = integral(0 to T) [e^T * Q * e + u^T * R * u] dt, subject to system dynamics and constraints"
            }
        }
    },
    {
        "task_id": "9a5943e0-7630-4af7-89ec-51aff297f02a-a",
        "original_task_id": "9a5943e0-7630-4af7-89ec-51aff297f02a",
        "task_details": {
            "task_instructions": "Développez un algorithme de contrôle optimal pour un système dynamique non linéaire multi-entrées multiput (MIMO) modélisant un robot aérien hexacopter sous turbulence atmosphérique. L'algorithme de contrôle doit garantir la stabilité, le suivi du chemin et la résilience aux incertitudes.  La tâche comprend: 1) la modélisation de la dynamique non linéaire de l'hexacopter, 2) la linéarisation du modèle sur une condition stationnaire, 3) la conception d'un contrôleur de rétroaction variable à l'état utilisant des techniques de régulateur quadratique linéaire (LQR), 4) Implémentation d'un estimation de perturbation pour évaluer et atténuer les effets de l'atmosphère atmosphérique et 5) la vérification de l'algorithme de contrôle.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.78,
                        "inertia_matrix": [
                            [
                                0.0,
                                0.0,
                                0.04
                            ],
                            [
                                0.04,
                                0.0,
                                0.0
                            ],
                            [
                                0.05,
                                0.0,
                                0.0
                            ]
                        ],
                        "arm_length": 0.33,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "gravity": 9.72
                    },
                    "atmospheric_turbulence": {
                        "mean_speed": 7.5,
                        "variance": 1.74,
                        "direction": [
                            0.59,
                            0.0,
                            0.72
                        ]
                    },
                    "initial_conditions": {
                        "position": [
                            0.0,
                            0.0,
                            0.0
                        ],
                        "velocity": [
                            0.0,
                            0.0,
                            0.0
                        ],
                        "orientation": [
                            0.0,
                            0.0,
                            0.0
                        ],
                        "angular_velocity": [
                            0.0,
                            0.0,
                            0.0
                        ]
                    },
                    "desired_trajectory": {
                        "x": "0.7 * t",
                        "y": "0.7 * t",
                        "z": "1.2 * sin(0.5 * t)"
                    }
                }
            },
            "mathematical_formulation": {
                "nonlinear_dynamics": {
                    "translational_motion": "m * d²r/dt² = F - m * g * e_z - F_d",
                    "rotational_motion": "I * d²θ/dt² = τ - ω × (I * ω)",
                    "thrust_force": "F = k_f * (ω_1² + ω_2² + ω_3² + ω_4² + ω_5² + ω_6²)",
                    "drag_force": "F_d = 0.5 * ρ * C_d * A * ||v|| * v"
                },
                "linearized_model": {
                    "state_space": "dx/dt = A * x + B * u",
                    "output_equation": "y = C * x + D * u"
                },
                "lqr_control": {
                    "cost_function": "J = ∫(x^T Q x + u^T R u) dt",
                    "riccati_equation": "A^T P + P A - P B R^{-1} B^T P + Q = 0"
                },
                "disturbance_observer": {
                    "observer_dynamics": "dz/dt = L * (y - C * z)",
                    "disturbance_estimate": "d_hat = z - L * y"
                }
            }
        }
    },
    {
        "task_id": "9a5943e0-7630-4af7-89ec-51aff297f02a-b",
        "original_task_id": "9a5943e0-7630-4af7-89ec-51aff297f02a",
        "task_details": {
            "task_instructions": "Desarrolle un algoritmo de control óptimo para un sistema dinámico no lineal de salida múltiple (MIMO) multi-entrada que modela un robot aéreo hexacóptero bajo turbulencia atmosférica. El algoritmo debe garantizar la estabilidad, el seguimiento de la ruta y la resistencia contra las incertidumbres.  La tarea incluye: 1) definir el modelo dinámico no lineal del hexacóptero, 2) linealizar el modelo sobre una condición estacionaria, 3) Diseñar un controlador de retroalimentación de estado utilizando técnicas de regulador cuadrático lineal (LQR), 4) implementar un estimador de perturbaciones externos para predecir y mitigar los efectos de turbulencia atmosférica y 5) verificar el algoritmo de control a través de la simulación de la generación externa.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.29,
                        "inertia_matrix": [
                            [
                                0.04,
                                0.0,
                                0.0
                            ],
                            [
                                0.05,
                                0.0,
                                0.0
                            ],
                            [
                                0.0,
                                0.0,
                                0.04
                            ]
                        ],
                        "arm_length": 0.32,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "gravity": 9.04
                    },
                    "atmospheric_turbulence": {
                        "mean_speed": 5.28,
                        "variance": 1.99,
                        "direction": [
                            0.65,
                            0.0,
                            0.7
                        ]
                    },
                    "initial_conditions": {
                        "position": [
                            0.0,
                            0.0,
                            0.0
                        ],
                        "velocity": [
                            0.0,
                            0.0,
                            0.0
                        ],
                        "orientation": [
                            0.0,
                            0.0,
                            0.0
                        ],
                        "angular_velocity": [
                            0.0,
                            0.0,
                            0.0
                        ]
                    },
                    "desired_trajectory": {
                        "x": "0.6 * t",
                        "y": "0.6 * t",
                        "z": "1.2 * sin(0.6 * t)"
                    }
                }
            },
            "mathematical_formulation": {
                "nonlinear_dynamics": {
                    "translational_motion": "m * d²r/dt² = F - m * g * e_z - F_d",
                    "rotational_motion": "I * d²θ/dt² = τ - ω × (I * ω)",
                    "thrust_force": "F = k_f * (ω_1² + ω_2² + ω_3² + ω_4² + ω_5² + ω_6²)",
                    "drag_force": "F_d = 0.5 * ρ * C_d * A * ||v|| * v"
                },
                "linearized_model": {
                    "state_space": "dx/dt = A * x + B * u",
                    "output_equation": "y = C * x + D * u"
                },
                "lqr_control": {
                    "cost_function": "J = ∫(x^T Q x + u^T R u) dt",
                    "riccati_equation": "A^T P + P A - P B R^{-1} B^T P + Q = 0"
                },
                "disturbance_observer": {
                    "observer_dynamics": "dz/dt = L * (y - C * z)",
                    "disturbance_estimate": "d_hat = z - L * y"
                }
            }
        }
    },
    {
        "task_id": "9a5943e0-7630-4af7-89ec-51aff297f02a-c",
        "original_task_id": "9a5943e0-7630-4af7-89ec-51aff297f02a",
        "task_details": {
            "task_instructions": "Desarrolle un algoritmo de control óptimo para un sistema dinámico no lineal de salida múltiple de entrada múltiple (MIMO) que modela un robot aéreo hexacóptero bajo turbulencia atmosférica. El algoritmo de control debe garantizar la estabilidad, el seguimiento de la ruta y la resistencia a las incertidumbres.  La tarea incluye: 1) derivar el modelo dinámico no lineal del hexacóptero, 2) linealizar el modelo sobre una condición estacionaria, 3) Diseñar un controlador de retroalimentación de estado utilizando metodología del regulador cuadrático lineal (LQR), 4) implementar un estimador de perturbaciones a la turbulencia de turbulencia atmosférica y mitigante de la turbulencia.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.33,
                        "inertia_matrix": [
                            [
                                0.0,
                                0.04,
                                0.0
                            ],
                            [
                                0.0,
                                0.06,
                                0.0
                            ],
                            [
                                0.05,
                                0.0,
                                0.0
                            ]
                        ],
                        "arm_length": 0.31,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "gravity": 10.72
                    },
                    "wind_gust": {
                        "mean_velocity": 6.66,
                        "variance": 2.1,
                        "direction": [
                            0.77,
                            0.68,
                            0.0
                        ]
                    },
                    "initial_conditions": {
                        "position": [
                            0.0,
                            0.0,
                            0.0
                        ],
                        "velocity": [
                            0.0,
                            0.0,
                            0.0
                        ],
                        "orientation": [
                            0.0,
                            0.0,
                            0.0
                        ],
                        "angular_velocity": [
                            0.0,
                            0.0,
                            0.0
                        ]
                    },
                    "desired_trajectory": {
                        "x": "0.6 * t",
                        "y": "0.6 * t",
                        "z": "1.2 * sin(0.5 * t)"
                    }
                }
            },
            "mathematical_formulation": {
                "nonlinear_dynamics": {
                    "translational_motion": "m * d²r/dt² = F - m * g * e_z - F_d",
                    "rotational_motion": "I * d²θ/dt² = τ - ω × (I * ω)",
                    "thrust_force": "F = k_f * (ω_1² + ω_2² + ω_3² + ω_4² + ω_5² + ω_6²)",
                    "drag_force": "F_d = 0.5 * ρ * C_d * A * ||v|| * v"
                },
                "linearized_model": {
                    "state_space": "dx/dt = A * x + B * u",
                    "output_equation": "y = C * x + D * u"
                },
                "lqr_control": {
                    "cost_function": "J = ∫(x^T Q x + u^T R u) dt",
                    "riccati_equation": "A^T P + P A - P B R^{-1} B^T P + Q = 0"
                },
                "disturbance_observer": {
                    "observer_dynamics": "dz/dt = L * (y - C * z)",
                    "disturbance_estimate": "d_hat = z - L * y"
                }
            }
        }
    },
    {
        "task_id": "162751ba-fefc-49d2-b805-18fd7fd8c034-a",
        "original_task_id": "162751ba-fefc-49d2-b805-18fd7fd8c034",
        "task_details": {
            "task_instructions": "Développez un algorithme de contrôle optimal pour un système dynamique non linéaire (MIMO) modélisant un robot aérien Hexacopter dans un espace tridimensionnel. L'algorithme doit tenir compte des perturbations externes telles que des rafales de vent et des erreurs de mesure. Le schéma de contrôle doit minimiser la consommation d'énergie tout en maintenant la stabilité et la précision dans le suivi d'un chemin prédéterminé. Effectuer une analyse approfondie de la réponse du système aux entrées d'étape unitaire, aux perturbations sinusoïdales et au bruit stochastique. Validez le contrôleur à l'aide d'un environnement de simulation avec l'ensemble de données fourni.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.07,
                        "inertia_matrix": [
                            [
                                0.0,
                                0.07,
                                0.0
                            ],
                            [
                                0.0,
                                0.03,
                                0.0
                            ],
                            [
                                0.0,
                                0.03,
                                0.0
                            ]
                        ],
                        "arm_length": 0.28,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.01,
                        "motor_time_constant": 0.02
                    },
                    "environmental_conditions": {
                        "wind_gust_amplitude": 2.5,
                        "wind_gust_frequency": 0.55,
                        "measurement_error_variance": 0.01
                    },
                    "trajectory": {
                        "waypoints": [
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                4.27,
                                5.14,
                                5.65
                            ],
                            [
                                9.67,
                                9.43,
                                0.0
                            ]
                        ],
                        "time_vector": [
                            0.0,
                            4.93,
                            8.55
                        ]
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * d²r/dt² = R * F - m * g * e_z - F_d",
                    "rotational": "I * d²θ/dt² + ω × (I * ω) = M",
                    "thrust": "F_i = k_f * ω_i²",
                    "drag": "F_d = 0.5 * ρ * C_d * A * ||v|| * v"
                },
                "control_objective": "minimize ∫(u^T * R * u) dt subject to ||r - r_d|| < ε and ||θ - θ_d|| < δ",
                "constraints": {
                    "actuator_limits": "0 ≤ ω_i ≤ ω_max",
                    "stability": "Re(λ) < 0 for all eigenvalues λ of the closed-loop system"
                }
            }
        }
    },
    {
        "task_id": "162751ba-fefc-49d2-b805-18fd7fd8c034-b",
        "original_task_id": "162751ba-fefc-49d2-b805-18fd7fd8c034",
        "task_details": {
            "task_instructions": "Entwickeln Sie einen optimalen Kontrollalgorithmus für ein nichtlineares dynamisches System mit mehreren Input-Mehrfacheingängen (Multiple-Output) -MIMO (MIMO), das einen Hexacopter-Luftroboter in einem dreidimensionalen Raum modelliert. Der Algorithmus muss externe Störungen wie Windböen und Messfehler ausgleichen. Die Kontrolllösung sollte den Stromverbrauch minimieren und gleichzeitig die Stabilität und eine präzise Nachverfolgung eines vordefinierten Flugwegs beibehalten. Führen Sie eine umfassende Analyse der Reaktion des Systems auf Einheitstufeneingaben, sinusförmige Störungen und zufällige Rauschen durch. Validieren Sie das Design mithilfe einer Simulationsumgebung und dem bereitgestellten Datensatz.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.23,
                        "inertia_matrix": [
                            [
                                0.0,
                                0.0,
                                0.03
                            ],
                            [
                                0.0,
                                0.06,
                                0.0
                            ],
                            [
                                0.03,
                                0.0,
                                0.0
                            ]
                        ],
                        "arm_length": 0.28,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "motor_time_constant": 0.02,
                        "rotor_count": 5.46
                    },
                    "environmental_conditions": {
                        "wind_gust_amplitude": 2.18,
                        "wind_gust_frequency": 0.53,
                        "measurement_error_variance": 0.01
                    },
                    "flight_path": {
                        "waypoints": [
                            [
                                10.95,
                                0.0,
                                9.51
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                5.3,
                                4.29,
                                5.09
                            ]
                        ],
                        "time_vector": [
                            8.69,
                            4.65,
                            0.0
                        ]
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * d²r/dt² = R * F - m * g * e_z - F_d",
                    "rotational": "I * d²θ/dt² + ω × (I * ω) = M",
                    "thrust": "F_i = k_f * ω_i²",
                    "drag": "F_d = 0.5 * ρ * C_d * A * ||v|| * v"
                },
                "control_objective": "minimize ∫(u^T * R * u) dt subject to ||r - r_d|| < ε and ||θ - θ_d|| < δ",
                "constraints": {
                    "actuator_limits": "0 ≤ ω_i ≤ ω_max",
                    "stability": "Re(λ) < 0 for all eigenvalues λ of the closed-loop system"
                }
            }
        }
    },
    {
        "task_id": "162751ba-fefc-49d2-b805-18fd7fd8c034-c",
        "original_task_id": "162751ba-fefc-49d2-b805-18fd7fd8c034",
        "task_details": {
            "task_instructions": "Desarrolle un algoritmo de control óptimo para un sistema dinámico no lineal de salida múltiple de entrada múltiple (MIMO) modelando un robot aéreo hexacóptero en un espacio tridimensional.  El sistema debe considerar perturbaciones externas, como ráfagas de viento y errores de medición. El esquema de control debe minimizar el uso de energía mientras se mantiene la estabilidad y el seguimiento preciso de una ruta de vuelo predefinida. Realice un análisis exhaustivo de la reacción del sistema a las entradas de paso, las perturbaciones sinusoidales y el ruido estocástico. Verifique el rendimiento del algoritmo utilizando un entorno de simulación con el conjunto de datos proporcionado.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.37,
                        "inertia_matrix": [
                            [
                                0.0,
                                0.06,
                                0.0
                            ],
                            [
                                0.03,
                                0.0,
                                0.0
                            ],
                            [
                                0.0,
                                0.03,
                                0.0
                            ]
                        ],
                        "arm_length": 0.24,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "motor_time_constant": 0.02,
                        "rotor_count": 5.73
                    },
                    "environmental_conditions": {
                        "wind_gust_amplitude": 2.75,
                        "wind_gust_frequency": 0.57,
                        "measurement_error_variance": 0.01
                    },
                    "flight_path": {
                        "waypoints": [
                            [
                                5.48,
                                5.03,
                                5.05
                            ],
                            [
                                0.0,
                                9.15,
                                8.98
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ]
                        ],
                        "time_vector": [
                            5.34,
                            9.85,
                            0.0
                        ]
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * d²r/dt² = R * F - m * g * e_z - F_d",
                    "rotational": "I * d²θ/dt² + ω × (I * ω) = M",
                    "thrust": "F_i = k_f * ω_i²",
                    "drag": "F_d = 0.5 * ρ * C_d * A * ||v|| * v"
                },
                "control_objective": "minimize ∫(u^T * R * u) dt subject to ||r - r_d|| < ε and ||θ - θ_d|| < δ",
                "constraints": {
                    "actuator_limits": "0 ≤ ω_i ≤ ω_max",
                    "stability": "Re(λ) < 0 for all eigenvalues λ of the closed-loop system"
                }
            }
        }
    },
    {
        "task_id": "3b78554d-9a55-4f87-9e81-fd1832280274-a",
        "original_task_id": "3b78554d-9a55-4f87-9e81-fd1832280274",
        "task_details": {
            "task_instructions": "Diseñe una estrategia de control óptima para un robot aéreo multirotor para lograr un flujo estable en presencia de ráfagas de viento. La tarea implica: 1) Desarrollar un modelo matemático del robot aéreo multirotor, 2) formular una ley de control utilizando la teoría del regulador cuadrático lineal (LQR), 3) simulando la respuesta del sistema bajo condiciones de viento variables y 4) Validación de la robustez de la estrategia de control al analizar los márgenes del sistema y la accesorios de trayectorio del sistema. La solución debe incluir una derivación detallada del modelo matemático, la ley de control de LQR y un informe de simulación con métricas de rendimiento.",
            "task_data": {
                "data_points": {
                    "multirotor_parameters": {
                        "mass": 1.3,
                        "arm_length": 0.28,
                        "moment_of_inertia": [
                            0.03,
                            0.03,
                            0.04
                        ],
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.0,
                        "gravity": 8.8
                    },
                    "wind_gusts": {
                        "mean_wind_speed": 5.66,
                        "wind_speed_variation": 2.23,
                        "wind_direction": [
                            39.11,
                            102.23,
                            0.0
                        ]
                    },
                    "control_parameters": {
                        "state_weighting_matrix": [
                            [
                                0.0,
                                0.0,
                                0.0,
                                1.01
                            ],
                            [
                                0.0,
                                0.0,
                                10.19,
                                0.0
                            ],
                            [
                                0.0,
                                0.0,
                                0.0,
                                0.9
                            ],
                            [
                                0.0,
                                0.0,
                                0.0,
                                8.78
                            ]
                        ],
                        "input_weighting_matrix": [
                            [
                                0.1,
                                0.0
                            ],
                            [
                                0.0,
                                0.11
                            ]
                        ]
                    },
                    "simulation_parameters": {
                        "simulation_time": 103.85,
                        "time_step": 0.01
                    }
                }
            },
            "mathematical_formulation": {
                "dynamic_model": "\\dot{x} = Ax + Bu + d, where x is the state vector, u is the control input, and d is the disturbance vector.",
                "LQR_control_law": "u = -Kx, where K is the optimal gain matrix obtained by minimizing the cost function J = \\int_0^\\infty (x^T Q x + u^T R u) dt.",
                "stability_analysis": "The system's stability is analyzed using the Lyapunov function V(x) = x^T P x, where P is the solution to the Riccati equation."
            }
        }
    },
    {
        "task_id": "3b78554d-9a55-4f87-9e81-fd1832280274-b",
        "original_task_id": "3b78554d-9a55-4f87-9e81-fd1832280274",
        "task_details": {
            "task_instructions": "Diseñe una estrategia de control óptima para un robot aéreo hexacóptero para lograr un flujo estable en presencia de ráfagas de viento. La tarea implica: 1) Desarrollar un modelo dinámico del robot aéreo hexacóptero, 2) formular una ley de control utilizando la teoría del regulador cuadrático lineal (LQR), 3) simulando la respuesta del sistema bajo condiciones de viento variables y 4) validando la robustez de la estrategia de control mediante la analización de los márgenes de estabilidad del sistema y la trayectoria de la trayectoria. La solución debe incluir una derivación detallada del modelo dinámico, la ley de control LQR y un informe de simulación con métricas de rendimiento.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.29,
                        "arm_length": 0.25,
                        "moment_of_inertia": [
                            0.04,
                            0.03,
                            0.03
                        ],
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.0,
                        "gravity": 10.45
                    },
                    "wind_gusts": {
                        "mean_wind_speed": 5.5,
                        "wind_speed_variation": 2.19,
                        "wind_direction": [
                            0.0,
                            39.92,
                            93.45
                        ]
                    },
                    "control_parameters": {
                        "state_weighting_matrix": [
                            [
                                0.0,
                                0.0,
                                0.0,
                                1.12
                            ],
                            [
                                0.0,
                                0.0,
                                8.75,
                                0.0
                            ],
                            [
                                0.0,
                                0.98,
                                0.0,
                                0.0
                            ],
                            [
                                0.0,
                                0.0,
                                10.17,
                                0.0
                            ]
                        ],
                        "input_weighting_matrix": [
                            [
                                0.09,
                                0.0
                            ],
                            [
                                0.0,
                                0.1
                            ]
                        ]
                    },
                    "simulation_parameters": {
                        "simulation_time": 85.06,
                        "sampling_rate": 100.44
                    }
                }
            },
            "mathematical_formulation": {
                "dynamic_model": "\\dot{x} = Ax + Bu + d, where x is the state vector, u is the control input, and d is the disturbance vector.",
                "LQR_control_law": "u = -Kx, where K is the optimal gain matrix obtained by minimizing the cost function J = \\int_0^\\infty (x^T Q x + u^T R u) dt.",
                "stability_analysis": "The system's stability is analyzed using the Lyapunov function V(x) = x^T P x, where P is the solution to the Riccati equation."
            }
        }
    },
    {
        "task_id": "3b78554d-9a55-4f87-9e81-fd1832280274-c",
        "original_task_id": "3b78554d-9a55-4f87-9e81-fd1832280274",
        "task_details": {
            "task_instructions": "Concevez une stratégie de contrôle optimale pour un robot aérien multirotor pour obtenir un plan de volant stable en présence de rafales de vent. La tâche implique: 1) le développement d'un modèle mathématique du robot aérien multirotor, 2) Formuler une loi de contrôle à l'aide de la théorie du régulateur quadratique linéaire (LQR), 3) de la simulation de la réponse du système dans des conditions de vent variables, et 4) validant la robustesse de la stratégie de contrôle en analysant les marges de stabilité du système et la précision de la trajectoire. La solution doit inclure une dérivation détaillée du modèle mathématique, de la loi de contrôle LQR et d'un rapport de simulation avec des mesures de performance.",
            "task_data": {
                "data_points": {
                    "multirotor_parameters": {
                        "mass": 1.31,
                        "arm_length": 0.23,
                        "moment_of_inertia": [
                            0.03,
                            0.04,
                            0.03
                        ],
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.0,
                        "gravity": 9.31
                    },
                    "wind_gusts": {
                        "mean_wind_speed": 4.69,
                        "wind_speed_variation": 1.91,
                        "wind_direction": [
                            0.0,
                            83.35,
                            48.66
                        ]
                    },
                    "control_parameters": {
                        "state_weighting_matrix": [
                            [
                                0.0,
                                0.0,
                                1.01,
                                0.0
                            ],
                            [
                                9.4,
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                0.93,
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                0.0,
                                9.9,
                                0.0,
                                0.0
                            ]
                        ],
                        "input_weighting_matrix": [
                            [
                                0.1,
                                0.0
                            ],
                            [
                                0.0,
                                0.09
                            ]
                        ]
                    },
                    "simulation_parameters": {
                        "simulation_time": 91.27,
                        "time_step": 0.01
                    }
                }
            },
            "mathematical_formulation": {
                "dynamic_model": "\\dot{x} = Ax + Bu + d, where x is the state vector, u is the control input, and d is the disturbance vector.",
                "LQR_control_law": "u = -Kx, where K is the optimal gain matrix obtained by minimizing the cost function J = \\int_0^\\infty (x^T Q x + u^T R u) dt.",
                "stability_analysis": "The system's stability is analyzed using the Lyapunov function V(x) = x^T P x, where P is the solution to the Riccati equation."
            }
        }
    },
    {
        "task_id": "ea6439a8-5fce-4b7d-80d8-7e7be37818dc-a",
        "original_task_id": "ea6439a8-5fce-4b7d-80d8-7e7be37818dc",
        "task_details": {
            "task_instructions": "Diseñe un esquema de guía óptimo para un equipo de vehículos terrestres no tripulados (UGV) de múltiples agentes que opere dentro de un entorno dinámico. El sistema comprende 5 UGV autónomos encargados de transportar colaborativamente una carga de 50 kg en un paisaje desigual de 100 m de largo. Cada UGV posee una fuerza de propulsión máxima de 200 n, una masa de 10 kg y un radio de comunicación de 20 m. El paisaje se representa como una cuadrícula 2D con datos de elevación proporcionados. El esquema de orientación debe minimizar el gasto de energía al tiempo que garantiza la prevención de colisiones, la estabilidad de la carga y la adherencia a una ruta predefinida. Proporcione un algoritmo de guía detallado, que incluya ecuaciones estatales, objetivos de optimización y una simulación que ilustra el rendimiento del sistema en todo el paisaje.",
            "task_data": {
                "data_points": {
                    "ugvs": [
                        {
                            "id": 4.01,
                            "mass": 10.86,
                            "max_propulsion_force": 211.89,
                            "communication_radius": 22.44
                        },
                        {
                            "id": 3.1,
                            "mass": 10.34,
                            "max_propulsion_force": 201.87,
                            "communication_radius": 21.23
                        },
                        {
                            "id": 1.02,
                            "mass": 8.97,
                            "max_propulsion_force": 190.44,
                            "communication_radius": 22.79
                        },
                        {
                            "id": 4.44,
                            "mass": 8.56,
                            "max_propulsion_force": 203.25,
                            "communication_radius": 18.14
                        },
                        {
                            "id": 2.27,
                            "mass": 11.3,
                            "max_propulsion_force": 225.78,
                            "communication_radius": 21.35
                        }
                    ],
                    "load": {
                        "mass": 43.86
                    },
                    "landscape": {
                        "grid_size": [
                            88.44,
                            96.63
                        ],
                        "elevation_data": "randomly generated with a standard deviation of 0.5 m"
                    },
                    "path": {
                        "start": [
                            0.0,
                            0.0
                        ],
                        "end": [
                            87.83,
                            94.89
                        ],
                        "waypoints": [
                            [
                                45.59,
                                37.04
                            ],
                            [
                                65.94,
                                60.75
                            ],
                            [
                                18.19,
                                19.96
                            ],
                            [
                                88.86,
                                80.77
                            ]
                        ]
                    }
                }
            },
            "mathematical_formulation": {
                "state_equations": [
                    "dx_i/dt = v_i",
                    "dv_i/dt = (F_i - F_resistance_i) / m_i",
                    "F_resistance_i = 0.5 * ρ * C_d * A * ||v_i||^2"
                ],
                "optimization_criteria": [
                    "minimize Σ(F_i^2 * Δt)",
                    "subject to ||x_i - x_j|| ≥ d_min for all i ≠ j",
                    "subject to ||x_load - x_path|| ≤ ε"
                ],
                "constraints": [
                    "F_i ≤ F_max",
                    "communication_radius ≥ ||x_i - x_j|| for all i, j"
                ]
            }
        }
    },
    {
        "task_id": "ea6439a8-5fce-4b7d-80d8-7e7be37818dc-b",
        "original_task_id": "ea6439a8-5fce-4b7d-80d8-7e7be37818dc",
        "task_details": {
            "task_instructions": "Concevez un schéma de guidage optimal pour un système de sol sans pilote multi-véhicules opérant dans un environnement complexe. Le système comprend 5 véhicules autonomes chargés de transporter en collaboration une charge de 50 kg sur un paysage inégal de 100 m de long. Chaque véhicule a une capacité de propulsion maximale de 200 N, une masse de 10 kg et un rayon de communication de 20 m. Le paysage est modélisé comme une grille 2D avec des données d'élévation fournies. Le schéma d'orientation doit minimiser la dépense énergétique tout en garantissant l'évitement des collisions, la stabilité de la charge et l'adhésion à un itinéraire prédéfini. Fournir un algorithme de guidage détaillé, y compris les équations d'État, les objectifs d'optimisation et une simulation des performances du système à travers le paysage.",
            "task_data": {
                "data_points": {
                    "vehicles": [
                        {
                            "id": 1.07,
                            "mass": 8.94,
                            "max_propulsion": 195.95,
                            "communication_radius": 18.65
                        },
                        {
                            "id": 4.49,
                            "mass": 10.52,
                            "max_propulsion": 214.57,
                            "communication_radius": 19.15
                        },
                        {
                            "id": 1.84,
                            "mass": 11.05,
                            "max_propulsion": 181.95,
                            "communication_radius": 20.77
                        },
                        {
                            "id": 3.57,
                            "mass": 10.57,
                            "max_propulsion": 204.19,
                            "communication_radius": 22.47
                        },
                        {
                            "id": 2.96,
                            "mass": 10.73,
                            "max_propulsion": 198.82,
                            "communication_radius": 18.45
                        }
                    ],
                    "load": {
                        "mass": 46.57
                    },
                    "landscape": {
                        "grid_size": [
                            103.85,
                            96.59
                        ],
                        "elevation_data": "randomly generated with a standard deviation of 0.5 m"
                    },
                    "route": {
                        "start": [
                            0.0,
                            0.0
                        ],
                        "end": [
                            96.39,
                            102.44
                        ],
                        "waypoints": [
                            [
                                19.12,
                                19.91
                            ],
                            [
                                40.62,
                                38.67
                            ],
                            [
                                75.63,
                                79.23
                            ],
                            [
                                57.86,
                                67.41
                            ]
                        ]
                    }
                }
            },
            "mathematical_formulation": {
                "state_equations": [
                    "dx_i/dt = v_i",
                    "dv_i/dt = (P_i - F_resistance_i) / m_i",
                    "F_resistance_i = 0.5 * ρ * C_r * A * ||v_i||^2"
                ],
                "optimization_objectives": [
                    "minimize Σ(P_i^2 * Δt)",
                    "subject to ||x_i - x_j|| ≥ d_min for all i ≠ j",
                    "subject to ||x_load - x_route|| ≤ ε"
                ],
                "constraints": [
                    "P_i ≤ P_max",
                    "communication_radius ≥ ||x_i - x_j|| for all i, j"
                ]
            }
        }
    },
    {
        "task_id": "ea6439a8-5fce-4b7d-80d8-7e7be37818dc-c",
        "original_task_id": "ea6439a8-5fce-4b7d-80d8-7e7be37818dc",
        "task_details": {
            "task_instructions": "Entwickeln Sie ein optimales Leitlinienschema für ein Multi-Agent-Team für unbemannte Bodenfahrzeuge (UGV), das in einer dynamischen Umgebung betrieben wird. Das System umfasst 5 autonome UGVs, die mit dem gemeinsamen Transport einer 50 kg Last über eine 100 m lange, ungleichmäßige Landschaft aufgeschlossen sind. Jedes UGV hat eine maximale Antriebskraft von 200 n, eine Masse von 10 kg und einen Kommunikationsbereich von 20 m. Die Landschaft wird als 2D -Gitter mit bereitgestellten Höhendaten dargestellt. Das Leitfadenschema muss den Energieverbrauch minimieren und gleichzeitig die Vermeidung von Kollision, Laststabilität und Einhaltung eines vordefinierten Pfades sicherstellen. Geben Sie einen detaillierten Leitlinienalgorithmus an, einschließlich Zustandsgleichungen, Optimierungskriterien und einer Simulation der Leistung des Systems in der Landschaft.",
            "task_data": {
                "data_points": {
                    "ugvs": [
                        {
                            "id": 3.21,
                            "mass": 11.24,
                            "max_propulsion_force": 221.64,
                            "communication_range": 19.21
                        },
                        {
                            "id": 4.02,
                            "mass": 8.92,
                            "max_propulsion_force": 182.96,
                            "communication_range": 20.68
                        },
                        {
                            "id": 4.61,
                            "mass": 9.35,
                            "max_propulsion_force": 187.7,
                            "communication_range": 18.2
                        },
                        {
                            "id": 1.71,
                            "mass": 9.57,
                            "max_propulsion_force": 228.43,
                            "communication_range": 22.76
                        },
                        {
                            "id": 0.92,
                            "mass": 10.14,
                            "max_propulsion_force": 194.45,
                            "communication_range": 17.1
                        }
                    ],
                    "load": {
                        "mass": 51.35
                    },
                    "landscape": {
                        "grid_size": [
                            101.65,
                            110.2
                        ],
                        "elevation_data": "randomly generated with a standard deviation of 0.5 m"
                    },
                    "path": {
                        "start": [
                            0.0,
                            0.0
                        ],
                        "end": [
                            101.63,
                            86.32
                        ],
                        "waypoints": [
                            [
                                55.41,
                                64.3
                            ],
                            [
                                81.81,
                                86.14
                            ],
                            [
                                22.0,
                                19.88
                            ],
                            [
                                44.08,
                                42.0
                            ]
                        ]
                    }
                }
            },
            "mathematical_formulation": {
                "state_equations": [
                    "dx_i/dt = v_i",
                    "dv_i/dt = (F_i - F_resistance_i) / m_i",
                    "F_resistance_i = 0.5 * ρ * C_d * A * ||v_i||^2"
                ],
                "optimization_criteria": [
                    "minimize Σ(F_i^2 * Δt)",
                    "subject to ||x_i - x_j|| ≥ d_min for all i ≠ j",
                    "subject to ||x_load - x_path|| ≤ ε"
                ],
                "constraints": [
                    "F_i ≤ F_max",
                    "communication_range ≥ ||x_i - x_j|| for all i, j"
                ]
            }
        }
    },
    {
        "task_id": "25fde018-4a7a-4038-9bb0-67a9027a9486-a",
        "original_task_id": "25fde018-4a7a-4038-9bb0-67a9027a9486",
        "task_details": {
            "task_instructions": "Desarrolle un algoritmo de control óptimo para un sistema dinámico no lineal de salida múltiple de entrada múltiple (MIMO) modelando un robot aéreo hexacóptero bajo perturbaciones atmosféricas. El sistema debe seguir con precisión una ruta de referencia mientras minimiza el consumo de energía y mantiene la estabilidad.  El algoritmo de control se implementará utilizando una arquitectura de control predictivo del modelo (MPC).  Proporcione un análisis exhaustivo de la respuesta del sistema a los cambios de paso en la ruta deseada y evalúe la resiliencia del controlador a diferentes condiciones atmosféricas.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 2.04,
                        "inertia_matrix": [
                            0.04,
                            0.0,
                            0.0,
                            0.06,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.04
                        ],
                        "arm_length": 0.26,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "gravity": 10.0
                    },
                    "atmospheric_disturbance": {
                        "mean_speed": 5.17,
                        "variance": 1.8,
                        "direction": [
                            0.0,
                            0.56,
                            0.76
                        ]
                    },
                    "reference_path": {
                        "x": [
                            0.0,
                            4.7,
                            2.64,
                            5.44,
                            1.35,
                            7.58
                        ],
                        "y": [
                            4.71,
                            8.42,
                            1.51,
                            6.48,
                            3.16,
                            0.0
                        ],
                        "z": [
                            0.0,
                            1.05,
                            4.67,
                            3.36,
                            2.13,
                            4.19
                        ],
                        "yaw": [
                            0.53,
                            0.15,
                            0.0,
                            0.34,
                            0.48,
                            0.7
                        ]
                    },
                    "control_constraints": {
                        "max_thrust": 25.51,
                        "min_thrust": 0.0,
                        "max_torque": 2.72,
                        "min_torque": -2.76
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * d^2r/dt^2 = F - m * g * e_z + F_atmospheric",
                    "rotational": "I * dω/dt + ω × (I * ω) = τ",
                    "thrust": "F = k_f * (ω_1^2 + ω_2^2 + ω_3^2 + ω_4^2 + ω_5^2 + ω_6^2)",
                    "torque": "τ = [l * k_f * (ω_6^2 - ω_2^2 + ω_3^2 - ω_5^2); l * k_f * (ω_3^2 - ω_1^2 + ω_4^2 - ω_6^2); k_m * (ω_1^2 - ω_2^2 + ω_3^2 - ω_4^2 + ω_5^2 - ω_6^2)]"
                },
                "objective_function": "minimize J = ∫(e^T Q e + u^T R u) dt, where e = r - r_ref, u = [F; τ]",
                "constraints": {
                    "state_constraints": "r_min ≤ r ≤ r_max, ω_min ≤ ω ≤ ω_max",
                    "input_constraints": "u_min ≤ u ≤ u_max"
                }
            }
        }
    },
    {
        "task_id": "25fde018-4a7a-4038-9bb0-67a9027a9486-b",
        "original_task_id": "25fde018-4a7a-4038-9bb0-67a9027a9486",
        "task_details": {
            "task_instructions": "Entwickeln Sie einen optimalen Kontrollalgorithmus für ein nichtlineares dynamisches System mit mehreren Input-Mehrfacheingängen (Multiple-Output), das einen Hexacopter-Luftroboter unter atmosphärischen Turbulenzen modelliert. Das System muss die nachfolgende Flugbahn erreichen und gleichzeitig den Energieverbrauch verringern und die Stabilität aufrechterhalten. Der Kontrollalgorithmus sollte unter Verwendung einer MPC -Architektur (Modell Predictive Control) implementiert werden. Geben Sie eine detaillierte Analyse der Reaktion des Systems auf schrittweise Änderungen in der befehlenden Flugbahn an und bewerten Sie die Resilienz des Controllers unter verschiedenen atmosphärischen Bedingungen.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.31,
                        "inertia_matrix": [
                            0.0,
                            0.03,
                            0.03,
                            0.04,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0
                        ],
                        "arm_length": 0.25,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.01,
                        "gravity": 8.59
                    },
                    "atmospheric_turbulence": {
                        "mean_speed": 5.45,
                        "variance": 1.4,
                        "direction": [
                            0.6,
                            0.64,
                            0.0
                        ]
                    },
                    "commanded_trajectory": {
                        "x": [
                            3.32,
                            5.57,
                            1.87,
                            4.32,
                            1.02,
                            0.0
                        ],
                        "y": [
                            1.11,
                            4.27,
                            4.91,
                            1.97,
                            2.98,
                            0.0
                        ],
                        "z": [
                            5.71,
                            3.7,
                            3.3,
                            0.0,
                            2.09,
                            0.97
                        ],
                        "yaw": [
                            0.1,
                            0.41,
                            0.33,
                            0.2,
                            0.52,
                            0.0
                        ]
                    },
                    "control_constraints": {
                        "max_thrust": 20.16,
                        "min_thrust": 0.0,
                        "max_torque": 2.23,
                        "min_torque": -1.94
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * d^2r/dt^2 = F - m * g * e_z + F_turbulence",
                    "rotational": "I * dω/dt + ω × (I * ω) = τ",
                    "thrust": "F = k_f * (ω_1^2 + ω_2^2 + ω_3^2 + ω_4^2 + ω_5^2 + ω_6^2)",
                    "torque": "τ = [l * k_f * (ω_4^2 - ω_2^2); l * k_f * (ω_3^2 - ω_1^2); k_m * (ω_1^2 - ω_2^2 + ω_3^2 - ω_4^2 + ω_5^2 - ω_6^2)]"
                },
                "objective_function": "minimize J = ∫(e^T Q e + u^T R u) dt, where e = r - r_cmd, u = [F; τ]",
                "constraints": {
                    "state_constraints": "r_min ≤ r ≤ r_max, ω_min ≤ ω ≤ ω_max",
                    "input_constraints": "u_min ≤ u ≤ u_max"
                }
            }
        }
    },
    {
        "task_id": "25fde018-4a7a-4038-9bb0-67a9027a9486-c",
        "original_task_id": "25fde018-4a7a-4038-9bb0-67a9027a9486",
        "task_details": {
            "task_instructions": "Développez un algorithme de contrôle optimal pour un système dynamique non linéaire multi-entrées multiput (MIMO) représentant un robot aérien hexacopter sous turbulence atmosphérique. Le système doit réaliser un chemin précis après minimiser la consommation d'énergie et le maintien de la stabilité. L'algorithme de contrôle doit être mis en œuvre à l'aide d'une architecture de contrôle prédictif (MPC) de modèle. Fournissez une analyse approfondie de la réponse du système aux changements de pas dans le chemin de référence et évaluez la résilience du contrôleur dans diverses conditions turbulentes.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.72,
                        "inertia_matrix": [
                            0.0,
                            0.04,
                            0.05,
                            0.0,
                            0.0,
                            0.0,
                            0.05,
                            0.0,
                            0.0
                        ],
                        "arm_length": 0.34,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "gravity": 9.58
                    },
                    "atmospheric_turbulence": {
                        "mean_velocity": 6.7,
                        "variance": 1.8,
                        "direction": [
                            0.66,
                            0.84,
                            0.0
                        ]
                    },
                    "reference_path": {
                        "x": [
                            1.98,
                            0.0,
                            4.54,
                            1.07,
                            2.6,
                            3.63
                        ],
                        "y": [
                            0.0,
                            4.12,
                            3.03,
                            0.9,
                            5.23,
                            1.97
                        ],
                        "z": [
                            4.31,
                            0.91,
                            1.76,
                            3.3,
                            0.0,
                            4.55
                        ],
                        "yaw": [
                            0.0,
                            0.29,
                            0.45,
                            0.18,
                            0.36,
                            0.09
                        ]
                    },
                    "control_constraints": {
                        "max_thrust": 28.14,
                        "min_thrust": 0.0,
                        "max_torque": 2.41,
                        "min_torque": -2.33
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * d^2r/dt^2 = F - m * g * e_z + F_turbulence",
                    "rotational": "I * dω/dt + ω × (I * ω) = τ",
                    "thrust": "F = k_f * (ω_1^2 + ω_2^2 + ω_3^2 + ω_4^2 + ω_5^2 + ω_6^2)",
                    "torque": "τ = [l * k_f * (ω_6^2 - ω_2^2 + ω_4^2 - ω_5^2); l * k_f * (ω_3^2 - ω_1^2 + ω_5^2 - ω_4^2); k_m * (ω_1^2 - ω_2^2 + ω_3^2 - ω_4^2 + ω_5^2 - ω_6^2)]"
                },
                "objective_function": "minimize J = ∫(e^T Q e + u^T R u) dt, where e = r - r_ref, u = [F; τ]",
                "constraints": {
                    "state_constraints": "r_min ≤ r ≤ r_max, ω_min ≤ ω ≤ ω_max",
                    "input_constraints": "u_min ≤ u ≤ u_max"
                }
            }
        }
    },
    {
        "task_id": "b61acb50-52bd-4970-ab15-1cc56dd78c0b-a",
        "original_task_id": "b61acb50-52bd-4970-ab15-1cc56dd78c0b",
        "task_details": {
            "task_instructions": "Idee un esquema de control óptimo para un sistema de múltiples agentes que opere dentro de un espacio de trabajo dinámico para minimizar el uso de energía al tiempo que maximiza la tasa de éxito de la misión. El sistema comprende 5 agentes autónomos con diversas capacidades, que operan en un espacio de trabajo basado en la red 10 x 10 m con impedimentos dinámicos. La misión implica coordinar a los agentes para transportar colectivamente 10 artículos desde una zona de origen a una zona de destino dentro de una restricción de tiempo de 300 segundos. Cada agente tiene una capacidad de potencia máxima de 1000 julios, y las tasas de consumo de energía varían según la velocidad y la carga del movimiento. El esquema de control debe acomodar la evitación del impedimento en tiempo real, las limitaciones de energía y la priorización de la misión.",
            "task_data": {
                "data_points": {
                    "agents": [
                        {
                            "id": 2.64,
                            "max_velocity": 0.88,
                            "load_capacity": 7.79,
                            "power_consumption_rate": {
                                "idle": 0.13,
                                "moving": {
                                    "0.5m/s": 0.36,
                                    "1.0m/s": 0.69
                                }
                            }
                        },
                        {
                            "id": 5.18,
                            "max_velocity": 1.02,
                            "load_capacity": 5.21,
                            "power_consumption_rate": {
                                "idle": 0.15,
                                "moving": {
                                    "0.5m/s": 0.44,
                                    "1.0m/s": 0.87,
                                    "1.2m/s": 0.96
                                }
                            }
                        },
                        {
                            "id": 1.13,
                            "max_velocity": 1.57,
                            "load_capacity": 4.36,
                            "power_consumption_rate": {
                                "idle": 0.09,
                                "moving": {
                                    "0.5m/s": 0.54,
                                    "1.0m/s": 1.04,
                                    "1.5m/s": 1.65
                                }
                            }
                        },
                        {
                            "id": 2.04,
                            "max_velocity": 1.89,
                            "load_capacity": 2.98,
                            "power_consumption_rate": {
                                "idle": 0.22,
                                "moving": {
                                    "0.5m/s": 0.53,
                                    "1.0m/s": 1.15,
                                    "2.0m/s": 2.22
                                }
                            }
                        },
                        {
                            "id": 3.53,
                            "max_velocity": 1.82,
                            "load_capacity": 4.14,
                            "power_consumption_rate": {
                                "idle": 0.11,
                                "moving": {
                                    "0.5m/s": 0.53,
                                    "1.0m/s": 0.96,
                                    "1.8m/s": 2.05
                                }
                            }
                        }
                    ],
                    "items": [
                        {
                            "id": 1.01,
                            "weight": 1.77,
                            "origin_position": [
                                0.96,
                                0.92
                            ],
                            "destination_position": [
                                9.29,
                                8.54
                            ]
                        },
                        {
                            "id": 8.9,
                            "weight": 0.92,
                            "origin_position": [
                                9.58,
                                11.02
                            ],
                            "destination_position": [
                                9.51,
                                0.94
                            ]
                        },
                        {
                            "id": 1.88,
                            "weight": 2.87,
                            "origin_position": [
                                2.02,
                                2.16
                            ],
                            "destination_position": [
                                8.03,
                                8.03
                            ]
                        },
                        {
                            "id": 6.28,
                            "weight": 2.79,
                            "origin_position": [
                                7.66,
                                6.52
                            ],
                            "destination_position": [
                                2.73,
                                2.91
                            ]
                        },
                        {
                            "id": 6.48,
                            "weight": 1.82,
                            "origin_position": [
                                6.76,
                                6.51
                            ],
                            "destination_position": [
                                3.68,
                                4.42
                            ]
                        },
                        {
                            "id": 3.71,
                            "weight": 4.73,
                            "origin_position": [
                                3.49,
                                4.1
                            ],
                            "destination_position": [
                                6.69,
                                5.87
                            ]
                        },
                        {
                            "id": 9.14,
                            "weight": 4.01,
                            "origin_position": [
                                8.21,
                                7.26
                            ],
                            "destination_position": [
                                2.07,
                                2.16
                            ]
                        },
                        {
                            "id": 8.94,
                            "weight": 4.68,
                            "origin_position": [
                                10.09,
                                9.03
                            ],
                            "destination_position": [
                                1.03,
                                0.96
                            ]
                        },
                        {
                            "id": 5.45,
                            "weight": 0.95,
                            "origin_position": [
                                5.6,
                                5.54
                            ],
                            "destination_position": [
                                9.68,
                                4.54
                            ]
                        },
                        {
                            "id": 2.76,
                            "weight": 3.7,
                            "origin_position": [
                                3.42,
                                2.73
                            ],
                            "destination_position": [
                                7.53,
                                6.64
                            ]
                        }
                    ],
                    "impediments": [
                        {
                            "id": 0.96,
                            "position": [
                                5.1,
                                2.23
                            ],
                            "size": 1.11,
                            "dynamic": 0.94,
                            "movement_pattern": "linear",
                            "velocity": 0.2
                        },
                        {
                            "id": 2.57,
                            "position": [
                                7.83,
                                6.16
                            ],
                            "size": 1.92,
                            "dynamic": 1.04,
                            "movement_pattern": "circular",
                            "radius": 0.97,
                            "angular_velocity": 0.11
                        },
                        {
                            "id": 1.91,
                            "position": [
                                4.32,
                                2.08
                            ],
                            "size": 1.07,
                            "dynamic": 0.0
                        }
                    ]
                }
            },
            "mathematical_formulation": {
                "objective_function": "Minimize total power usage while maximizing mission success rate: min Σ(P_i) + λ * (1 - Σ(M_j)/M_max), where P_i is the power consumed by agent i, M_j is the time taken to complete mission j, M_max is the time constraint, and λ is a weighting factor.",
                "constraints": [
                    "Σ(power_consumed_by_agent_i) ≤ 1000 Joules for all agents.",
                    "Σ(load_carried_by_agent_i) ≤ load_capacity for all agents.",
                    "Impediment avoidance: agents must maintain a minimum distance of 0.5m from all impediments.",
                    "Mission completion: all items must be transported to their destination positions within 300 seconds."
                ]
            }
        }
    },
    {
        "task_id": "b61acb50-52bd-4970-ab15-1cc56dd78c0b-b",
        "original_task_id": "b61acb50-52bd-4970-ab15-1cc56dd78c0b",
        "task_details": {
            "task_instructions": "Concevez un schéma de guidage optimal pour un système multi-agents opérant dans un terrain dynamique afin de minimiser la consommation de puissance tout en maximisant le taux de réussite de la mission. Le système comprend 5 agents indépendants avec diverses capacités, opérant dans un terrain basé sur une grille de 10 m x 10m avec des obstacles dynamiques. La mission consiste à coordonner les agents pour déplacer en collaboration 10 charges utiles d'une zone d'origine à une zone de destination dans une contrainte de temps de 300 secondes. Chaque agent a une capacité de puissance maximale de 1000 joules et les taux de consommation d'énergie varient en fonction de la vitesse de locomotion et de la charge utile. Le schéma d'orientation doit tenir compte de l'évitement des obstacles en temps réel, des contraintes de puissance et de la hiérarchisation de la mission.",
            "task_data": {
                "data_points": {
                    "agents": [
                        {
                            "id": 2.88,
                            "max_speed": 0.89,
                            "payload_capacity": 6.86,
                            "power_consumption_rate": {
                                "idle": 0.14,
                                "moving": {
                                    "0.5m/s": 0.35,
                                    "1.0m/s": 0.75
                                }
                            }
                        },
                        {
                            "id": 1.02,
                            "max_speed": 1.69,
                            "payload_capacity": 5.24,
                            "power_consumption_rate": {
                                "idle": 0.09,
                                "moving": {
                                    "0.5m/s": 0.44,
                                    "1.0m/s": 1.07,
                                    "1.5m/s": 1.65
                                }
                            }
                        },
                        {
                            "id": 2.02,
                            "max_speed": 1.9,
                            "payload_capacity": 2.74,
                            "power_consumption_rate": {
                                "idle": 0.23,
                                "moving": {
                                    "0.5m/s": 0.68,
                                    "1.0m/s": 1.2,
                                    "2.0m/s": 2.35
                                }
                            }
                        },
                        {
                            "id": 4.06,
                            "max_speed": 1.75,
                            "payload_capacity": 3.5,
                            "power_consumption_rate": {
                                "idle": 0.11,
                                "moving": {
                                    "0.5m/s": 0.59,
                                    "1.0m/s": 1.25,
                                    "1.8m/s": 1.96
                                }
                            }
                        },
                        {
                            "id": 4.53,
                            "max_speed": 1.17,
                            "payload_capacity": 5.62,
                            "power_consumption_rate": {
                                "idle": 0.2,
                                "moving": {
                                    "0.5m/s": 0.41,
                                    "1.0m/s": 0.82,
                                    "1.2m/s": 1.01
                                }
                            }
                        }
                    ],
                    "payloads": [
                        {
                            "id": 6.21,
                            "weight": 1.96,
                            "start_position": [
                                5.23,
                                5.71
                            ],
                            "target_position": [
                                3.58,
                                3.55
                            ]
                        },
                        {
                            "id": 3.75,
                            "weight": 5.22,
                            "start_position": [
                                3.68,
                                3.54
                            ],
                            "target_position": [
                                5.69,
                                5.86
                            ]
                        },
                        {
                            "id": 7.78,
                            "weight": 3.44,
                            "start_position": [
                                7.93,
                                7.64
                            ],
                            "target_position": [
                                3.28,
                                2.95
                            ]
                        },
                        {
                            "id": 3.18,
                            "weight": 4.59,
                            "start_position": [
                                3.44,
                                2.84
                            ],
                            "target_position": [
                                7.03,
                                7.06
                            ]
                        },
                        {
                            "id": 6.88,
                            "weight": 4.06,
                            "start_position": [
                                7.07,
                                7.59
                            ],
                            "target_position": [
                                1.92,
                                2.19
                            ]
                        },
                        {
                            "id": 0.9,
                            "weight": 2.0,
                            "start_position": [
                                0.92,
                                1.09
                            ],
                            "target_position": [
                                9.31,
                                9.37
                            ]
                        },
                        {
                            "id": 8.52,
                            "weight": 1.01,
                            "start_position": [
                                8.83,
                                9.89
                            ],
                            "target_position": [
                                10.94,
                                1.01
                            ]
                        },
                        {
                            "id": 2.15,
                            "weight": 3.14,
                            "start_position": [
                                2.26,
                                2.17
                            ],
                            "target_position": [
                                8.6,
                                7.54
                            ]
                        },
                        {
                            "id": 4.62,
                            "weight": 0.95,
                            "start_position": [
                                5.59,
                                5.31
                            ],
                            "target_position": [
                                4.64,
                                8.67
                            ]
                        },
                        {
                            "id": 10.11,
                            "weight": 4.91,
                            "start_position": [
                                7.84,
                                7.82
                            ],
                            "target_position": [
                                0.9,
                                0.91
                            ]
                        }
                    ],
                    "impediments": [
                        {
                            "id": 1.01,
                            "position": [
                                2.11,
                                4.56
                            ],
                            "size": 0.96,
                            "dynamic": 0.98,
                            "movement_pattern": "linear",
                            "velocity": 0.22
                        },
                        {
                            "id": 2.65,
                            "position": [
                                6.69,
                                6.29
                            ],
                            "size": 2.27,
                            "dynamic": 0.87,
                            "movement_pattern": "circular",
                            "radius": 0.96,
                            "angular_velocity": 0.11
                        },
                        {
                            "id": 2.26,
                            "position": [
                                5.73,
                                2.04
                            ],
                            "size": 1.06,
                            "dynamic": 0.0
                        }
                    ]
                }
            },
            "mathematical_formulation": {
                "objective_function": "Minimize total power usage while maximizing mission success rate: min Σ(P_i) + λ * (1 - Σ(M_j)/M_max), where P_i is the power consumed by agent i, M_j is the time taken to complete mission j, M_max is the time constraint, and λ is a weighting factor.",
                "constraints": [
                    "Σ(power_consumed_by_agent_i) ≤ 1000 Joules for all agents.",
                    "Σ(payload_carried_by_agent_i) ≤ payload_capacity for all agents.",
                    "Impediment avoidance: agents must maintain a minimum distance of 0.5m from all impediments.",
                    "Mission completion: all payloads must be relocated to their destination positions within 300 seconds."
                ]
            }
        }
    },
    {
        "task_id": "b61acb50-52bd-4970-ab15-1cc56dd78c0b-c",
        "original_task_id": "b61acb50-52bd-4970-ab15-1cc56dd78c0b",
        "task_details": {
            "task_instructions": "Entwickeln Sie einen optimalen Algorithmus zur Planungsplanung für ein Multi-Agent-System, das in einem dynamischen Arbeitsbereich arbeitet, um die Stromverbrauch zu minimieren und gleichzeitig die Erfolgsquote der Mission zu maximieren. Das System umfasst 5 autonome mobile Manipulatoren mit vielfältigen Geschicklichkeitsniveaus und arbeitet in einem 10-m x 10 m gitterbasierten Arbeitsbereich mit beweglichen Hindernissen. Die Mission beinhaltet die Koordination der Manipulatoren, um innerhalb eines Zeitraums von 300 Sekunden 10 Nutzlasten aus einem Staging -Bereich in einen Zielbereich zu verlegen. Jeder Manipulator hat eine maximale Leistung von 1000 Joule, und die Stromverbrauchsraten variieren je nach Geschwindigkeit und Nutzlastmasse. Der Algorithmus für die Flugbahnplanung muss eine Hindernisse in Echtzeit, Machtbeschränkungen und Missionspriorisierung berücksichtigen.",
            "task_data": {
                "data_points": {
                    "manipulators": [
                        {
                            "id": 0.94,
                            "max_speed": 1.48,
                            "payload_capacity": 5.66,
                            "power_consumption_rate": {
                                "idle": 0.09,
                                "moving": {
                                    "0.5m/s": 0.51,
                                    "1.0m/s": 1.06,
                                    "1.5m/s": 1.37
                                }
                            }
                        },
                        {
                            "id": 5.16,
                            "max_speed": 1.25,
                            "payload_capacity": 5.75,
                            "power_consumption_rate": {
                                "idle": 0.2,
                                "moving": {
                                    "0.5m/s": 0.41,
                                    "1.0m/s": 0.78,
                                    "1.2m/s": 1.1
                                }
                            }
                        },
                        {
                            "id": 2.05,
                            "max_speed": 1.73,
                            "payload_capacity": 2.91,
                            "power_consumption_rate": {
                                "idle": 0.21,
                                "moving": {
                                    "0.5m/s": 0.66,
                                    "1.0m/s": 1.34,
                                    "2.0m/s": 2.11
                                }
                            }
                        },
                        {
                            "id": 4.1,
                            "max_speed": 1.54,
                            "payload_capacity": 4.59,
                            "power_consumption_rate": {
                                "idle": 0.1,
                                "moving": {
                                    "0.5m/s": 0.5,
                                    "1.0m/s": 0.97,
                                    "1.8m/s": 1.73
                                }
                            }
                        },
                        {
                            "id": 3.11,
                            "max_speed": 1.07,
                            "payload_capacity": 8.0,
                            "power_consumption_rate": {
                                "idle": 0.16,
                                "moving": {
                                    "0.5m/s": 0.41,
                                    "1.0m/s": 0.88
                                }
                            }
                        }
                    ],
                    "payloads": [
                        {
                            "id": 2.98,
                            "weight": 3.65,
                            "start_position": [
                                2.78,
                                2.69
                            ],
                            "target_position": [
                                7.1,
                                7.18
                            ]
                        },
                        {
                            "id": 6.09,
                            "weight": 2.82,
                            "start_position": [
                                7.21,
                                7.91
                            ],
                            "target_position": [
                                2.76,
                                3.41
                            ]
                        },
                        {
                            "id": 5.57,
                            "weight": 1.93,
                            "start_position": [
                                5.14,
                                5.53
                            ],
                            "target_position": [
                                4.3,
                                3.58
                            ]
                        },
                        {
                            "id": 7.41,
                            "weight": 4.35,
                            "start_position": [
                                9.07,
                                8.67
                            ],
                            "target_position": [
                                2.05,
                                2.19
                            ]
                        },
                        {
                            "id": 10.39,
                            "weight": 0.94,
                            "start_position": [
                                9.64,
                                8.51
                            ],
                            "target_position": [
                                10.62,
                                1.1
                            ]
                        },
                        {
                            "id": 1.14,
                            "weight": 2.18,
                            "start_position": [
                                1.06,
                                1.1
                            ],
                            "target_position": [
                                8.65,
                                8.35
                            ]
                        },
                        {
                            "id": 1.82,
                            "weight": 3.41,
                            "start_position": [
                                2.11,
                                2.13
                            ],
                            "target_position": [
                                7.09,
                                8.03
                            ]
                        },
                        {
                            "id": 8.1,
                            "weight": 5.07,
                            "start_position": [
                                9.57,
                                9.41
                            ],
                            "target_position": [
                                1.07,
                                1.09
                            ]
                        },
                        {
                            "id": 5.7,
                            "weight": 1.09,
                            "start_position": [
                                5.33,
                                4.33
                            ],
                            "target_position": [
                                8.97,
                                5.57
                            ]
                        },
                        {
                            "id": 3.88,
                            "weight": 4.87,
                            "start_position": [
                                3.63,
                                3.62
                            ],
                            "target_position": [
                                5.76,
                                5.8
                            ]
                        }
                    ],
                    "impediments": [
                        {
                            "id": 1.72,
                            "position": [
                                5.59,
                                2.22
                            ],
                            "size": 0.88,
                            "dynamic": 0.0
                        },
                        {
                            "id": 1.1,
                            "position": [
                                5.25,
                                2.0
                            ],
                            "size": 1.11,
                            "dynamic": 1.14,
                            "movement_pattern": "linear",
                            "velocity": 0.22
                        },
                        {
                            "id": 3.37,
                            "position": [
                                6.29,
                                7.65
                            ],
                            "size": 2.29,
                            "dynamic": 1.11,
                            "movement_pattern": "circular",
                            "radius": 0.94,
                            "angular_velocity": 0.11
                        }
                    ]
                }
            },
            "mathematical_formulation": {
                "objective_function": "Minimize total power usage while maximizing mission success rate: min Σ(P_i) + λ * (1 - Σ(M_j)/M_max), where P_i is the power consumed by manipulator i, M_j is the time taken to complete mission j, M_max is the timeframe, and λ is a weighting factor.",
                "constraints": [
                    "Σ(power_consumed_by_manipulator_i) ≤ 1000 Joules for all manipulators.",
                    "Σ(payload_carried_by_manipulator_i) ≤ payload_capacity for all manipulators.",
                    "Impediment avoidance: manipulators must maintain a minimum distance of 0.5m from all impediments.",
                    "Mission completion: all payloads must be relocated to their destination positions within 300 seconds."
                ]
            }
        }
    },
    {
        "task_id": "feb6ce0a-dfd7-4008-a6ef-cf23ff8579d5-a",
        "original_task_id": "feb6ce0a-dfd7-4008-a6ef-cf23ff8579d5",
        "task_details": {
            "task_instructions": "Desarrolle un algoritmo de control óptimo para un robot aéreo hexacóptero para lograr el seguimiento preciso de la ruta en presencia de turbulencia atmosférica. Esta tarea implica desarrollar un modelo matemático no lineal del hexacóptero, diseñando un esquema de control utilizando una combinación de linealización de retroalimentación y un método de control robusto, y simulando el rendimiento del sistema en diferentes condiciones turbulentas.  El algoritmo de control debe garantizar la estabilidad, minimizar el error de seguimiento de la ruta y manejar las incertidumbres dentro de los parámetros del sistema.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.16,
                        "inertia_matrix": [
                            0.03,
                            0.05,
                            0.1
                        ],
                        "arm_length": 0.25,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.01,
                        "motor_time_constant": 0.02,
                        "rotor_configuration": "X-configuration"
                    },
                    "atmospheric_turbulence": {
                        "mean_wind_speed": 4.53,
                        "wind_gust_intensity": 1.53,
                        "wind_direction": [
                            0.75,
                            0.74,
                            0.0
                        ]
                    },
                    "reference_trajectory": {
                        "x_trajectory": "0.5 * t",
                        "y_trajectory": "0.5 * sin(0.5 * t)",
                        "z_trajectory": "1.0"
                    }
                }
            },
            "mathematical_formulation": {
                "dynamic_model": {
                    "translational_dynamics": "m * d^2r/dt^2 = R * F - m * g * e_z - F_d",
                    "rotational_dynamics": "I * dω/dt + ω × (I * ω) = M",
                    "thrust_force": "F = [0, 0, sum(T_i)]^T",
                    "drag_force": "F_d = 0.5 * ρ * C_d * A * ||v|| * v"
                },
                "control_law": {
                    "feedback_linearization": "u = inv(B) * (v - A * x)",
                    "robust_control": "u_robust = -K * sgn(s)",
                    "sliding_surface": "s = e + λ * de/dt"
                },
                "stability_criteria": "Lyapunov function V = 0.5 * s^2, dV/dt ≤ -η * |s|"
            }
        }
    },
    {
        "task_id": "feb6ce0a-dfd7-4008-a6ef-cf23ff8579d5-b",
        "original_task_id": "feb6ce0a-dfd7-4008-a6ef-cf23ff8579d5",
        "task_details": {
            "task_instructions": "Idee un esquema de control óptimo para un robot aéreo de RotorCraft para lograr la ruta después de la turbulencia atmosférica. Este esfuerzo implica la formulación de un modelo dinámico no lineal de RotorCraft, diseñando un algoritmo de control utilizando una combinación de linealización de retroalimentación y métodos de control robustos, y simulando el sistema en varias condiciones turbulentas. El esquema de control debe garantizar la estabilidad, reducir el error de seguimiento de rutas y tener en cuenta las incertidumbres en los parámetros del sistema.",
            "task_data": {
                "data_points": {
                    "rotorcraft_parameters": {
                        "mass": 1.25,
                        "inertia_matrix": [
                            0.04,
                            0.03,
                            0.08
                        ],
                        "arm_length": 0.27,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "motor_time_constant": 0.02
                    },
                    "atmospheric_turbulence": {
                        "mean_wind_speed": 5.06,
                        "wind_speed_variation": 1.56,
                        "wind_direction": [
                            0.76,
                            0.64,
                            0.0
                        ]
                    },
                    "desired_path": {
                        "x_path": "0.5 * t",
                        "y_path": "0.5 * sin(0.5 * t)",
                        "z_path": "1.0"
                    }
                }
            },
            "mathematical_formulation": {
                "dynamic_model": {
                    "translational_dynamics": "m * d^2r/dt^2 = R * F - m * g * e_z - F_d",
                    "rotational_dynamics": "I * dω/dt + ω × (I * ω) = M",
                    "thrust_force": "F = [0, 0, sum(T_i)]^T",
                    "drag_force": "F_d = 0.5 * ρ * C_d * A * ||v|| * v"
                },
                "control_law": {
                    "feedback_linearization": "u = inv(B) * (v - A * x)",
                    "robust_control": "u_robust = -K * sgn(s)",
                    "sliding_surface": "s = e + λ * de/dt"
                },
                "stability_criteria": "Lyapunov function V = 0.5 * s^2, dV/dt ≤ -η * |s|"
            }
        }
    },
    {
        "task_id": "feb6ce0a-dfd7-4008-a6ef-cf23ff8579d5-c",
        "original_task_id": "feb6ce0a-dfd7-4008-a6ef-cf23ff8579d5",
        "task_details": {
            "task_instructions": "Entwickeln Sie einen optimalen Leitlinienalgorithmus für einen multirotorischen Luftroboter, um den präzisen Weg nach inmitten atmosphärischer Turbulenz zu erreichen. Diese Aufgabe beinhaltet das Erstellen einer nichtlinearen mathematischen Beschreibung des Multirotors, das Entwerfen eines Kontrollschemas unter Verwendung einer Mischung aus Feedback -Linearisierung und robusten Kontrollmethoden und Simulation des Systems unter verschiedenen turbulenten Windbedingungen.  Der Leitlinienalgorithmus muss die Stabilität garantieren, Pfadverfolgungsfehler minimieren und Unsicherheiten in den Systemparametern kompensieren.",
            "task_data": {
                "data_points": {
                    "multirotor_parameters": {
                        "mass": 1.33,
                        "inertia_matrix": [
                            0.11,
                            0.03,
                            0.04
                        ],
                        "arm_length": 0.28,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "motor_time_constant": 0.02,
                        "rotor_count": 4.53
                    },
                    "wind_disturbance": {
                        "mean_wind_speed": 4.59,
                        "wind_gust_intensity": 1.64,
                        "wind_direction": [
                            0.78,
                            0.68,
                            0.0
                        ]
                    },
                    "desired_trajectory": {
                        "x_trajectory": "0.5 * t",
                        "y_trajectory": "0.5 * sin(0.5 * t)",
                        "z_trajectory": "1.0"
                    }
                }
            },
            "mathematical_formulation": {
                "dynamic_model": {
                    "translational_dynamics": "m * d^2r/dt^2 = R * F - m * g * e_z - F_d",
                    "rotational_dynamics": "I * dω/dt + ω × (I * ω) = M",
                    "thrust_force": "F = [0, 0, sum(T_i)]^T",
                    "drag_force": "F_d = 0.5 * ρ * C_d * A * ||v|| * v"
                },
                "control_law": {
                    "feedback_linearization": "u = inv(B) * (v - A * x)",
                    "robust_control": "u_robust = -K * sgn(s)",
                    "sliding_surface": "s = e + λ * de/dt"
                },
                "stability_criteria": "Lyapunov function V = 0.5 * s^2, dV/dt ≤ -η * |s|"
            }
        }
    },
    {
        "task_id": "dde75c1b-88b8-4017-8617-90a4ae091da1-a",
        "original_task_id": "dde75c1b-88b8-4017-8617-90a4ae091da1",
        "task_details": {
            "task_instructions": "Concevez un schéma de contrôle optimal pour un robot aérien hexacopter pour suivre un chemin prescrit dans un espace tridimensionnel tout en minimisant la consommation d'énergie. Cela implique de développer le modèle dynamique de l'hexacopter, de définir le problème de contrôle comme une tâche d'optimisation et de mettre en œuvre un algorithme de contrôle prédictif du modèle (MPC).  La solution doit tenir compte des perturbations externes comme les rafales de vent et maintenir la stabilité sous la masse de charge utile variable.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.48,
                        "inertia_matrix": [
                            0.03,
                            0.03,
                            0.05
                        ],
                        "arm_length": 0.23,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "motor_time_constant": 0.02,
                        "number_of_rotors": 6.22
                    },
                    "environmental_conditions": {
                        "wind_gust_velocity": [
                            0.44,
                            1.56,
                            2.13
                        ],
                        "air_density": 1.26
                    },
                    "trajectory": {
                        "waypoints": [
                            [
                                5.27,
                                4.65,
                                5.1
                            ],
                            [
                                9.95,
                                0.0,
                                10.75
                            ],
                            [
                                -5.3,
                                4.68,
                                13.66
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ]
                        ],
                        "time_steps": [
                            5.28,
                            0.0,
                            9.24,
                            13.02
                        ]
                    },
                    "payload_variation": {
                        "mass_range": [
                            2.17,
                            0.9
                        ],
                        "time_intervals": [
                            15.46,
                            0.0,
                            7.22
                        ]
                    }
                }
            },
            "mathematical_formulation": {
                "dynamic_model": {
                    "translational_dynamics": "m * d²r/dt² = F_lift - m * g * e_z - F_drag",
                    "rotational_dynamics": "I * d²ω/dt² = τ - ω × (I * ω)",
                    "lift_force": "F_lift = k_f * (ω_1² + ω_2² + ω_3² + ω_4² + ω_5² + ω_6²)",
                    "drag_force": "F_drag = 0.5 * ρ * C_d * A * ||v|| * v"
                },
                "optimization_problem": {
                    "objective_function": "minimize ∫(F_lift² + τ²) dt",
                    "constraints": [
                        "r(t) = r_desired(t)",
                        "ω(t) ≤ ω_max",
                        "F_lift(t) ≤ F_max"
                    ]
                },
                "MPC_formulation": {
                    "prediction_horizon": 10,
                    "control_horizon": 5,
                    "state_constraints": [
                        "r_min ≤ r(t) ≤ r_max",
                        "v_min ≤ v(t) ≤ v_max"
                    ]
                }
            }
        }
    },
    {
        "task_id": "dde75c1b-88b8-4017-8617-90a4ae091da1-b",
        "original_task_id": "dde75c1b-88b8-4017-8617-90a4ae091da1",
        "task_details": {
            "task_instructions": "Desarrolle un algoritmo de control óptimo para un robot aéreo hexacóptero para rastrear una ruta tridimensional dada mientras reduce el uso de energía. Esto implica crear el modelo dinámico del hexacóptero, definir el problema de control como un problema de optimización e implementar un esquema de control predictivo del modelo (MPC).  La solución debe compensar perturbaciones externas como ráfagas de viento y mantener la estabilidad en diferentes condiciones de carga.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.52,
                        "inertia_matrix": [
                            0.04,
                            0.03,
                            0.03
                        ],
                        "arm_length": 0.27,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "motor_time_constant": 0.02,
                        "number_of_rotors": 6.29
                    },
                    "environmental_conditions": {
                        "wind_gust_velocity": [
                            0.44,
                            2.14,
                            1.5
                        ],
                        "air_density": 1.06
                    },
                    "trajectory": {
                        "waypoints": [
                            [
                                9.77,
                                0.0,
                                9.17
                            ],
                            [
                                4.34,
                                4.69,
                                4.39
                            ],
                            [
                                -4.59,
                                16.13,
                                5.01
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ]
                        ],
                        "time_steps": [
                            0.0,
                            8.85,
                            5.61,
                            15.2
                        ]
                    },
                    "payload_variation": {
                        "mass_range": [
                            1.86,
                            0.9
                        ],
                        "time_intervals": [
                            0.0,
                            7.79,
                            13.25
                        ]
                    }
                }
            },
            "mathematical_formulation": {
                "dynamic_model": {
                    "translational_dynamics": "m * d²r/dt² = F_lift - m * g * e_z - F_drag",
                    "rotational_dynamics": "I * d²ω/dt² = τ - ω × (I * ω)",
                    "lift_force": "F_lift = k_f * (ω_1² + ω_2² + ω_3² + ω_4² + ω_5² + ω_6²)",
                    "drag_force": "F_drag = 0.5 * ρ * C_d * A * ||v|| * v"
                },
                "optimization_problem": {
                    "objective_function": "minimize ∫(F_lift² + τ²) dt",
                    "constraints": [
                        "r(t) = r_desired(t)",
                        "ω(t) ≤ ω_max",
                        "F_lift(t) ≤ F_max"
                    ]
                },
                "MPC_formulation": {
                    "prediction_horizon": 10,
                    "control_horizon": 5,
                    "state_constraints": [
                        "r_min ≤ r(t) ≤ r_max",
                        "v_min ≤ v(t) ≤ v_max"
                    ]
                }
            }
        }
    },
    {
        "task_id": "dde75c1b-88b8-4017-8617-90a4ae091da1-c",
        "original_task_id": "dde75c1b-88b8-4017-8617-90a4ae091da1",
        "task_details": {
            "task_instructions": "Concevez un schéma de contrôle optimal pour un robot aérien hexacopter pour suivre un chemin spécifié dans un espace tridimensionnel tout en minimisant la consommation d'énergie. Cela implique de développer le modèle dynamique de l'hexacopter, de formuler le problème de contrôle en tant que problème d'optimisation et de mettre en œuvre un algorithme de contrôle prédictif du modèle (MPC). La solution doit tenir compte des perturbations externes telles que des rafales de vent et une stabilité de garantie sous variation de masse de charge utile.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.49,
                        "inertia_matrix": [
                            0.03,
                            0.03,
                            0.04
                        ],
                        "arm_length": 0.25,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "motor_time_constant": 0.02
                    },
                    "environmental_conditions": {
                        "wind_gust_velocity": [
                            1.59,
                            0.51,
                            2.07
                        ],
                        "air_density": 1.06
                    },
                    "trajectory": {
                        "waypoints": [
                            [
                                4.67,
                                4.3,
                                4.98
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                11.14,
                                9.3,
                                0.0
                            ],
                            [
                                5.43,
                                -5.64,
                                13.92
                            ]
                        ],
                        "time_steps": [
                            5.19,
                            13.62,
                            0.0,
                            9.78
                        ]
                    },
                    "payload_variation": {
                        "mass_range": [
                            0.88,
                            2.16
                        ],
                        "time_intervals": [
                            8.49,
                            14.94,
                            0.0
                        ]
                    }
                }
            },
            "mathematical_formulation": {
                "dynamic_model": {
                    "translational_dynamics": "m * d²r/dt² = F_thrust - m * g * e_z - F_drag",
                    "rotational_dynamics": "I * d²ω/dt² = τ - ω × (I * ω)",
                    "thrust_force": "F_thrust = k_f * (ω_1² + ω_2² + ω_3² + ω_4² + ω_5² + ω_6²)",
                    "drag_force": "F_drag = 0.5 * ρ * C_d * A * ||v|| * v"
                },
                "optimization_problem": {
                    "objective_function": "minimize ∫(F_thrust² + τ²) dt",
                    "constraints": [
                        "r(t) = r_desired(t)",
                        "ω(t) ≤ ω_max",
                        "F_thrust(t) ≤ F_max"
                    ]
                },
                "MPC_formulation": {
                    "prediction_horizon": 10,
                    "control_horizon": 5,
                    "state_constraints": [
                        "r_min ≤ r(t) ≤ r_max",
                        "v_min ≤ v(t) ≤ v_max"
                    ]
                }
            }
        }
    },
    {
        "task_id": "09ea5274-3ffc-416a-a456-3c0359b81c82-a",
        "original_task_id": "09ea5274-3ffc-416a-a456-3c0359b81c82",
        "task_details": {
            "task_instructions": "Desarrolle un algoritmo de control óptimo para un robot aéreo hexacóptero para seguir una ruta de referencia en presencia de turbulencia atmosférica.  El trabajo implica: 1) modelar la dinámica del hexacóptero, 2) diseñar un sistema de control robusto utilizando un enfoque de modo deslizante, 3) simular el sistema en varias condiciones de viento turbulento y 4) evaluar el rendimiento del controlador utilizando métricas como el error de la ruta, el uso del actuador y las capacidades de rechazo de perturbaciones.  Genere un informe completo que incluya las derivaciones matemáticas, los resultados de la simulación y un análisis exhaustivo.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.03,
                        "inertia_matrix": [
                            0.03,
                            0.04,
                            0.03
                        ],
                        "arm_length": 0.27,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.01,
                        "gravity": 9.88,
                        "rotor_count": 5.8
                    },
                    "wind_disturbance": {
                        "mean_wind_speed": 5.52,
                        "wind_speed_variation": 1.44,
                        "wind_direction": [
                            0.0,
                            0.5,
                            0.54
                        ],
                        "turbulence_intensity": 0.26
                    },
                    "desired_trajectory": {
                        "x_trajectory": "0.5 * t",
                        "y_trajectory": "0.5 * sin(t)",
                        "z_trajectory": "1.0"
                    },
                    "simulation_parameters": {
                        "time_step": 0.01,
                        "simulation_duration": 21.32
                    }
                }
            },
            "mathematical_formulation": {
                "dynamic_model": {
                    "translational_dynamics": "m * d^2x/dt^2 = u_x - k_d * dx/dt + d_x",
                    "rotational_dynamics": "I * d^2θ/dt^2 = τ - k_d * dθ/dt + d_θ",
                    "control_inputs": {
                        "u_x": "thrust in x-direction",
                        "τ": "torque"
                    },
                    "disturbances": {
                        "d_x": "wind disturbance in x-direction",
                        "d_θ": "wind disturbance in rotation"
                    }
                },
                "sliding_mode_control": {
                    "sliding_surface": "s = e + λ * de/dt",
                    "control_law": "u = -K * sign(s)",
                    "stability_condition": "s * ds/dt < 0"
                }
            }
        }
    },
    {
        "task_id": "09ea5274-3ffc-416a-a456-3c0359b81c82-b",
        "original_task_id": "09ea5274-3ffc-416a-a456-3c0359b81c82",
        "task_details": {
            "task_instructions": "Desarrolle un algoritmo de control óptimo para un robot aéreo hexacóptero para lograr una ruta precisa a pesar de la interferencia de corriente del aire externa.  La asignación incluye: 1) Determinar las ecuaciones de movimiento para el hexacóptero, 2) diseñar un esquema de control robusto utilizando control de modo deslizante (SMC), 3) simulando la respuesta del sistema en varias condiciones de viento y 4) evaluar el rendimiento utilizando métricas como errores de seguimiento de ruta, demandas del actuador y resiliencia a perturbaciones. Componga un informe detallado que abarca las derivaciones matemáticas, los resultados de la simulación y un análisis exhaustivo.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.27,
                        "inertia_matrix": [
                            0.03,
                            0.03,
                            0.04
                        ],
                        "arm_length": 0.28,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "gravity": 10.68
                    },
                    "wind_disturbance": {
                        "mean_wind_speed": 5.56,
                        "wind_speed_variation": 1.29,
                        "wind_direction": [
                            0.46,
                            0.45,
                            0.0
                        ]
                    },
                    "desired_trajectory": {
                        "x_trajectory": "0.5 * t",
                        "y_trajectory": "0.5 * sin(t)",
                        "z_trajectory": "1.0"
                    },
                    "simulation_parameters": {
                        "time_step": 0.01,
                        "simulation_duration": 17.39
                    }
                }
            },
            "mathematical_formulation": {
                "dynamic_model": {
                    "translational_dynamics": "m * d^2x/dt^2 = u_x - k_d * dx/dt + d_x",
                    "rotational_dynamics": "I * d^2θ/dt^2 = τ - k_d * dθ/dt + d_θ",
                    "control_inputs": {
                        "u_x": "thrust in x-direction",
                        "τ": "torque"
                    },
                    "disturbances": {
                        "d_x": "wind disturbance in x-direction",
                        "d_θ": "wind disturbance in rotation"
                    }
                },
                "sliding_mode_control": {
                    "sliding_surface": "s = e + λ * de/dt",
                    "control_law": "u = -K * sign(s)",
                    "stability_condition": "s * ds/dt < 0"
                }
            }
        }
    },
    {
        "task_id": "09ea5274-3ffc-416a-a456-3c0359b81c82-c",
        "original_task_id": "09ea5274-3ffc-416a-a456-3c0359b81c82",
        "task_details": {
            "task_instructions": "Entwickeln Sie einen optimalen Kontrollalgorithmus für einen Hexacopter -Luftroboter, um einem vorgeschriebenen Pfad in Gegenwart von atmosphärischen Turbulenz zu folgen.  Die Aufgabe umfasst: 1) Erstellen einer mathematischen Darstellung der Bewegung des Hexacopters, 2) Gestaltung eines robusten Steuerschemas unter Verwendung eines Schiebemoduscontrollers, 3) Simulation des Systems unter verschiedenen turbulenten Bedingungen und 4) Beurteilung der Leistung unter Verwendung von Metriken wie dem Pfadverfolgung, der Fehlermeldung, Aktuatoranstrengungen und Resilienz gegen Störungen. Erstellen Sie einen umfassenden Bericht, der die mathematischen Ableitungen, Simulationsergebnisse und eine gründliche Analyse enthält.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.2,
                        "inertia_matrix": [
                            0.03,
                            0.05,
                            0.03
                        ],
                        "arm_length": 0.23,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "gravity": 10.57
                    },
                    "wind_disturbance": {
                        "mean_wind_speed": 4.96,
                        "wind_speed_variation": 1.47,
                        "wind_direction": [
                            0.0,
                            0.44,
                            0.51
                        ]
                    },
                    "desired_trajectory": {
                        "x_trajectory": "0.5 * t",
                        "y_trajectory": "0.5 * sin(t)",
                        "z_trajectory": "1.0"
                    },
                    "simulation_parameters": {
                        "time_step": 0.01,
                        "simulation_duration": 21.09
                    }
                }
            },
            "mathematical_formulation": {
                "dynamic_model": {
                    "translational_dynamics": "m * d^2x/dt^2 = u_x - k_d * dx/dt + d_x",
                    "rotational_dynamics": "I * d^2θ/dt^2 = τ - k_d * dθ/dt + d_θ",
                    "control_inputs": {
                        "u_x": "thrust in x-direction",
                        "τ": "torque"
                    },
                    "disturbances": {
                        "d_x": "wind disturbance in x-direction",
                        "d_θ": "wind disturbance in rotation"
                    }
                },
                "sliding_mode_control": {
                    "sliding_surface": "s = e + λ * de/dt",
                    "control_law": "u = -K * sign(s)",
                    "stability_condition": "s * ds/dt < 0"
                }
            }
        }
    },
    {
        "task_id": "a8a9652f-bfbb-409b-856f-89c487494e5a-a",
        "original_task_id": "a8a9652f-bfbb-409b-856f-89c487494e5a",
        "task_details": {
            "task_instructions": "Desarrolle un algoritmo de control óptimo para un sistema dinámico no lineal de salida múltiple (MIMO) multi-entrada que modela un robot aéreo hexacóptero bajo turbulencia atmosférica. El sistema debe estabilizar la orientación del hexacóptero (rollo, tono, guiñada) y elevación mientras minimiza el consumo de energía. El algoritmo de control debe integrar los métodos de control predictivo (MPC) y aprendizaje de refuerzo (RL). Realice una simulación detallada de la dinámica del sistema, incluidos los efectos de las ráfagas de viento, y valida el algoritmo de control utilizando un integrador numérico. La solución debe incluir un análisis de estabilidad y un análisis de sensibilidad de los parámetros de control.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.64,
                        "arm_length": 0.28,
                        "moment_of_inertia": [
                            0.04,
                            0.03,
                            0.03
                        ],
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "gravity": 9.06,
                        "number_of_rotors": 5.61
                    },
                    "wind_disturbance": {
                        "mean_wind_speed": 5.68,
                        "gust_amplitude": 2.27,
                        "gust_frequency": 0.5
                    },
                    "control_constraints": {
                        "max_thrust": 21.06,
                        "min_thrust": 0.0,
                        "max_torque": 1.02,
                        "min_torque": -1.06
                    },
                    "simulation_parameters": {
                        "time_step": 0.01,
                        "simulation_duration": 11.36
                    }
                }
            },
            "mathematical_formulation": {
                "system_dynamics": {
                    "equations_of_motion": [
                        "m * ddot{x} = (u1 + u2 + u3 + u4 +u5 +u6) * sin(theta) - kx * dot{x}",
                        "m * ddot{y} = (u1 + u2 + u3 + u4 +u5 +u6) * sin(phi) * cos(theta) - ky * dot{y}",
                        "m * ddot{z} = (u1 + u2 + u3 + u4 +u5 +u6) * cos(phi) * cos(theta) - m * g - kz * dot{z}",
                        "Ixx * ddot{phi} = l * (u2 - u4) - k_phi * dot{phi}",
                        "Iyy * ddot{theta} = l * (u3 - u1) - k_theta * dot{theta}",
                        "Izz * ddot{psi} = tau1 + tau2 + tau3 + tau4 + tau5 + tau6 - k_psi * dot{psi}"
                    ],
                    "wind_model": "F_wind = 0.5 * rho * Cd * A * (V_wind - V_hexacopter)^2",
                    "control_objective": "minimize J = integral(0 to T) [alpha * (phi^2 + theta^2 + psi^2) + beta * (u1^2 + u2^2 + u3^2 + u4^2 + u5^2 + u6^2)] dt"
                },
                "stability_analysis": "Lyapunov function V(x) = 0.5 * (x^T P x), where P is a positive definite matrix.",
                "sensitivity_analysis": "Partial derivatives of control gains with respect to system parameters."
            }
        }
    },
    {
        "task_id": "a8a9652f-bfbb-409b-856f-89c487494e5a-b",
        "original_task_id": "a8a9652f-bfbb-409b-856f-89c487494e5a",
        "task_details": {
            "task_instructions": "Développez un algorithme de contrôle optimal pour un système dynamique non linéaire à sortie multiple à entrée multiple (MIMO) représentant un robot aérien hexacopter sous des perturbations atmosphériques. Le système doit stabiliser l'orientation de l'hexacoptère (rouleau, tangage, lacet) et élévation tout en minimisant la consommation d'énergie. L'algorithme de contrôle doit intégrer les méthodes de contrôle prédictif du modèle de contrôle prédictif (MPC) et d'apprentissage par renforcement (RL). Effectuer une simulation approfondie de la dynamique du système, y compris les effets des rafales de vent, et valider l'algorithme de contrôle à l'aide d'un intégrateur numérique. La solution doit inclure une analyse de stabilité et une analyse de sensibilité des paramètres de contrôle.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.46,
                        "arm_length": 0.22,
                        "moment_of_inertia": [
                            0.03,
                            0.03,
                            0.04
                        ],
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "gravity": 10.11
                    },
                    "wind_disturbance": {
                        "mean_wind_speed": 5.17,
                        "gust_amplitude": 2.29,
                        "gust_frequency": 0.57
                    },
                    "control_constraints": {
                        "max_thrust": 17.07,
                        "min_thrust": 0.0,
                        "max_torque": 0.99,
                        "min_torque": -0.86
                    },
                    "simulation_parameters": {
                        "time_step": 0.01,
                        "simulation_duration": 10.99
                    }
                }
            },
            "mathematical_formulation": {
                "system_dynamics": {
                    "equations_of_motion": [
                        "m * ddot{x} = (u1 + u2 + u3 + u4 + u5 + u6) * sin(theta) - kx * dot{x}",
                        "m * ddot{y} = (u1 + u2 + u3 + u4 + u5 + u6) * sin(phi) * cos(theta) - ky * dot{y}",
                        "m * ddot{z} = (u1 + u2 + u3 + u4 + u5 + u6) * cos(phi) * cos(theta) - m * g - kz * dot{z}",
                        "Ixx * ddot{phi} = l * (u2 - u6) - k_phi * dot{phi}",
                        "Iyy * ddot{theta} = l * (u3 - u5) - k_theta * dot{theta}",
                        "Izz * ddot{psi} = tau1 + tau2 + tau3 + tau4 + tau5 + tau6 - k_psi * dot{psi}"
                    ],
                    "wind_model": "F_wind = 0.5 * rho * Cd * A * (V_wind - V_hex)^2",
                    "control_objective": "minimize J = integral(0 to T) [alpha * (phi^2 + theta^2 + psi^2) + beta * (u1^2 + u2^2 + u3^2 + u4^2 + u5^2 + u6^2)] dt"
                },
                "stability_analysis": "Lyapunov function V(x) = 0.5 * (x^T P x), where P is a positive definite matrix.",
                "sensitivity_analysis": "Partial derivatives of control gains with respect to system parameters."
            }
        }
    },
    {
        "task_id": "a8a9652f-bfbb-409b-856f-89c487494e5a-c",
        "original_task_id": "a8a9652f-bfbb-409b-856f-89c487494e5a",
        "task_details": {
            "task_instructions": "Concevez un algorithme de contrôle optimal pour un système dynamique non linéaire à sortie multiple à entrée multiple (MIMO), représentant un drone hexacopter (véhicule aérien sans pilote) soumis à une turbulence atmosphérique.  Le système doit maintenir l'orientation de l'hexacoptère (rouleau, tangage, lacet) et élévation, tout en minimisant les dépenses énergétiques. L'algorithme de contrôle doit intégrer les méthodologies de contrôle prédictif du modèle de contrôle prédictif (MPC) et d'apprentissage par renforcement (RL). Effectuer une simulation approfondie de la dynamique du système, y compris les effets des rafales de vent, et valider l'algorithme de contrôle à l'aide d'un intégrateur numérique. La solution doit inclure une analyse de stabilité et une étude de sensibilité des paramètres de contrôle.",
            "task_data": {
                "data_points": {
                    "hexacopter_parameters": {
                        "mass": 1.81,
                        "arm_length": 0.31,
                        "moment_of_inertia": [
                            0.06,
                            0.04,
                            0.04
                        ],
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.02,
                        "gravity": 10.88
                    },
                    "wind_disturbance": {
                        "mean_wind_speed": 6.41,
                        "gust_amplitude": 2.68,
                        "gust_frequency": 0.57
                    },
                    "control_constraints": {
                        "max_thrust": 28.26,
                        "min_thrust": 0.0,
                        "max_torque": 1.06,
                        "min_torque": -1.28
                    },
                    "simulation_parameters": {
                        "time_step": 0.01,
                        "simulation_duration": 11.7
                    }
                }
            },
            "mathematical_formulation": {
                "system_dynamics": {
                    "equations_of_motion": [
                        "m * ddot{x} = (u1 + u2 + u3 + u4 + u5 + u6) * sin(theta) - kx * dot{x}",
                        "m * ddot{y} = (u1 + u2 + u3 + u4 + u5 + u6) * sin(phi) * cos(theta) - ky * dot{y}",
                        "m * ddot{z} = (u1 + u2 + u3 + u4 + u5 + u6) * cos(phi) * cos(theta) - m * g - kz * dot{z}",
                        "Ixx * ddot{phi} = l * (u2 - u6 + u4 - u5) - k_phi * dot{phi}",
                        "Iyy * ddot{theta} = l * (u3 - u1 + u5 - u4) - k_theta * dot{theta}",
                        "Izz * ddot{psi} = tau1 + tau2 + tau3 + tau4 + tau5 + tau6 - k_psi * dot{psi}"
                    ],
                    "wind_model": "F_wind = 0.5 * rho * Cd * A * (V_wind - V_hex)^2",
                    "control_objective": "minimize J = integral(0 to T) [alpha * (phi^2 + theta^2 + psi^2) + beta * (u1^2 + u2^2 + u3^2 + u4^2 + u5^2 + u6^2)] dt"
                },
                "stability_analysis": "Lyapunov function V(x) = 0.5 * (x^T P x), where P is a positive definite matrix.",
                "sensitivity_analysis": "Partial derivatives of control gains with respect to system parameters."
            }
        }
    },
    {
        "task_id": "08ff411a-18ec-4e5f-9418-8d8d91960212-a",
        "original_task_id": "08ff411a-18ec-4e5f-9418-8d8d91960212",
        "task_details": {
            "task_instructions": "Diseñe un sistema de control óptimo para un manipulador robótico que realice maniobras agresivas en un entorno de fluido turbulento. El sistema debe estabilizar el manipulador mientras minimiza el consumo de energía y se adhiere a las limitaciones físicas. La solución debe incluir: 1) un modelo dinámico no lineal del manipulador robótico, 2) un modelo de turbulencia fluida, 3) una ley de control derivada utilizando la optimización de Hamilton-Jacobi-Bellman (HJB), 4) una simulación numérica que valida el sistema de control en condiciones de fluido estocástico.",
            "task_data": {
                "data_points": {
                    "manipulator_parameters": {
                        "mass": 1.59,
                        "inertia_matrix": [
                            0.0,
                            0.0,
                            0.0,
                            0.03,
                            0.0,
                            0.04,
                            0.03,
                            0.0,
                            0.0
                        ],
                        "link_length": 0.24,
                        "motor_torque_coefficient": 0.0,
                        "gear_ratio": 0.02,
                        "max_motor_speed": 14947.05
                    },
                    "fluid_turbulence_parameters": {
                        "mean_fluid_velocity": 5.74,
                        "turbulence_intensity": 0.23,
                        "turbulence_length_scale": 549.09,
                        "fluid_gust_amplitude": 2.9,
                        "fluid_gust_frequency": 0.46
                    },
                    "environmental_parameters": {
                        "gravity": 10.47,
                        "fluid_density": 1.14
                    },
                    "control_constraints": {
                        "max_joint_angle": 0.39,
                        "max_joint_velocity": 5.4,
                        "max_motor_torque": 26.26
                    }
                }
            },
            "mathematical_formulation": {
                "manipulator_dynamics": "\\dot{x} = v, \\dot{v} = \\frac{1}{m}(\\tau - mg\\hat{e}_3 - Dv + F_{fluid})",
                "rotation_dynamics": "\\dot{R} = R \\hat{\\omega}, I \\dot{\\omega} = -\\omega \\times I \\omega + \\tau + \\tau_{fluid}",
                "fluid_model": "F_{fluid} = \\frac{1}{2} \\rho A C_d ||v_{fluid} - v|| (v_{fluid} - v)",
                "cost_function": "J = \\int_0^T (x^T Q x + u^T R u) dt",
                "HJB_equation": "\\min_u \\left( \\frac{\\partial V}{\\partial x} f(x,u) + L(x,u) \\right) = 0"
            }
        }
    },
    {
        "task_id": "08ff411a-18ec-4e5f-9418-8d8d91960212-b",
        "original_task_id": "08ff411a-18ec-4e5f-9418-8d8d91960212",
        "task_details": {
            "task_instructions": "Entwerfen Sie ein optimales Kontrollsystem für einen Robotermanipulator, der aggressive Manöver in einer turbulenten Flüssigkeitsumgebung durchführt. Das System muss den Manipulator stabilisieren und gleichzeitig den Energieverbrauch minimieren und an physischen Einschränkungen einhalten. Die Lösung muss umfassen: 1) ein nichtlineares dynamisches Modell des Roboterarms, 2) ein Fluid-Turbulenzmodell, 3) ein Kontrollgesetz, das mit Hamilton-Jacobi-Bellman (HJB) -Optimierung abgeleitet wurde, 4) eine numerische Simulation, die das Kontrollsystem unter stochastischen Flüssigkeitsbedingungen validiert.",
            "task_data": {
                "data_points": {
                    "manipulator_parameters": {
                        "mass": 1.69,
                        "inertia_matrix": [
                            0.0,
                            0.03,
                            0.04,
                            0.0,
                            0.0,
                            0.03,
                            0.0,
                            0.0,
                            0.0
                        ],
                        "link_length": 0.24,
                        "motor_torque_coefficient": 0.0,
                        "gear_ratio": 0.02,
                        "max_motor_speed": 13575.56
                    },
                    "fluid_turbulence_parameters": {
                        "mean_flow_velocity": 4.34,
                        "turbulence_intensity": 0.2,
                        "integral_length_scale": 476.78,
                        "flow_gust_amplitude": 2.77,
                        "flow_gust_frequency": 0.55
                    },
                    "environmental_parameters": {
                        "gravity": 11.26,
                        "fluid_density": 1.17
                    },
                    "control_constraints": {
                        "max_joint_angle": 0.34,
                        "max_joint_velocity": 6.17,
                        "max_torque": 28.09
                    }
                }
            },
            "mathematical_formulation": {
                "manipulator_dynamics": "\\dot{x} = v, \\dot{v} = \\frac{1}{m}(\\tau - mg\\hat{e}_3 - Dv + F_{fluid})",
                "rotation_dynamics": "\\dot{R} = R \\hat{\\omega}, I \\dot{\\omega} = -\\omega \\times I \\omega + \\tau + \\tau_{fluid}",
                "fluid_model": "F_{fluid} = \\frac{1}{2} \\rho A C_d ||v_{fluid} - v|| (v_{fluid} - v)",
                "cost_function": "J = \\int_0^T (x^T Q x + u^T R u) dt",
                "HJB_equation": "\\min_u \\left( \\frac{\\partial V}{\\partial x} f(x,u) + L(x,u) \\right) = 0"
            }
        }
    },
    {
        "task_id": "08ff411a-18ec-4e5f-9418-8d8d91960212-c",
        "original_task_id": "08ff411a-18ec-4e5f-9418-8d8d91960212",
        "task_details": {
            "task_instructions": "Concevez un système de contrôle optimal pour un manipulateur robotique effectuant des mouvements complexes dans un environnement dynamique. Le système doit stabiliser le manipulateur tout en minimisant la consommation d'énergie et en adhérant aux contraintes physiques. La solution doit inclure: 1) un modèle dynamique non linéaire du bras robotique, 2) un modèle de perturbation environnementale, 3) une loi de contrôle dérivée en utilisant l'optimisation Hamilton-Jacobi-Bellman (HJB), 4) une simulation numérique validant le système de contrôle dans des conditions environnementales stochastiques.",
            "task_data": {
                "data_points": {
                    "manipulator_parameters": {
                        "mass": 1.36,
                        "inertia_matrix": [
                            0.0,
                            0.03,
                            0.03,
                            0.0,
                            0.0,
                            0.0,
                            0.04,
                            0.0,
                            0.0
                        ],
                        "link_length": 0.23,
                        "motor_torque_coefficient": 0.0,
                        "gear_ratio": 0.01,
                        "max_motor_speed": 13767.99
                    },
                    "environmental_disturbance_parameters": {
                        "mean_disturbance_force": 5.72,
                        "disturbance_intensity": 0.19,
                        "correlation_length": 450.19,
                        "disturbance_amplitude": 3.08,
                        "disturbance_frequency": 0.55
                    },
                    "environmental_parameters": {
                        "gravity": 8.42,
                        "friction_coefficient": 1.32
                    },
                    "control_constraints": {
                        "max_joint_angle": 0.36,
                        "max_joint_velocity": 5.83,
                        "max_torque": 24.16
                    }
                }
            },
            "mathematical_formulation": {
                "manipulator_dynamics": "\\dot{x} = v, \\dot{v} = \\frac{1}{m}(\\tau - mg\\hat{e}_3 - Dv + F_{disturbance})",
                "rotation_dynamics": "\\dot{R} = R \\hat{\\omega}, I \\dot{\\omega} = -\\omega \\times I \\omega + \\tau + \\tau_{disturbance}",
                "disturbance_model": "F_{disturbance} = \\frac{1}{2} \\rho A C_d ||v_{disturbance} - v|| (v_{disturbance} - v)",
                "cost_function": "J = \\int_0^T (x^T Q x + u^T R u) dt",
                "HJB_equation": "\\min_u \\left( \\frac{\\partial V}{\\partial x} f(x,u) + L(x,u) \\right) = 0"
            }
        }
    },
    {
        "task_id": "37d0e716-7aa7-4fe5-902e-34042ea27b17-a",
        "original_task_id": "37d0e716-7aa7-4fe5-902e-34042ea27b17",
        "task_details": {
            "task_instructions": "Diseñe un sistema de control óptimo para un vehículo aéreo robótico que realiza maniobras agresivas en un entorno atmosférico turbulento. El sistema debe minimizar la ruta siguiente el error mientras se adhiere a los límites de saturación del actuador y las limitaciones de potencia. La solución debe incluir: (1) un modelo dinámico no lineal del robot aéreo, (2) un modelo de turbulencia atmosférica basado en el espectro Dryden, (3) un modelo de control predictivo del modelo no lineal en tiempo real (NMPC), (4) un solucionador numérico capaz de manejar el problema de optimización de NMPC dentro de un circuito de control de 10 ms de 10 ms.",
            "task_data": {
                "data_points": {
                    "aerial_robot_parameters": {
                        "mass": 1.58,
                        "inertia_matrix": [
                            0.03,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.04,
                            0.03
                        ],
                        "arm_length": 0.29,
                        "motor_thrust_coefficient": 0.0,
                        "motor_torque_coefficient": 0.0,
                        "max_motor_speed": 1585.16,
                        "min_motor_speed": 204.99
                    },
                    "atmospheric_parameters": {
                        "mean_wind_speed": 4.93,
                        "turbulence_intensity": 0.17,
                        "Dryden_parameters": {
                            "Lu": 184.04,
                            "Lv": 206.52,
                            "Lw": 43.94,
                            "sigma_u": 0.99,
                            "sigma_v": 0.73,
                            "sigma_w": 0.56
                        }
                    },
                    "trajectory": {
                        "waypoints": [
                            [
                                0.0,
                                -5.65,
                                5.15
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                5.06,
                                4.74,
                                4.51
                            ],
                            [
                                9.6,
                                4.36,
                                0.0
                            ]
                        ],
                        "time_points": [
                            7.64,
                            2.41,
                            8.94,
                            4.87,
                            0.0
                        ]
                    },
                    "control_constraints": {
                        "max_roll_rate": 3.19,
                        "max_pitch_rate": 2.96,
                        "max_yaw_rate": 1.77,
                        "max_thrust": 26.07,
                        "power_budget": 4832.01
                    }
                }
            },
            "mathematical_formulation": {
                "aerial_robot_dynamics": "\\dot{x} = v, \\dot{v} = R(\\phi, \\theta, \\psi) \\cdot (0, 0, T/m) - (0, 0, g) - \\frac{1}{m} D v, \\dot{R} = R \\cdot \\hat{\\omega}, J \\dot{\\omega} = -\\omega \\times J \\omega + \\tau",
                "atmospheric_model": "u_g(t) = \\sigma_u \\sqrt{\\frac{2V}{L_u}} \\sum_{i=1}^n \\frac{1}{(1 + \\frac{V}{L_u} s)^n} w_i(t), where w_i(t) is white noise",
                "NMPC_objective": "min \\int_{t_k}^{t_k+H} (\\|x(t) - x_{ref}(t)\\|^2_Q + \\|u(t)\\|^2_R) dt + \\|x(t_k+H) - x_{ref}(t_k+H)\\|^2_P",
                "constraints": "x_{min} \\leq x(t) \\leq x_{max}, u_{min} \\leq u(t) \\leq u_{max}, \\sum_{k=1}^N \\|u_k\\|^2 \\Delta t \\leq P_{max}"
            }
        }
    },
    {
        "task_id": "37d0e716-7aa7-4fe5-902e-34042ea27b17-b",
        "original_task_id": "37d0e716-7aa7-4fe5-902e-34042ea27b17",
        "task_details": {
            "task_instructions": "Entwerfen Sie ein optimales Steuerungssystem für einen Robotermanipulator, der aggressive Manöver in einem turbulenten Flüssigkeitsfluss durchführt. Das System muss den Positions -Tracking -Fehler minimieren und gleichzeitig die Sättigungsgrenzwerte der Aktuator und die Energiebeschränkungen respektieren. Die Lösung muss umfassen: (1) Ein nichtlineares dynamisches Modell des Roboterarms, (2) ein Fluid-Turbulenzmodell basierend auf dem Dryden-Spektrum, (3) einer nichtlinearen Echtzeit-Formulierung für nichtlineare Modellvorhersage (NMPC) (4) einen numerischen Löser, der die NMPC-Optimierungsprobleme in einem 10-ms-Kontroll-Schleife bearbeiten kann.",
            "task_data": {
                "data_points": {
                    "manipulator_parameters": {
                        "mass": 1.35,
                        "inertia_matrix": [
                            0.03,
                            0.0,
                            0.0,
                            0.04,
                            0.0,
                            0.03,
                            0.0,
                            0.0,
                            0.0
                        ],
                        "link_length": 0.22,
                        "motor_torque_coefficient": 0.0,
                        "gear_ratio": 0.0,
                        "max_motor_speed": 1502.99,
                        "min_motor_speed": 218.65
                    },
                    "fluid_parameters": {
                        "mean_flow_velocity": 5.1,
                        "turbulence_intensity": 0.23,
                        "Dryden_parameters": {
                            "Lu": 184.08,
                            "Lv": 193.06,
                            "Lw": 45.2,
                            "sigma_u": 1.09,
                            "sigma_v": 0.73,
                            "sigma_w": 0.53
                        }
                    },
                    "trajectory": {
                        "waypoints": [
                            [
                                4.62,
                                11.22,
                                0.0
                            ],
                            [
                                5.6,
                                5.37,
                                5.07
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                -5.67,
                                5.01,
                                0.0
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ]
                        ],
                        "time_points": [
                            11.31,
                            0.0,
                            2.28,
                            4.95,
                            6.72
                        ]
                    },
                    "control_constraints": {
                        "max_joint_velocity": 2.87,
                        "max_joint_acceleration": 3.13,
                        "max_torque": 24.57,
                        "energy_budget": 5438.33
                    }
                }
            },
            "mathematical_formulation": {
                "manipulator_dynamics": "\\dot{x} = v, \\dot{v} = M^{-1}(q)(\\tau - C(q,\\dot{q})\\dot{q} - G(q)), \\ddot{q} = M^{-1}(q)(\\tau - C(q,\\dot{q})\\dot{q} - G(q))",
                "fluid_model": "u_g(t) = \\sigma_u \\sqrt{\\frac{2V}{L_u}} \\sum_{i=1}^n \\frac{1}{(1 + \\frac{V}{L_u} s)^n} w_i(t), where w_i(t) is white noise",
                "NMPC_objective": "min \\int_{t_k}^{t_k+H} (\\|x(t) - x_{ref}(t)\\|^2_Q + \\|u(t)\\|^2_R) dt + \\|x(t_k+H) - x_{ref}(t_k+H)\\|^2_P",
                "constraints": "x_{min} \\leq x(t) \\leq x_{max}, u_{min} \\leq u(t) \\leq u_{max}, \\sum_{k=1}^N \\|u_k\\|^2 \\Delta t \\leq E_{max}"
            }
        }
    },
    {
        "task_id": "37d0e716-7aa7-4fe5-902e-34042ea27b17-c",
        "original_task_id": "37d0e716-7aa7-4fe5-902e-34042ea27b17",
        "task_details": {
            "task_instructions": "Diseñe un sistema de control óptimo para un helicóptero robótico que realice maniobras agresivas en un flujo de aire turbulento. El sistema debe minimizar el error de seguimiento de la trayectoria mientras respeta los límites de saturación del actuador y las limitaciones de energía. La solución debe incluir: (1) un modelo dinámico no lineal del helicóptero, (2) un modelo de turbulencia de flujo de aire basado en el espectro Dryden, (3) un modelo de control predictivo del modelo no lineal en tiempo real (NMPC), (4) un solucionador numérico capaz de manejar el problema de optimización de NMPC dentro de un circuito de control de 10 ms de 10 ms.",
            "task_data": {
                "data_points": {
                    "helicopter_parameters": {
                        "mass": 1.47,
                        "inertia_matrix": [
                            0.03,
                            0.0,
                            0.0,
                            0.03,
                            0.04,
                            0.0,
                            0.0,
                            0.0,
                            0.0
                        ],
                        "arm_length": 0.23,
                        "rotor_thrust_coefficient": 0.0,
                        "rotor_torque_coefficient": 0.0,
                        "max_rotor_speed": 1389.07,
                        "min_rotor_speed": 171.61
                    },
                    "airflow_parameters": {
                        "mean_airflow_speed": 4.96,
                        "turbulence_intensity": 0.22,
                        "Dryden_parameters": {
                            "Lu": 173.9,
                            "Lv": 170.12,
                            "Lw": 44.98,
                            "sigma_u": 1.16,
                            "sigma_v": 0.79,
                            "sigma_w": 0.57
                        }
                    },
                    "trajectory": {
                        "waypoints": [
                            [
                                -4.78,
                                0.0,
                                5.21
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                4.95,
                                5.03,
                                4.27
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                5.42,
                                10.29,
                                0.0
                            ]
                        ],
                        "time_points": [
                            7.38,
                            8.72,
                            0.0,
                            2.31,
                            4.84
                        ]
                    },
                    "control_constraints": {
                        "max_roll_rate": 2.85,
                        "max_pitch_rate": 2.59,
                        "max_yaw_rate": 2.03,
                        "max_thrust": 26.84,
                        "energy_budget": 4297.18
                    }
                }
            },
            "mathematical_formulation": {
                "helicopter_dynamics": "\\dot{x} = v, \\dot{v} = R(\\phi, \\theta, \\psi) \\cdot (0, 0, T/m) - (0, 0, g) - \\frac{1}{m} D v, \\dot{R} = R \\cdot \\hat{\\omega}, J \\dot{\\omega} = -\\omega \\times J \\omega + \\tau",
                "airflow_model": "u_g(t) = \\sigma_u \\sqrt{\\frac{2V}{L_u}} \\sum_{i=1}^n \\frac{1}{(1 + \\frac{V}{L_u} s)^n} w_i(t), where w_i(t) is white noise",
                "NMPC_objective": "min \\int_{t_k}^{t_k+H} (\\|x(t) - x_{ref}(t)\\|^2_Q + \\|u(t)\\|^2_R) dt + \\|x(t_k+H) - x_{ref}(t_k+H)\\|^2_P",
                "constraints": "x_{min} \\leq x(t) \\leq x_{max}, u_{min} \\leq u(t) \\leq u_{max}, \\sum_{k=1}^N \\|u_k\\|^2 \\Delta t \\leq E_{max}"
            }
        }
    },
    {
        "task_id": "2649cd8e-d0dd-4d33-954b-6aa88082c866-a",
        "original_task_id": "2649cd8e-d0dd-4d33-954b-6aa88082c866",
        "task_details": {
            "task_instructions": "Diseñe una estrategia de control óptima para un enjambre de robots terrestres autónomos (AGR) de múltiples agentes encargados de encuestar un sitio de construcción que cambia dinámicamente. La estrategia de control debe minimizar el consumo de energía al tiempo que maximiza la precisión de la cobertura en condiciones de terreno inciertas y movimientos de obstáculos. La solución debe incluir: 1) un algoritmo de control distribuido que contabiliza los retrasos en la comunicación y la pérdida de paquetes, 2) un modelo probabilístico de dinámica de diseño del sitio, 3) un análisis de robustez contra el ruido del sensor y las fallas del actuador.",
            "task_data": {
                "data_points": {
                    "AGR_specs": {
                        "mass": "25 kg",
                        "thrust_max": "50 N",
                        "battery_capacity": "500 Wh",
                        "sensor_range": "10 m",
                        "communication_range": "100 m",
                        "packet_loss_rate": "0.1-0.3",
                        "actuator_failure_prob": "0.05"
                    },
                    "environment": {
                        "terrain_roughness": "0.1-0.5 m/s",
                        "obstacle_movement_speed": "0.2-0.8 m/s",
                        "site_dimensions": "200x200 m",
                        "obstacle_appearance_rate": "0.1-0.5 events/min"
                    },
                    "constraints": {
                        "mission_duration": "6 hours",
                        "coverage_threshold": "95%",
                        "energy_reserve": "20%"
                    }
                }
            },
            "mathematical_formulation": {
                "energy_model": "E_total = Σ (E_propulsion + E_communication + E_sensing)",
                "propulsion_energy": "E_propulsion = ∫ (k1·v(t)^3 + k2·‖ω(t)‖^2) dt",
                "coverage_objective": "maximize ∫∫ p_detect(x,y,t) dx dy dt",
                "communication_delay": "τ_ij = ‖r_i - r_j‖ / c + ε_ij, ε_ij ~ Exp(λ)",
                "failure_model": "P_failure = 1 - ∏ (1 - p_actuator(t))",
                "terrain_uncertainty": "v_terrain(x,y,t) = v_mean + GP(μ, K)"
            }
        }
    },
    {
        "task_id": "2649cd8e-d0dd-4d33-954b-6aa88082c866-b",
        "original_task_id": "2649cd8e-d0dd-4d33-954b-6aa88082c866",
        "task_details": {
            "task_instructions": "Concevez une stratégie de contrôle optimale pour un essaim multi-agents de robots mobiles autonomes (AMR) chargés de surveiller une formation géologique en évolution dynamique. La stratégie de contrôle doit minimiser la consommation d'énergie tout en maximisant la précision de la couverture dans des conditions de terrain incertain et des distributions d'obstacles. La solution doit inclure: 1) un algorithme de contrôle distribué représentant les retards de communication et la perte de paquets, 2) un modèle probabiliste de dynamique de formation, 3) une analyse de robustesse contre le bruit du capteur et les défaillances de l'actionneur.",
            "task_data": {
                "data_points": {
                    "AMR_specs": {
                        "mass": "25 kg",
                        "thrust_max": "50 N",
                        "battery_capacity": "500 Wh",
                        "sensor_range": "10 m",
                        "communication_range": "100 m",
                        "packet_loss_rate": "0.1-0.3",
                        "actuator_failure_prob": "0.05"
                    },
                    "environment": {
                        "terrain_roughness": "0.1-0.5 m/s",
                        "obstacle_velocity": "0.2-0.8 m/s",
                        "formation_dimensions": "200x200 m",
                        "obstacle_generation_rate": "0.1-0.5 events/min"
                    },
                    "constraints": {
                        "mission_duration": "6 hours",
                        "coverage_threshold": "95%",
                        "energy_reserve": "20%"
                    }
                }
            },
            "mathematical_formulation": {
                "energy_model": "E_total = Σ (E_propulsion + E_communication + E_sensing)",
                "propulsion_energy": "E_propulsion = ∫ (k1·v(t)^3 + k2·‖ω(t)‖^2) dt",
                "coverage_objective": "maximize ∫∫ p_detect(x,y,t) dx dy dt",
                "communication_delay": "τ_ij = ‖r_i - r_j‖ / c + ε_ij, ε_ij ~ Exp(λ)",
                "failure_model": "P_failure = 1 - ∏ (1 - p_actuator(t))",
                "terrain_uncertainty": "v_terrain(x,y,t) = v_mean + GP(μ, K)"
            }
        }
    },
    {
        "task_id": "2649cd8e-d0dd-4d33-954b-6aa88082c866-c",
        "original_task_id": "2649cd8e-d0dd-4d33-954b-6aa88082c866",
        "task_details": {
            "task_instructions": "Entwerfen Sie eine optimale Kontrollstrategie für einen Multi-Agent-Schwarm autonomer mobiler Roboter (AMRs), der mit der Vermessung einer dynamisch verändernden geologischen Bildung beauftragt ist. Die Kontrollstrategie muss den Energieverbrauch minimieren und gleichzeitig die Genauigkeit der Abdeckung unter ungewisse Geländebedingungen und unvorhersehbaren Hindernissen maximieren. Die Lösung muss: 1) ein verteilter Steueralgorithmus für Kommunikationsverzögerungen und Paketverlust, 2) ein probabilistisches Modell der Formationsdynamik, 3) eine Robustheitsanalyse gegen Sensorrauschen und Aktuatorfehler berücksichtigt.",
            "task_data": {
                "data_points": {
                    "AMR_specs": {
                        "mass": "25 kg",
                        "thrust_max": "50 N",
                        "battery_capacity": "500 Wh",
                        "sensor_range": "10 m",
                        "communication_range": "100 m",
                        "packet_loss_rate": "0.1-0.3",
                        "actuator_failure_prob": "0.05"
                    },
                    "environment": {
                        "terrain_roughness": "0.1-0.5 m/s",
                        "obstacle_velocity": "0.2-0.8 m/s",
                        "formation_dimensions": "200x200 m",
                        "obstacle_generation_rate": "0.1-0.5 events/min"
                    },
                    "constraints": {
                        "mission_duration": "6 hours",
                        "coverage_threshold": "95%",
                        "energy_reserve": "20%"
                    }
                }
            },
            "mathematical_formulation": {
                "energy_model": "E_total = Σ (E_propulsion + E_communication + E_sensing)",
                "propulsion_energy": "E_propulsion = ∫ (k1·v(t)^3 + k2·‖ω(t)‖^2) dt",
                "coverage_objective": "maximize ∫∫ p_detect(x,y,t) dx dy dt",
                "communication_delay": "τ_ij = ‖r_i - r_j‖ / c + ε_ij, ε_ij ~ Exp(λ)",
                "failure_model": "P_failure = 1 - ∏ (1 - p_actuator(t))",
                "terrain_uncertainty": "v_terrain(x,y,t) = v_mean + GP(μ, K)"
            }
        }
    },
    {
        "task_id": "740a1af3-9efe-4e21-9864-a828e5aec749-a",
        "original_task_id": "740a1af3-9efe-4e21-9864-a828e5aec749",
        "task_details": {
            "task_instructions": "Entwerfen Sie einen optimalen Kontrollalgorithmus für ein Roboter -Luftfahrzeug, das aggressive Manöver in einer engen städtischen Umgebung mit bewegenden Hindernissen durchführt. Der Algorithmus muss den Energieverbrauch minimieren und gleichzeitig bei definierten Toleranzen eine Hindernisvermeidung und -pfad gewährleisten. Die Lösung muss ein echtzeit implementierbares Steuergesetz enthalten, das durch numerische Simulation unter Verwendung des bereitgestellten Datensatzes validiert wird.",
            "task_data": {
                "data_points": {
                    "robot_parameters": {
                        "mass": 1.71,
                        "inertia_matrix": [
                            0.03,
                            0.0,
                            0.03,
                            0.0,
                            0.0,
                            0.04,
                            0.0,
                            0.0,
                            0.0
                        ],
                        "rotor_thrust_coefficient": 0.0,
                        "rotor_drag_coefficient": 0.0,
                        "arm_length": 0.25
                    },
                    "environment_parameters": {
                        "urban_canyon_dimensions": [
                            107.63,
                            46.83,
                            106.14
                        ],
                        "moving_impediments": [
                            {
                                "position": [
                                    59.81,
                                    69.22,
                                    19.42
                                ],
                                "velocity": [
                                    0.0,
                                    0.0,
                                    -2.66
                                ],
                                "radius": 8.05
                            },
                            {
                                "position": [
                                    34.79,
                                    10.04,
                                    30.97
                                ],
                                "velocity": [
                                    2.23,
                                    0.0,
                                    0.0
                                ],
                                "radius": 4.35
                            }
                        ],
                        "wind_gust_model": {
                            "mean_velocity": [
                                0.48,
                                0.0,
                                1.6
                            ],
                            "turbulence_intensity": 0.19
                        }
                    },
                    "path_constraints": {
                        "waypoints": [
                            [
                                28.85,
                                81.91,
                                68.48
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                29.97,
                                20.29,
                                11.41
                            ],
                            [
                                49.57,
                                59.73,
                                19.16
                            ]
                        ],
                        "max_velocity": 15.36,
                        "max_acceleration": 7.05,
                        "position_tolerance": 0.52,
                        "attitude_tolerance": 0.09
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": "M(q)q'' + C(q, q')q' + G(q) = τ + τ_ext",
                "cost_function": "J = ∫(τ^T R τ + (q - q_des)^T Q (q - q_des)) dt",
                "constraints": {
                    "collision_avoidance": "||p - p_obs|| ≥ r_obs + r_safety",
                    "actuator_limits": "τ_min ≤ τ ≤ τ_max",
                    "path_following": "||p - p_des|| ≤ ε_p, ||θ - θ_des|| ≤ ε_θ"
                },
                "control_law": "τ = K_p e + K_d e' + feedforward_term"
            }
        }
    },
    {
        "task_id": "740a1af3-9efe-4e21-9864-a828e5aec749-b",
        "original_task_id": "740a1af3-9efe-4e21-9864-a828e5aec749",
        "task_details": {
            "task_instructions": "Concevez une stratégie de contrôle optimale pour un véhicule aérien robotique effectuant des manœuvres agressives dans un environnement urbain confiné avec des obstacles émouvants. La stratégie doit minimiser la consommation d'énergie tout en garantissant l'évitement des obstacles et l'adhésion à la trajectoire dans des tolérances spécifiées. La solution doit inclure une loi de contrôle implémentable en temps réel, validée par simulation numérique à l'aide de l'ensemble de données fourni.",
            "task_data": {
                "data_points": {
                    "robotic_vehicle_parameters": {
                        "mass": 1.62,
                        "inertia_matrix": [
                            0.03,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.03,
                            0.0,
                            0.04
                        ],
                        "rotor_thrust_coefficient": 0.0,
                        "rotor_drag_coefficient": 0.0,
                        "arm_length": 0.24
                    },
                    "environment_parameters": {
                        "urban_area_dimensions": [
                            104.05,
                            52.15,
                            85.41
                        ],
                        "moving_impediments": [
                            {
                                "position": [
                                    39.9,
                                    27.27,
                                    10.19
                                ],
                                "velocity": [
                                    2.03,
                                    0.0,
                                    0.0
                                ],
                                "radius": 4.29
                            },
                            {
                                "position": [
                                    21.89,
                                    62.14,
                                    76.41
                                ],
                                "velocity": [
                                    0.0,
                                    0.0,
                                    -3.19
                                ],
                                "radius": 6.89
                            }
                        ],
                        "wind_gust_model": {
                            "mean_velocity": [
                                0.0,
                                1.61,
                                0.54
                            ],
                            "turbulence_intensity": 0.19
                        }
                    },
                    "trajectory_constraints": {
                        "waypoints": [
                            [
                                65.55,
                                19.22,
                                54.79
                            ],
                            [
                                31.81,
                                75.69,
                                81.02
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                9.26,
                                28.92,
                                22.62
                            ]
                        ],
                        "max_velocity": 16.28,
                        "max_acceleration": 7.33,
                        "position_tolerance": 0.44,
                        "attitude_tolerance": 0.1
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": "M(q)q'' + C(q, q')q' + G(q) = τ + τ_ext",
                "cost_function": "J = ∫(τ^T R τ + (q - q_des)^T Q (q - q_des)) dt",
                "constraints": {
                    "collision_avoidance": "||p - p_obs|| ≥ r_obs + r_safety",
                    "actuator_limits": "τ_min ≤ τ ≤ τ_max",
                    "trajectory_tracking": "||p - p_des|| ≤ ε_p, ||θ - θ_des|| ≤ ε_θ"
                },
                "control_law": "τ = K_p e + K_d e' + feedforward_term"
            }
        }
    },
    {
        "task_id": "740a1af3-9efe-4e21-9864-a828e5aec749-c",
        "original_task_id": "740a1af3-9efe-4e21-9864-a828e5aec749",
        "task_details": {
            "task_instructions": "Diseñe una estrategia de control óptima para un vehículo aéreo robótico que realiza maniobras agresivas en un entorno urbano confinado con impedimentos móviles. La estrategia debe minimizar el uso de energía al tiempo que garantiza la evitación de colisiones y la ruta seguida dentro de las tolerancias especificadas. La solución debe incluir una ley de control implementable en tiempo real, validada a través de la simulación numérica utilizando el conjunto de datos proporcionado.",
            "task_data": {
                "data_points": {
                    "robot_parameters": {
                        "mass": 1.6,
                        "inertia_matrix": [
                            0.03,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.03,
                            0.0,
                            0.04
                        ],
                        "rotor_thrust_coefficient": 0.0,
                        "rotor_drag_coefficient": 0.0,
                        "arm_length": 0.21
                    },
                    "environment_parameters": {
                        "urban_environment_dimensions": [
                            95.77,
                            98.9,
                            52.6
                        ],
                        "moving_impediments": [
                            {
                                "position": [
                                    36.03,
                                    8.94,
                                    30.44
                                ],
                                "velocity": [
                                    2.04,
                                    0.0,
                                    0.0
                                ],
                                "radius": 4.76
                            },
                            {
                                "position": [
                                    77.64,
                                    19.43,
                                    66.25
                                ],
                                "velocity": [
                                    0.0,
                                    0.0,
                                    -2.82
                                ],
                                "radius": 7.98
                            }
                        ],
                        "wind_gust_model": {
                            "mean_velocity": [
                                0.55,
                                0.0,
                                1.42
                            ],
                            "turbulence_intensity": 0.23
                        }
                    },
                    "path_constraints": {
                        "waypoints": [
                            [
                                19.14,
                                29.68,
                                9.78
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                53.16,
                                22.25,
                                72.49
                            ],
                            [
                                27.33,
                                72.49,
                                90.45
                            ]
                        ],
                        "max_velocity": 17.12,
                        "max_acceleration": 6.67,
                        "position_tolerance": 0.44,
                        "attitude_tolerance": 0.09
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": "M(q)q'' + C(q, q')q' + G(q) = τ + τ_ext",
                "cost_function": "J = ∫(τ^T R τ + (q - q_des)^T Q (q - q_des)) dt",
                "constraints": {
                    "collision_avoidance": "||p - p_obs|| ≥ r_obs + r_safety",
                    "actuator_limits": "τ_min ≤ τ ≤ τ_max",
                    "path_following": "||p - p_des|| ≤ ε_p, ||θ - θ_des|| ≤ ε_θ"
                },
                "control_law": "τ = K_p e + K_d e' + feedforward_term"
            }
        }
    },
    {
        "task_id": "e45221a4-160e-4029-9071-32fce246345b-a",
        "original_task_id": "e45221a4-160e-4029-9071-32fce246345b",
        "task_details": {
            "task_instructions": "Concevez une stratégie de contrôle optimale pour un manipulateur robotique effectuant des mouvements à grande vitesse dans un espace de travail confiné avec des obstacles en mouvement. La tâche consiste à calculer les entrées de contrôle en temps réel (couples articulaires) pour obtenir un chemin prédéfini tout en évitant les collisions et en minimisant la consommation d'énergie. La solution doit tenir compte des perturbations mécaniques, des limitations de l'actionneur et des inexactitudes de capteurs.",
            "task_data": {
                "data_points": {
                    "manipulator_parameters": {
                        "mass": 1.48,
                        "inertia_matrix": [
                            0.03,
                            0.03,
                            0.04
                        ],
                        "link_length": 0.22,
                        "gear_ratio": 106.81,
                        "motor_torque_constant": 0.11,
                        "max_joint_torque": 14.82,
                        "min_joint_torque": 0.43
                    },
                    "environment_parameters": {
                        "vibration_model": "Dryden",
                        "vibration_amplitude": 5.65,
                        "vibration_frequency": 1.73,
                        "obstacle_positions": [
                            [
                                9.31,
                                5.47,
                                2.83
                            ],
                            [
                                21.53,
                                2.06,
                                0.0
                            ],
                            [
                                -2.2,
                                4.34,
                                16.22
                            ]
                        ],
                        "obstacle_velocities": [
                            [
                                0.0,
                                0.0,
                                0.11
                            ],
                            [
                                0.0,
                                0.0,
                                0.43
                            ],
                            [
                                0.0,
                                0.0,
                                -0.29
                            ]
                        ],
                        "trajectory_waypoints": [
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                4.88,
                                5.5,
                                14.65
                            ],
                            [
                                0.0,
                                18.71,
                                0.0
                            ],
                            [
                                4.46,
                                4.55,
                                4.32
                            ],
                            [
                                9.7,
                                0.0,
                                9.05
                            ]
                        ]
                    },
                    "sensor_parameters": {
                        "encoder_noise_density": 0.01,
                        "position_sensor_error": 0.09,
                        "velocity_sensor_error": 0.05
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * d²x/dt² = F - m * g * e_z - D * v",
                    "rotational": "I * dω/dt + ω × (I * ω) = M",
                    "actuator": "T_i = k_t * ω_i, M_i = k_m * ω_i"
                },
                "constraints": {
                    "collision_avoidance": "min(||x - o_i||) > r_safe ∀ i",
                    "control_inputs": "T_min ≤ T_i ≤ T_max",
                    "energy": "min ∫ (T_1² + T_2² + T_3² + T_4²) dt"
                },
                "optimization": "min J = w1 * ∫ (x - x_des)² dt + w2 * ∫ (T_1² + T_2² + T_3² + T_4²) dt"
            }
        }
    },
    {
        "task_id": "e45221a4-160e-4029-9071-32fce246345b-b",
        "original_task_id": "e45221a4-160e-4029-9071-32fce246345b",
        "task_details": {
            "task_instructions": "Concevez une stratégie de contrôle optimale pour un manipulateur robotique effectuant des manœuvres agressives dans un environnement d'usine contraint avec des obstacles dynamiques. La tâche consiste à calculer les entrées de contrôle en temps réel (couples articulaires) pour obtenir un chemin prédéfini tout en évitant les collisions et en minimisant la consommation d'énergie. La solution doit tenir compte des perturbations mécaniques, de la dynamique de l'actionneur et du bruit du capteur.",
            "task_data": {
                "data_points": {
                    "manipulator_parameters": {
                        "mass": 1.45,
                        "inertia_matrix": [
                            0.03,
                            0.03,
                            0.04
                        ],
                        "link_length": 0.27,
                        "motor_coefficient": 0.0,
                        "friction_coefficient": 0.0,
                        "max_torque_per_joint": 16.67,
                        "min_torque_per_joint": 0.51
                    },
                    "environment_parameters": {
                        "vibration_model": "Dryden",
                        "vibration_intensity_mean": 4.68,
                        "vibration_intensity_variance": 1.83,
                        "obstacle_positions": [
                            [
                                3.22,
                                8.84,
                                5.5
                            ],
                            [
                                2.24,
                                0.0,
                                21.97
                            ],
                            [
                                -1.96,
                                4.29,
                                16.78
                            ]
                        ],
                        "obstacle_velocities": [
                            [
                                -0.27,
                                0.0,
                                0.0
                            ],
                            [
                                0.51,
                                0.0,
                                0.0
                            ],
                            [
                                0.0,
                                0.09,
                                0.0
                            ]
                        ],
                        "path_waypoints": [
                            [
                                0.0,
                                0.0,
                                20.54
                            ],
                            [
                                9.59,
                                0.0,
                                9.91
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                5.11,
                                4.68,
                                5.3
                            ],
                            [
                                16.75,
                                4.89,
                                5.56
                            ]
                        ]
                    },
                    "sensor_parameters": {
                        "encoder_noise_density": 0.01,
                        "position_sensor_error": 0.11,
                        "velocity_sensor_error": 0.06
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * d²x/dt² = F - m * g * e_z - D * v",
                    "rotational": "I * dω/dt + ω × (I * ω) = M",
                    "actuator": "M_i = k_m * ω_i²"
                },
                "constraints": {
                    "collision_avoidance": "min(||x - o_i||) > r_safe ∀ i",
                    "control_inputs": "M_min ≤ M_i ≤ M_max",
                    "energy": "min ∫ (M_1² + M_2² + M_3² + M_4²) dt"
                },
                "optimization": "min J = w1 * ∫ (x - x_des)² dt + w2 * ∫ (M_1² + M_2² + M_3² + M_4²) dt"
            }
        }
    },
    {
        "task_id": "e45221a4-160e-4029-9071-32fce246345b-c",
        "original_task_id": "e45221a4-160e-4029-9071-32fce246345b",
        "task_details": {
            "task_instructions": "Concevez un schéma de guidage optimal pour un véhicule aérien robotique effectuant des manœuvres agiles dans un cadre urbain confiné contenant des obstacles mobiles.  La tâche consiste à calculer les signaux de contrôle en temps réel (propulsion et moments) pour suivre une trajectoire de vol prédéfinie tout en contournant les collisions et en réduisant la consommation d'énergie. La solution doit tenir compte des interférences aérodynamiques, des caractéristiques de l'actionneur et des inexactitudes de capteurs.",
            "task_data": {
                "data_points": {
                    "vehicle_parameters": {
                        "mass": 1.31,
                        "inertia_matrix": [
                            0.03,
                            0.03,
                            0.04
                        ],
                        "arm_length": 0.28,
                        "propulsion_coefficient": 0.0,
                        "drag_coefficient": 0.0,
                        "max_propulsion_per_rotor": 16.96,
                        "min_propulsion_per_rotor": 0.46
                    },
                    "environment_parameters": {
                        "wind_gust_model": "Dryden",
                        "wind_speed_mean": 5.72,
                        "wind_speed_variance": 2.01,
                        "impediment_positions": [
                            [
                                20.94,
                                1.71,
                                0.0
                            ],
                            [
                                10.94,
                                3.11,
                                5.03
                            ],
                            [
                                3.78,
                                16.24,
                                -2.01
                            ]
                        ],
                        "impediment_velocities": [
                            [
                                0.0,
                                0.0,
                                -0.27
                            ],
                            [
                                0.0,
                                0.0,
                                0.56
                            ],
                            [
                                0.0,
                                0.0,
                                0.1
                            ]
                        ],
                        "flight_path_waypoints": [
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                0.0,
                                22.24,
                                0.0
                            ],
                            [
                                11.13,
                                0.0,
                                8.76
                            ],
                            [
                                4.67,
                                5.06,
                                4.27
                            ],
                            [
                                4.69,
                                17.05,
                                4.48
                            ]
                        ]
                    },
                    "sensor_parameters": {
                        "imu_noise_density": 0.01,
                        "gps_position_error": 0.09,
                        "gps_velocity_error": 0.04
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * d²x/dt² = R * F - m * g * e_z - D * v",
                    "rotational": "I * dω/dt + ω × (I * ω) = M",
                    "actuator": "F_i = k_f * ω_i², M_i = k_m * ω_i²"
                },
                "constraints": {
                    "collision_avoidance": "min(||x - o_i||) > r_safe ∀ i",
                    "control_signals": "F_min ≤ F_i ≤ F_max",
                    "energy": "min ∫ (F_1² + F_2² + F_3² + F_4²) dt"
                },
                "optimization": "min J = w1 * ∫ (x - x_des)² dt + w2 * ∫ (F_1² + F_2² + F_3² + F_4²) dt"
            }
        }
    },
    {
        "task_id": "2e4652f9-1039-477f-ba6e-4a0c75f868d6-a",
        "original_task_id": "2e4652f9-1039-477f-ba6e-4a0c75f868d6",
        "task_details": {
            "task_instructions": "Concevez une stratégie de contrôle optimale pour un bras de manipulateur robotique pour effectuer des mouvements agiles dans un cadre d'usine confiné tout en contournant les obstacles mobiles. La stratégie de contrôle doit tenir compte de la dynamique non linéaire, des limitations conjointes et des contraintes de calcul en temps réel. La solution doit inclure une dérivation détaillée des lois de contrôle, une analyse de stabilité et des résultats de simulation à l'aide de l'ensemble de données fourni.",
            "task_data": {
                "data_points": {
                    "manipulator_parameters": {
                        "mass": 1.45,
                        "inertia_matrix": [
                            0.04,
                            0.03,
                            0.03
                        ],
                        "joint_torque_coefficient": 0.0,
                        "joint_friction_coefficient": 0.02,
                        "link_length": 0.27,
                        "max_joint_speed": 1397.35,
                        "min_joint_speed": 189.6
                    },
                    "environment_parameters": {
                        "impediment_positions": [
                            [
                                13.48,
                                12.89,
                                5.45
                            ],
                            [
                                8.37,
                                4.11,
                                10.52
                            ],
                            [
                                5.5,
                                4.37,
                                3.4
                            ]
                        ],
                        "impediment_velocities": [
                            [
                                0.34,
                                0.0,
                                0.19
                            ],
                            [
                                0.09,
                                0.31,
                                0.0
                            ],
                            [
                                0.55,
                                0.26,
                                0.0
                            ]
                        ],
                        "conveyor_belt_speed": [
                            0.52,
                            1.4,
                            1.82
                        ],
                        "factory_dimensions": [
                            19.88,
                            21.0,
                            9.34
                        ]
                    },
                    "initial_conditions": {
                        "position": [
                            1.13,
                            0.0,
                            0.0
                        ],
                        "velocity": [
                            0.0,
                            0.0,
                            0.0
                        ],
                        "orientation": [
                            0.0,
                            0.0,
                            0.0
                        ],
                        "angular_velocity": [
                            0.0,
                            0.0,
                            0.0
                        ]
                    },
                    "desired_trajectory": {
                        "waypoints": [
                            [
                                5.13,
                                1.92,
                                5.19
                            ],
                            [
                                18.83,
                                22.97,
                                4.69
                            ],
                            [
                                15.85,
                                4.08,
                                15.1
                            ],
                            [
                                2.91,
                                9.97,
                                9.24
                            ]
                        ],
                        "time_constraints": [
                            20.21,
                            16.59,
                            4.76,
                            10.32
                        ]
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * ddot{x} = R * F - m * g * e_3 - D * dot{x}",
                    "rotational": "I * dot{omega} + omega x (I * omega) = M",
                    "joint_forces": "F_i = k_f * omega_i^2",
                    "joint_torques": "tau_i = k_m * omega_i^2"
                },
                "constraints": {
                    "joint_limitations": "omega_min <= omega_i <= omega_max",
                    "collision_avoidance": "||x - x_obs|| >= r_obs",
                    "stability": "Lyapunov function V(x) > 0, dot{V}(x) < 0"
                },
                "optimization": {
                    "objective": "minimize integral from t0 to tf of (||x - x_d||^2 + ||u||^2) dt",
                    "subject_to": "dynamics, constraints"
                }
            }
        }
    },
    {
        "task_id": "2e4652f9-1039-477f-ba6e-4a0c75f868d6-b",
        "original_task_id": "2e4652f9-1039-477f-ba6e-4a0c75f868d6",
        "task_details": {
            "task_instructions": "Entwerfen Sie eine optimale Kontrollstrategie für ein Roboter -Luftfahrzeug (RAV), um aggressives Manövrieren in einer engen städtischen Umgebung durchzuführen und gleichzeitig zu bewegenden Hindernissen zu vermeiden. Die Kontrollstrategie muss nichtlineare Aerodynamik, Aktuatorsättigung und Rechenbeschränkungen in Echtzeit berücksichtigen. Die Lösung sollte eine detaillierte Ableitung der Kontrollgesetze, Stabilitätsanalysen und Simulationsergebnisse unter Verwendung des bereitgestellten Datensatzes enthalten.",
            "task_data": {
                "data_points": {
                    "rav_parameters": {
                        "mass": 1.65,
                        "inertia_matrix": [
                            0.04,
                            0.03,
                            0.03
                        ],
                        "motor_thrust_coefficient": 0.0,
                        "motor_torque_coefficient": 0.02,
                        "arm_length": 0.25,
                        "max_motor_speed": 1521.66,
                        "min_motor_speed": 204.75
                    },
                    "environment_parameters": {
                        "obstacle_positions": [
                            [
                                5.04,
                                3.15,
                                5.7
                            ],
                            [
                                12.64,
                                13.58,
                                4.85
                            ],
                            [
                                4.0,
                                8.17,
                                9.64
                            ]
                        ],
                        "obstacle_velocities": [
                            [
                                0.17,
                                0.0,
                                0.38
                            ],
                            [
                                0.33,
                                0.09,
                                0.0
                            ],
                            [
                                0.32,
                                0.0,
                                0.48
                            ]
                        ],
                        "wind_gust": [
                            1.34,
                            2.29,
                            0.46
                        ],
                        "urban_canyon_dimensions": [
                            20.27,
                            20.01,
                            10.95
                        ]
                    },
                    "initial_conditions": {
                        "position": [
                            0.0,
                            0.0,
                            1.11
                        ],
                        "velocity": [
                            0.0,
                            0.0,
                            0.0
                        ],
                        "orientation": [
                            0.0,
                            0.0,
                            0.0
                        ],
                        "angular_velocity": [
                            0.0,
                            0.0,
                            0.0
                        ]
                    },
                    "desired_trajectory": {
                        "waypoints": [
                            [
                                3.62,
                                14.78,
                                15.17
                            ],
                            [
                                9.87,
                                10.67,
                                3.01
                            ],
                            [
                                19.37,
                                17.31,
                                4.73
                            ],
                            [
                                1.71,
                                5.72,
                                4.43
                            ]
                        ],
                        "time_constraints": [
                            15.79,
                            10.65,
                            20.93,
                            5.11
                        ]
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * ddot{x} = R * F - m * g * e_3 - D * dot{x}",
                    "rotational": "I * dot{omega} + omega x (I * omega) = M",
                    "motor_forces": "F_i = k_f * omega_i^2",
                    "motor_torques": "tau_i = k_m * omega_i^2"
                },
                "constraints": {
                    "actuator_saturation": "omega_min <= omega_i <= omega_max",
                    "collision_avoidance": "||x - x_obs|| >= r_obs",
                    "stability": "Lyapunov function V(x) > 0, dot{V}(x) < 0"
                },
                "optimization": {
                    "objective": "minimize integral from t0 to tf of (||x - x_d||^2 + ||u||^2) dt",
                    "subject_to": "dynamics, constraints"
                }
            }
        }
    },
    {
        "task_id": "2e4652f9-1039-477f-ba6e-4a0c75f868d6-c",
        "original_task_id": "2e4652f9-1039-477f-ba6e-4a0c75f868d6",
        "task_details": {
            "task_instructions": "Entwerfen Sie eine optimale Kontrollstrategie für einen Roboterhubschrauber, um aggressives Manövrieren in einer engen städtischen Umgebung durchzuführen und gleichzeitig zu bewegenden Hindernissen zu vermeiden. Die Kontrollstrategie muss nichtlineare Aerodynamik, Aktuatorsättigung und Rechenbeschränkungen in Echtzeit berücksichtigen. Die Lösung sollte eine detaillierte Ableitung der Kontrollgesetze, Stabilitätsanalysen und Simulationsergebnisse unter Verwendung des bereitgestellten Datensatzes enthalten.",
            "task_data": {
                "data_points": {
                    "helicopter_parameters": {
                        "mass": 1.4,
                        "inertia_matrix": [
                            0.03,
                            0.04,
                            0.03
                        ],
                        "motor_thrust_coefficient": 0.0,
                        "motor_torque_coefficient": 0.01,
                        "arm_length": 0.24,
                        "max_motor_speed": 1459.28,
                        "min_motor_speed": 195.17
                    },
                    "environment_parameters": {
                        "obstacle_positions": [
                            [
                                15.34,
                                4.37,
                                12.39
                            ],
                            [
                                5.45,
                                2.67,
                                4.45
                            ],
                            [
                                4.24,
                                9.15,
                                7.46
                            ]
                        ],
                        "obstacle_velocities": [
                            [
                                0.0,
                                0.11,
                                0.33
                            ],
                            [
                                0.39,
                                0.22,
                                0.0
                            ],
                            [
                                0.51,
                                0.0,
                                0.32
                            ]
                        ],
                        "wind_gust": [
                            1.32,
                            2.25,
                            0.43
                        ],
                        "urban_canyon_dimensions": [
                            20.26,
                            9.73,
                            19.72
                        ]
                    },
                    "initial_conditions": {
                        "position": [
                            0.0,
                            0.0,
                            1.07
                        ],
                        "velocity": [
                            0.0,
                            0.0,
                            0.0
                        ],
                        "orientation": [
                            0.0,
                            0.0,
                            0.0
                        ],
                        "angular_velocity": [
                            0.0,
                            0.0,
                            0.0
                        ]
                    },
                    "desired_trajectory": {
                        "waypoints": [
                            [
                                4.57,
                                22.05,
                                22.49
                            ],
                            [
                                2.59,
                                10.04,
                                9.59
                            ],
                            [
                                13.58,
                                15.61,
                                3.62
                            ],
                            [
                                1.86,
                                5.01,
                                5.63
                            ]
                        ],
                        "time_constraints": [
                            21.59,
                            5.43,
                            9.48,
                            14.4
                        ]
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * ddot{x} = R * F - m * g * e_3 - D * dot{x}",
                    "rotational": "I * dot{omega} + omega x (I * omega) = M",
                    "motor_forces": "F_i = k_f * omega_i^2",
                    "motor_torques": "tau_i = k_m * omega_i^2"
                },
                "constraints": {
                    "actuator_saturation": "omega_min <= omega_i <= omega_max",
                    "collision_avoidance": "||x - x_obs|| >= r_obs",
                    "stability": "Lyapunov function V(x) > 0, dot{V}(x) < 0"
                },
                "optimization": {
                    "objective": "minimize integral from t0 to tf of (||x - x_d||^2 + ||u||^2) dt",
                    "subject_to": "dynamics, constraints"
                }
            }
        }
    },
    {
        "task_id": "681303f1-7bd0-410d-bb37-52455f02b9ce-a",
        "original_task_id": "681303f1-7bd0-410d-bb37-52455f02b9ce",
        "task_details": {
            "task_instructions": "Diseñe un sistema de control óptimo para un manipulador robótico que funciona en un entorno que cambia dinámicamente con perturbaciones estocásticas. El sistema debe minimizar el consumo de energía mientras mantiene la estabilidad y el seguimiento de una trayectoria predefinida con una desviación máxima permitida de 0.1 metros. La solución debe incluir una ley de control robusta, un algoritmo de estimación estatal y un mecanismo de rechazo de perturbaciones. Proporcione un análisis detallado del rendimiento del sistema en diferentes condiciones operativas y valida el diseño utilizando simulaciones numéricas.",
            "task_data": {
                "data_points": {
                    "manipulator_parameters": {
                        "mass": "1.5 kg",
                        "inertia_matrix": "[0.03, 0, 0; 0, 0.03, 0; 0, 0, 0.04] kg·m²",
                        "motor_torque_coefficient": "8.54858e-6 N/(rad/s)²",
                        "motor_friction_coefficient": "1.6e-7 N·m/(rad/s)²",
                        "link_length": "0.25 m"
                    },
                    "environmental_parameters": {
                        "mean_disturbance_magnitude": "[5, 15] N",
                        "disturbance_intensity": "10-20%",
                        "disturbance_model": "Dryden spectrum"
                    },
                    "trajectory_waypoints": {
                        "waypoint_1": "[0, 0, 0] m",
                        "waypoint_2": "[10, 5, 3] m",
                        "waypoint_3": "[20, 10, 5] m",
                        "waypoint_4": "[30, 15, 7] m"
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": "M(q)q̈ + C(q, q̇)q̇ + G(q) = τ + τ_d",
                "control_law": "τ = -K_p e - K_d ė + τ_ff",
                "state_estimation": "x̂_{k+1} = f(x̂_k, u_k) + L(y_k - h(x̂_k))",
                "disturbance_rejection": "τ_d = -B(q) d̂",
                "performance_metric": "J = ∫(eᵀQe + uᵀRu) dt"
            }
        }
    },
    {
        "task_id": "681303f1-7bd0-410d-bb37-52455f02b9ce-b",
        "original_task_id": "681303f1-7bd0-410d-bb37-52455f02b9ce",
        "task_details": {
            "task_instructions": "Entwerfen Sie ein optimales Steuerungssystem für einen Robotermanipulator, der in einer variablen Lastumgebung mit stochastischen Störungen arbeitet. Das System muss den Energieverbrauch minimieren und gleichzeitig die Stabilität aufrechterhalten und einen vordefinierten Pfad mit einer maximal zulässigen Abweichung von 0,1 Metern verfolgen. Die Lösung muss ein robustes Kontrollgesetz, einen staatlichen Schätzungsalgorithmus und einen Störungsabstoßungsmechanismus enthalten. Geben Sie eine detaillierte Analyse der Leistung des Systems unter unterschiedlichen Lastbedingungen (5-15 kg) an und validieren Sie das Design mit numerischen Simulationen.",
            "task_data": {
                "data_points": {
                    "manipulator_parameters": {
                        "mass": "1.5 kg",
                        "inertia_matrix": "[0.03, 0, 0; 0, 0.03, 0; 0, 0, 0.04] kg·m²",
                        "motor_torque_coefficient": "8.54858e-6 N/(rad/s)²",
                        "motor_friction_coefficient": "1.6e-7 N·m/(rad/s)²",
                        "link_length": "0.25 m"
                    },
                    "load_parameters": {
                        "mean_load": "[5, 15] kg",
                        "load_variation": "10-20%",
                        "load_model": "Gaussian distribution"
                    },
                    "trajectory_waypoints": {
                        "waypoint_1": "[0, 0, 0] m",
                        "waypoint_2": "[10, 5, 3] m",
                        "waypoint_3": "[20, 10, 5] m",
                        "waypoint_4": "[30, 15, 7] m"
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": "M(q)q̈ + C(q, q̇)q̇ + G(q) + F(q̇) = τ + τ_d",
                "control_law": "τ = -K_p e - K_d ė + τ_ff",
                "state_estimation": "x̂_{k+1} = f(x̂_k, u_k) + L(y_k - h(x̂_k))",
                "disturbance_rejection": "τ_d = -B(q) d̂",
                "performance_metric": "J = ∫(eᵀQe + uᵀRu) dt"
            }
        }
    },
    {
        "task_id": "681303f1-7bd0-410d-bb37-52455f02b9ce-c",
        "original_task_id": "681303f1-7bd0-410d-bb37-52455f02b9ce",
        "task_details": {
            "task_instructions": "Concevez un système de contrôle optimal pour un manipulateur robotique fonctionnant dans un environnement à charge variable avec des perturbations stochastiques. Le système doit minimiser la consommation d'énergie tout en maintenant la stabilité et le suivi d'une trajectoire prédéfinie avec un écart maximal admissible de 0,1 mètre. La solution doit inclure une loi de contrôle robuste, un algorithme d'estimation de l'État et un mécanisme de rejet de perturbation. Fournissez une analyse détaillée des performances du système dans des conditions de charge variables (5-15 kg) et validez la conception à l'aide de simulations numériques.",
            "task_data": {
                "data_points": {
                    "manipulator_parameters": {
                        "mass": "1.5 kg",
                        "inertia_matrix": "[0.03, 0, 0; 0, 0.03, 0; 0, 0, 0.04] kg·m²",
                        "motor_torque_coefficient": "8.54858e-6 N/(rad/s)²",
                        "motor_friction_coefficient": "1.6e-7 N·m/(rad/s)²",
                        "link_length": "0.25 m"
                    },
                    "load_parameters": {
                        "mean_load": "[5, 15] kg",
                        "load_variation": "10-20%",
                        "load_model": "Gaussian distribution"
                    },
                    "trajectory_waypoints": {
                        "waypoint_1": "[0, 0, 0] m",
                        "waypoint_2": "[10, 5, 3] m",
                        "waypoint_3": "[20, 10, 5] m",
                        "waypoint_4": "[30, 15, 7] m"
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": "M(q)q̈ + C(q, q̇)q̇ + G(q) + F(q̇) = τ + τ_d",
                "control_law": "τ = -K_p e - K_d ė + τ_ff",
                "state_estimation": "x̂_{k+1} = f(x̂_k, u_k) + L(y_k - h(x̂_k))",
                "disturbance_rejection": "τ_d = -B(q) d̂",
                "performance_metric": "J = ∫(eᵀQe + uᵀRu) dt"
            }
        }
    },
    {
        "task_id": "bdc21090-d6d4-41ec-827c-33c8e96a4f08-a",
        "original_task_id": "bdc21090-d6d4-41ec-827c-33c8e96a4f08",
        "task_details": {
            "task_instructions": "Desarrolle un algoritmo de control óptimo para un helicóptero robótico que realice maniobras agresivas en una corriente de aire turbulenta. El algoritmo debe minimizar el uso de la potencia mientras mantiene la estabilidad y la precisión de seguimiento de la ruta bajo estas restricciones: 1) El helicóptero robótico debe adherirse a una ruta predefinida con una desviación posicional máxima de 0.1 m. 2) Las señales de control deben permanecer dentro de los límites del actuador. 3) El sistema debe contrarrestar las ráfagas de aire de hasta 10 m/s. Proporcione la ley de control, el análisis de estabilidad y los resultados de la simulación.",
            "task_data": {
                "data_points": {
                    "helicopter_parameters": {
                        "mass": 1.44,
                        "inertia_matrix": [
                            0.03,
                            0.04,
                            0.03
                        ],
                        "arm_length": 0.22,
                        "lift_coefficient": 0.0,
                        "drag_coefficient": 0.0,
                        "motor_time_constant": 0.02,
                        "max_motor_speed": 1671.18,
                        "min_motor_speed": 210.33
                    },
                    "trajectory": {
                        "waypoints": [
                            [
                                0.0,
                                19.82,
                                0.0
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                2.96,
                                5.11,
                                2.01
                            ],
                            [
                                4.01,
                                8.91,
                                0.0
                            ],
                            [
                                16.92,
                                2.19,
                                -3.25
                            ]
                        ],
                        "time_vector": [
                            2.52,
                            8.39,
                            5.32,
                            0.0,
                            9.95
                        ]
                    },
                    "air_current": {
                        "mean_speed": 5.17,
                        "gust_amplitude": 11.2,
                        "turbulence_intensity": 0.18,
                        "spatial_correlation_length": 2.17
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * ddot{x} = R * F - m * g * e_z - D_t * dot{x}",
                    "rotational": "I * dot{omega} + omega x (I * omega) = M - D_r * omega",
                    "motor_model": "tau * dot{omega}_i + omega_i = k * u_i"
                },
                "constraints": {
                    "position_error": "||x_d - x|| <= 0.1",
                    "control_input": "omega_min <= omega_i <= omega_max",
                    "wind_rejection": "||delta_F|| <= 10 * D_t"
                },
                "objective": "min integral_0^T (sum(u_i^2)) dt"
            }
        }
    },
    {
        "task_id": "bdc21090-d6d4-41ec-827c-33c8e96a4f08-b",
        "original_task_id": "bdc21090-d6d4-41ec-827c-33c8e96a4f08",
        "task_details": {
            "task_instructions": "Entwerfen Sie ein optimales Kontrollschema für einen Roboterhubschrauber, der aggressive Manöver in einem turbulenten Luftstrom durchführt. Das Schema muss den Energieverbrauch minimieren und gleichzeitig die Stabilität und Verfolgung der folgenden Einschränkungen sicherstellen: 1) Der Roboterhubschrauber muss einem vordefinierten Flugweg mit einem maximalen Positionsfehler von 0,1 m folgen. 2) Die Steuereingänge dürfen die Sättigungsgrenzen der Stellantrieb nicht überschreiten. 3) Das System muss Windböen bis zu 10 m/s ablehnen. Geben Sie das Kontrollrecht, die Stabilitätsanalyse und die Simulationsergebnisse an.",
            "task_data": {
                "data_points": {
                    "helicopter_parameters": {
                        "mass": 1.68,
                        "inertia_matrix": [
                            0.03,
                            0.03,
                            0.04
                        ],
                        "arm_length": 0.27,
                        "lift_coefficient": 0.0,
                        "drag_coefficient": 0.0,
                        "rotor_time_constant": 0.02,
                        "max_rotor_speed": 1521.0,
                        "min_rotor_speed": 202.79
                    },
                    "flight_path": {
                        "waypoints": [
                            [
                                2.02,
                                2.71,
                                4.89
                            ],
                            [
                                0.0,
                                21.4,
                                0.0
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                -3.17,
                                15.69,
                                1.74
                            ],
                            [
                                4.22,
                                0.0,
                                11.05
                            ]
                        ],
                        "time_vector": [
                            5.24,
                            8.57,
                            2.51,
                            0.0,
                            6.38
                        ]
                    },
                    "air_current": {
                        "mean_speed": 5.62,
                        "gust_amplitude": 10.83,
                        "turbulence_intensity": 0.19,
                        "spatial_correlation_length": 2.04
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * ddot{x} = R * F - m * g * e_z - D_t * dot{x}",
                    "rotational": "I * dot{omega} + omega x (I * omega) = M - D_r * omega",
                    "rotor_model": "tau * dot{omega}_i + omega_i = k * u_i"
                },
                "constraints": {
                    "position_error": "||x_d - x|| <= 0.1",
                    "control_input": "omega_min <= omega_i <= omega_max",
                    "wind_rejection": "||delta_F|| <= 10 * D_t"
                },
                "objective": "min integral_0^T (sum(u_i^2)) dt"
            }
        }
    },
    {
        "task_id": "bdc21090-d6d4-41ec-827c-33c8e96a4f08-c",
        "original_task_id": "bdc21090-d6d4-41ec-827c-33c8e96a4f08",
        "task_details": {
            "task_instructions": "Concevez un schéma de contrôle optimal pour un véhicule aérien robotique (RAV) exécutant des manœuvres agressives dans un flux atmosphérique turbulent. Le schéma doit minimiser la consommation d'énergie tout en maintenant la stabilité et la précision de suivi du chemin soumis à ces contraintes: 1) le RAV doit adhérer à un chemin de vol prédéfini avec une déviation de position maximale de 0,1 m. 2) Les signaux de contrôle doivent rester dans les limites de l'actionneur. 3) Le système doit contrer les rafales de vent allant jusqu'à 10 m / s. Fournissez l'algorithme de contrôle, l'analyse de stabilité et les résultats de simulation.",
            "task_data": {
                "data_points": {
                    "rav_parameters": {
                        "mass": 1.67,
                        "inertia_matrix": [
                            0.03,
                            0.03,
                            0.03
                        ],
                        "arm_length": 0.22,
                        "thrust_coefficient": 0.0,
                        "drag_coefficient": 0.0,
                        "motor_time_constant": 0.02,
                        "max_motor_speed": 1316.73,
                        "min_motor_speed": 218.75
                    },
                    "flight_path": {
                        "waypoints": [
                            [
                                16.33,
                                1.74,
                                -3.13
                            ],
                            [
                                0.0,
                                0.0,
                                0.0
                            ],
                            [
                                3.7,
                                11.44,
                                0.0
                            ],
                            [
                                0.0,
                                0.0,
                                22.13
                            ],
                            [
                                1.83,
                                3.13,
                                5.32
                            ]
                        ],
                        "time_vector": [
                            8.31,
                            5.27,
                            8.6,
                            0.0,
                            2.55
                        ]
                    },
                    "atmospheric_flow": {
                        "mean_speed": 4.96,
                        "gust_amplitude": 10.07,
                        "turbulence_intensity": 0.2,
                        "spatial_correlation_length": 1.87
                    }
                }
            },
            "mathematical_formulation": {
                "dynamics": {
                    "translational": "m * ddot{x} = R * F - m * g * e_z - D_t * dot{x}",
                    "rotational": "I * dot{omega} + omega x (I * omega) = M - D_r * omega",
                    "motor_model": "tau * dot{omega}_i + omega_i = k * u_i"
                },
                "constraints": {
                    "position_error": "||x_d - x|| <= 0.1",
                    "control_input": "omega_min <= omega_i <= omega_max",
                    "wind_rejection": "||delta_F|| <= 10 * D_t"
                },
                "objective": "min integral_0^T (sum(u_i^2)) dt"
            }
        }
    },
    {
        "task_id": "133a81c8-4785-4cf7-8e6d-428b1d4f7b31-a",
        "original_task_id": "133a81c8-4785-4cf7-8e6d-428b1d4f7b31",
        "task_details": {
            "task_instructions": "Concevez un système de contrôle optimal pour un hélicoptère robotique effectuant des manœuvres agressives dans un flux d'air turbulent. Le système doit stabiliser l'hélicoptère tout en minimisant la consommation d'énergie et en adhérant aux contraintes physiques. La solution doit inclure: 1) un modèle dynamique non linéaire de l'hélicoptère, 2) un modèle de turbulence de flux d'air, 3) une loi de contrôle dérivée en utilisant le contrôle prédictif du modèle (MPC), 4) Validation via une simulation numérique dans des conditions de flux d'air spécifié.",
            "task_data": {
                "data_points": {
                    "helicopter_parameters": {
                        "mass": 1.68,
                        "inertia_matrix": [
                            0.04,
                            0.03,
                            0.03
                        ],
                        "arm_length": 0.23,
                        "rotor_thrust_coefficient": 0.0,
                        "rotor_torque_coefficient": 0.01,
                        "max_rotor_speed": 1615.07
                    },
                    "airflow_conditions": {
                        "mean_airflow_speed": 5.45,
                        "turbulence_intensity": 0.21,
                        "airflow_gust_amplitude": 2.7,
                        "gust_frequency": 0.56
                    },
                    "environmental_parameters": {
                        "gravity": 10.2,
                        "air_density": 1.3
                    }
                }
            },
            "mathematical_formulation": {
                "nonlinear_dynamics": {
                    "equations_of_motion": [
                        "m * ddot{x} = (cos(phi)sin(theta)cos(psi) + sin(phi)sin(psi)) * U1 - k_x * dot{x} + F_wx",
                        "m * ddot{y} = (cos(phi)sin(theta)sin(psi) - sin(phi)cos(psi)) * U1 - k_y * dot{y} + F_wy",
                        "m * ddot{z} = (cos(phi)cos(theta)) * U1 - m * g - k_z * dot{z} + F_wz",
                        "I_x * ddot{phi} = dot{theta} * dot{psi} (I_y - I_z) + l * U2 - k_phi * dot{phi} + M_wx",
                        "I_y * ddot{theta} = dot{phi} * dot{psi} (I_z - I_x) + l * U3 - k_theta * dot{theta} + M_wy",
                        "I_z * ddot{psi} = dot{phi} * dot{theta} (I_x - I_y) + U4 - k_psi * dot{psi} + M_wz"
                    ],
                    "control_inputs": [
                        "U1 = b * (omega_1^2 + omega_2^2 + omega_3^2 + omega_4^2)",
                        "U2 = b * (omega_4^2 - omega_2^2)",
                        "U3 = b * (omega_3^2 - omega_1^2)",
                        "U4 = d * (omega_1^2 - omega_2^2 + omega_3^2 - omega_4^2)"
                    ]
                },
                "airflow_model": {
                    "turbulence_model": "Dryden Wind Turbulence Model",
                    "gust_model": "1-cos gust model with amplitude A and frequency omega"
                },
                "mpc_formulation": {
                    "objective_function": "minimize J = integral( x^T Q x + u^T R u ) dt",
                    "constraints": [
                        "rotor speeds within [0, max_rotor_speed]",
                        "attitude angles within stability limits",
                        "airflow disturbance rejection"
                    ]
                }
            }
        }
    },
    {
        "task_id": "133a81c8-4785-4cf7-8e6d-428b1d4f7b31-b",
        "original_task_id": "133a81c8-4785-4cf7-8e6d-428b1d4f7b31",
        "task_details": {
            "task_instructions": "Concevez un système de contrôle optimal pour un hélicoptère robotique effectuant des manœuvres agressives dans un flux d'air turbulent. Le système doit stabiliser l'hélicoptère tout en minimisant la consommation d'énergie et en adhérant aux contraintes physiques. La solution doit inclure: 1) un modèle dynamique non linéaire de l'hélicoptère, 2) un modèle de turbulence de flux d'air, 3) une loi de contrôle dérivée en utilisant le contrôle prédictif du modèle (MPC), 4) Validation via une simulation numérique dans des conditions de flux d'air spécifié.",
            "task_data": {
                "data_points": {
                    "helicopter_parameters": {
                        "mass": 1.57,
                        "inertia_matrix": [
                            0.04,
                            0.03,
                            0.03
                        ],
                        "arm_length": 0.24,
                        "rotor_thrust_coefficient": 0.0,
                        "rotor_torque_coefficient": 0.01,
                        "max_rotor_speed": 1626.96
                    },
                    "airflow_conditions": {
                        "mean_airflow_speed": 5.15,
                        "turbulence_intensity": 0.21,
                        "airflow_gust_amplitude": 3.35,
                        "gust_frequency": 0.46
                    },
                    "environmental_parameters": {
                        "gravity": 10.92,
                        "air_density": 1.11
                    }
                }
            },
            "mathematical_formulation": {
                "nonlinear_dynamics": {
                    "equations_of_motion": [
                        "m * ddot{x} = (cos(phi)sin(theta)cos(psi) + sin(phi)sin(psi)) * U1 - k_x * dot{x} + F_wx",
                        "m * ddot{y} = (cos(phi)sin(theta)sin(psi) - sin(phi)cos(psi)) * U1 - k_y * dot{y} + F_wy",
                        "m * ddot{z} = (cos(phi)cos(theta)) * U1 - m * g - k_z * dot{z} + F_wz",
                        "I_x * ddot{phi} = dot{theta} * dot{psi} (I_y - I_z) + l * U2 - k_phi * dot{phi} + M_wx",
                        "I_y * ddot{theta} = dot{phi} * dot{psi} (I_z - I_x) + l * U3 - k_theta * dot{theta} + M_wy",
                        "I_z * ddot{psi} = dot{phi} * dot{theta} (I_x - I_y) + U4 - k_psi * dot{psi} + M_wz"
                    ],
                    "control_inputs": [
                        "U1 = b * (omega_1^2 + omega_2^2 + omega_3^2 + omega_4^2)",
                        "U2 = b * (omega_4^2 - omega_2^2)",
                        "U3 = b * (omega_3^2 - omega_1^2)",
                        "U4 = d * (omega_1^2 - omega_2^2 + omega_3^2 - omega_4^2)"
                    ]
                },
                "airflow_model": {
                    "turbulence_model": "Dryden Wind Turbulence Model",
                    "gust_model": "1-cos gust model with amplitude A and frequency omega"
                },
                "mpc_formulation": {
                    "objective_function": "minimize J = integral( x^T Q x + u^T R u ) dt",
                    "constraints": [
                        "rotor speeds within [0, max_rotor_speed]",
                        "attitude angles within stability limits",
                        "airflow disturbance rejection"
                    ]
                }
            }
        }
    },
    {
        "task_id": "133a81c8-4785-4cf7-8e6d-428b1d4f7b31-c",
        "original_task_id": "133a81c8-4785-4cf7-8e6d-428b1d4f7b31",
        "task_details": {
            "task_instructions": "Entwerfen Sie ein optimales Kontrollsystem für einen Roboterhubschrauber, der aggressive Manöver in einem turbulenten Windfeld durchführt. Das System muss den Hubschrauber stabilisieren und gleichzeitig den Energieverbrauch minimieren und an physischen Einschränkungen einhalten. Die Lösung muss umfassen: 1) ein nichtlineares dynamisches Modell des Roboterhubschraubers, 2) ein Windturbulenzmodell, 3) ein Kontrollgesetz, das unter Verwendung der Modellvorhersagekontrolle (MPC) (MPC), 4) Validierung durch numerische Simulation unter bestimmten Windbedingungen abgeleitet wurde.",
            "task_data": {
                "data_points": {
                    "helicopter_parameters": {
                        "mass": 1.55,
                        "inertia_matrix": [
                            0.03,
                            0.03,
                            0.03
                        ],
                        "arm_length": 0.29,
                        "rotor_thrust_coefficient": 0.0,
                        "rotor_torque_coefficient": 0.02,
                        "max_rotor_speed": 1669.32
                    },
                    "wind_conditions": {
                        "mean_wind_speed": 5.05,
                        "turbulence_intensity": 0.23,
                        "wind_gust_amplitude": 3.39,
                        "gust_frequency": 0.48
                    },
                    "environmental_parameters": {
                        "gravity": 9.27,
                        "air_density": 1.3
                    }
                }
            },
            "mathematical_formulation": {
                "nonlinear_dynamics": {
                    "equations_of_motion": [
                        "m * ddot{x} = (cos(phi)sin(theta)cos(psi) + sin(phi)sin(psi)) * U1 - k_x * dot{x} + F_wx",
                        "m * ddot{y} = (cos(phi)sin(theta)sin(psi) - sin(phi)cos(psi)) * U1 - k_y * dot{y} + F_wy",
                        "m * ddot{z} = (cos(phi)cos(theta)) * U1 - m * g - k_z * dot{z} + F_wz",
                        "I_x * ddot{phi} = dot{theta} * dot{psi} (I_y - I_z) + l * U2 - k_phi * dot{phi} + M_wx",
                        "I_y * ddot{theta} = dot{phi} * dot{psi} (I_z - I_x) + l * U3 - k_theta * dot{theta} + M_wy",
                        "I_z * ddot{psi} = dot{phi} * dot{theta} (I_x - I_y) + U4 - k_psi * dot{psi} + M_wz"
                    ],
                    "control_inputs": [
                        "U1 = b * (omega_1^2 + omega_2^2 + omega_3^2 + omega_4^2)",
                        "U2 = b * (omega_4^2 - omega_2^2)",
                        "U3 = b * (omega_3^2 - omega_1^2)",
                        "U4 = d * (omega_1^2 - omega_2^2 + omega_3^2 - omega_4^2)"
                    ]
                },
                "wind_model": {
                    "turbulence_model": "Dryden Wind Turbulence Model",
                    "gust_model": "1-cos gust model with amplitude A and frequency omega"
                },
                "mpc_formulation": {
                    "objective_function": "minimize J = integral( x^T Q x + u^T R u ) dt",
                    "constraints": [
                        "rotor speeds within [0, max_rotor_speed]",
                        "attitude angles within stability limits",
                        "wind disturbance rejection"
                    ]
                }
            }
        }
    }
]